import threading

import shutil
import time

import pyperclip
import os
import random

from tkinter import *
import sqlite3 as sq
from tkinter.ttk import Combobox
from tkinter import messagebox, Label, Frame
import tkinter as tk
from tkinter.scrolledtext import ScrolledText
from PIL import Image, ImageTk

from datetime import datetime, timedelta
import calendar

from docx.enum.section import WD_ORIENT
from docx.shared import Cm
from docx.shared import Pt
from docx import Document
from docxtpl import DocxTemplate
from docxcompose.composer import Composer
from mkb_10 import mkb_10
from post_1201 import post_1201

import subprocess, platform


all_data_certificate = {
    'sport_section': (('баскетболом', 'волейболом', 'гандболом', 'теннисом', 'футболом', 'хоккеем'),
                      ('боксом', 'вольной борьбой', 'каратэ', 'тхэквондо', "ушу"),
                      ('плаванием в бассейне', 'греблей'),
                      ("гимнастикой", 'спортивной гимнастикой', 'легкой атлетикой', 'фигурным катанием'),
                      ('музыкой', 'танцами', 'шахматами', 'шашками'),
                      ('+ СОРЕВНОВАНИЯ',) ),
    "health": {
        "group": ("1", "2", "3", "4"),
        "physical": ("Основная", "Подготовительная", "СМГ", "ЛФК"),
        "regime": ("общий", "ортопедический", "зрительный", "щадящий", "охранительный"),
        "diet": ("А", "Б", "Д", "М", 'П', 'ПП', 'Ц'),
        "desk": ("по росту", "1", "2", "3", "средний ряд")
    },
    "diagnosis": (("<< КАРДИОЛОГИЯ >>", "САС:", "ООО", "ДХЛЖ", "НК0", "ФСШ", "_",
                   "ВПС:", "ДМЖП", "ДМПП", "мышечный", "мембранозный", "_",
                   "НРС:", "умеренная", "выраженная", "тахикардия", "брадикардия", "_",
                   "экстрасистолия", "укорочение инт. PQ", "миграция вводителя ритма", "_",
                   "СА блокада", "АВ блокада", "НБПНПГ", "_"
                   ),
                  ("<< ЛОГОПЕДИЯ >>", "ОНР", "ФНР", "ФФНР", "ЗРР", "_",
                   "стертая дизартрия", "дислалия", "_",
                   "1", "2", "3", "4", "ур.р.р.", "_"
                   ),
                  ("<< ОФТАЛЬМОЛОГИЯ >>", "Спазм аккомодации", "Миопия", "Гиперметропия", "_",
                   "слабой степени", "средней степени", "тяжелой степени", "_",
                   "миопический", "гиперметропический", "_",
                   "OD", "OS", "OU", "ast", "с ast", "осложн. ||", "_"
                   ),
                  ("<< ОРТОПЕДИЯ >>", "Нарушение осанки", "Сколиотическая осанка", "Плоскостопие", "ПВУС", "_",
                   "ИС:", "левосторонняя", "правосторонняя", "кифотическая", "_",
                   "грудная", "поясничная", "грудо-поясничная", "_",
                   "деформация позвоночника", "остаточная дисплазия ТБС", "_",
                   "ГПС", "1 ст.", "2 ст.", "3 ст.", "_"
                   ),
                  ("<< ЛОР >>", "ГА", "ГНМ", "1ст", "2ст", "3ст", "_",
                   "хр. тонзиллит", "искривление носовой перегородки", "_"
                   ),
                  ("<< ПРОЧЕЕ >>", "рецидивирующие заболевания ВДП", "кариес", "_",
                   "Атопический дерматит",  "_",
                   "младенческая форма", "детская форма", "подростковая форма", "_",
                   "ограниченный", "распространенный", "диффузный", "_",
                   "легкое течение", "течение средней тяжести", "тяжелое течение", "_",
                   "аллергический ринит", "поллиноз",  "_",
                   "БРА",  "_", "угроза", "Ig-индуцированная", "аллерген-индуцированная", "_",
                   "интермиттирующее", "персистирующее", "среднетяжелое", "тяжелое", "течение", "ремиссия", "_",
                   "хр. гастрит", "ГЭРБ", "дисграфия", "СДН", "ВСД", "нефроптоз", "справа", "слева", "_",
                   "анемия", "легкой", "средней", "тяжелой", "степени тяжести", "_",
                   "субклинический гипотиреоз", "диффузный токсический зоб", "ИМТ", "ДМТ", "СД", "_"
                   )),

    'place': ('Средняя школа (гимназия)',
              'Детское Дошкольное Учреждение',
              'Колледж (техникум)',
              'На кружки и секции',
              'В стационар',
              'По месту требования'),

    'type': ('По выздоровлении',
             'Годовой медосмотр',
             'На кружки и секции',
             'ЦКРОиР',
             'Оформление в ДДУ / СШ / ВУЗ',
             'Об отсутствии контактов',
             'В детский лагерь',
             'О нуждаемости в сан-кур лечении',
             "Может работать по специальности...",
             'Об усыновлении (удочерении)',
             "Бесплатное питание",
             "Об обслуживании в поликлинике"),

    "all_info": {

        "По выздоровлении": {
            "additional_medical_information": "| Осмотрен на чесотку, педикулез, микроспорию |",
            "recommendation": "",
            "validity_period": "5 дней"},

        "Годовой медосмотр": {
            "additional_medical_information": "Рост _____ см; Вес _____ кг; Vis OD/OS = __________; АД ________\n"
                                              "| Осмотрен на чесотку, педикулез, микроспорию |",
            "diagnosis": "Группа здоровья: _ ; Группа по физкультуре: _ ;",
            "recommendation": "Режим _; Стол _; Закаливание по возрасту;",
            "date_of_issue": "now"},

        "На кружки и секции": {
            "place_of_requirement": "Для занятия ",
            "diagnosis": "Не имеется медицинских противопоказаний, "
                         "включенных в перечень медицинских противопоказаний для занятия ",
            "date_of_issue": "now",
            "validity_period": "1 год"},

        "Бесплатное питание": {
            "place_of_requirement": "Управление социальной защиты Первомайского района",
            "additional_medical_information": "Ребенок находится на искусственном вскармливании. "
                                              "Получает питание по возрасту",
            "diagnosis": "Соматически здоров",
            "recommendation": "Рекомендован рацион питания ребенку в соответствии с возрастом и примерным месячным "
                              "набором продуктов питания согласно приложения №1 к постановлению Министерства труда "
                              "и социальной защиты РБ и МЗРБ от 13.03.2012 № 37/20",
            "date_of_issue": "now",
            "validity_period": "6 месяцев"},

        "ЦКРОиР": {
            "additional_medical_information": "Ребенок от _____ беременности, _____ родов. \n"
                                              "Течение беременности: без особенностей\n"
                                              "При рождении: вес ________ гр, рост _______ см, Апгар _______ \n"
                                              "К году: зубов ______ , рост ______ см, вес _______ гр\n"
                                              "Держать голову в ______ мес, ползать ______ мес, сидеть ______ мес,\n"
                                              " стоять ____ мес,  ходить _____ мес, говорить _____ мес, "
                                              "первый зуб _____ мес",
            "diagnosis": f"{'_' * 55}",
            "date_of_issue": "now",
            "validity_period": "1 год"},

        "Оформление в ДДУ / СШ / ВУЗ": {
            "additional_medical_information": "Рост _____ см; Вес _____ кг; Vis OD/OS = __________; АД ________\n"
                                              "| Осмотрен на чесотку, педикулез, микроспорию |\n"
                                              "Данные о профилактических прививках прилагаются",
            "diagnosis": f"Группа здоровья: _ ; Группа по физкультуре: _ ;",
            "recommendation": "Режим _; Стол _; Закаливание по возрасту;",
            "date_of_issue": "now",
            "validity_period": "1 год"},

        "Об отсутствии контактов": {
            "additional_medical_information": "В контакте с инфекционными больными в течение 35 дней не был\n"
                                              "| Осмотрен на чесотку, педикулез, микроспорию |",
            "diagnosis": "На момент осмотра соматически здоров",
            "recommendation": "Может находиться в детском коллективе",
            "date_of_issue": "now",
            "validity_period": "5 дней"},

        "О нуждаемости в сан-кур лечении": {
            "place_of_requirement": "О нуждаемости в санаторно-курортном лечении",
            "date_of_issue": "now",
            "validity_period": "1 год"},

        "В детский лагерь": {
            "place_of_requirement": "В лагерь",
            "additional_medical_information": "Рост _____ см; Вес _____ кг; АД ________\n"
                                              "| Осмотрен на чесотку, педикулез, микроспорию |\n"
                                              "В контакте с инфекционными больными в течение 35 дней не был\n"
                                              "Данные о профилактических прививках прилагаются",
            "diagnosis": f"Группа здоровья: _ ; Группа по физкультуре: _ ;\n"
                         "На момент осмотра соматически здоров",
            "recommendation": "Режим _; Стол _; Закаливание по возрасту;",
            "date_of_issue": "now",
            "validity_period": "5 дней"},

        "Может работать по специальности...": {
            "place_of_requirement": "Проведение обязательного предварительного / внеочередного медицинского осмотра",
            "diagnosis": "Годен к работе по специальности: ",
            "date_of_issue": "now",
            "validity_period": "До следующего обязательного периодического медицинского осмотра"},

        "Об обслуживании в поликлинике": {
            "place_of_requirement": "По месту требования",
            "diagnosis": "Ребенок обслуживается в УЗ '19-я городская детская поликлиника' с ___________",
            "date_of_issue": "now",
            "validity_period": "1 год"},

        "Об усыновлении (удочерении)": {
            "place_of_requirement": "По месту требования",
            "past_illnesses": "При рождении: Рост ______ см; Вес ______ кг; Апгар ________ ; \n"
                              "Семейно-генеалогический анамнез: (отягощен / не отягощен / нет данных)\n",
            "additional_medical_information": "Рост _____ см; Вес _____ кг;\n"
                                              "Осмотры специалистов:\n"
                                              f"Педиатр: дата {'_' * 10} д/з: _________________________________\n"
                                              f"хирург: дата {'_' * 10} д/з: __________________________________\n"
                                              f"офтальмолог: дата {'_' * 10} д/з: _____________________________\n"
                                              f"оториноларинголог: дата {'_' * 10} д/з: _______________________\n"
                                              f"стоматолог: дата {'_' * 10} д/з: ______________________________\n"
                                              f"невролог: дата {'_' * 10} д/з: ________________________________\n"
                                              f"психиатр-нарколог: дата {'_' * 10} д/з: _______________________\n"
                                              f"логопед: дата {'_' * 10} д/з: _________________________________\n"
                                              f"Лабораторные анализы:\n"
                                              f"общий анализ крови: дата {'_' * 10} закл-е: __________________\n"
                                              f"общий анализ мочи: дата {'_' * 10} закл-е: ____________________\n"
                                              f"анализ крови на ВИЧ: дата {'_' * 10} закл-е: __________________\n"
                                              f"Hbs-Ag: дата {'_' * 10} закл-е: _______________________________\n"
                                              f"RW: дата {'_' * 10} закл-е: ___________________________________\n"
                                              "Данные о профилактических прививках прилагаются",
            "diagnosis": f"Физическое развитие (выше- ниже-) среднее, (дис-) гармоничное\n"
                         f"НПР - соответствует возрасту",
            "date_of_issue": "now",
            "validity_period": "1 год"
        }
    }}

all_blanks_anal = {
    'blood': ['Общие анализы крови',
              'ОАК',
              'ОАК + ФОРМУЛА',
              'ОАК + СВЕРТЫВАЕМОСТЬ',
              'ОАК + РЕТИКУЛОЦИТЫ',
              "АЛЛЕРГОПАНЕЛЬ",
              "ИММУНОГРАММА",
              'ГЛЮКОЗА',
              'ГЛЮКОЗА ПОД НАГРУЗКОЙ'],
    'blood-inf': ['Анализы крови на инфекции',
                  'КРОВЬ на инфекции',
                  'ВИЧ',
                  'ГЕПАТИТ',
                  'СИФИЛИС',
                  'ВИЧ экспресс',
                  'ГЕПАТИТ контакты'
                  ],
    'urine': ['Анализы мочи',
              'ОАМ',
              'НЕЧИПОРЕНКО',
              'ЗИМНИЦКИЙ'],
    'copro': ['Копрограммы:',
              'КОПРОГРАММА',
              'СКРЫТАЯ КРОВЬ',
              'ГЛИСТЫ',
              "ДИСБАКТЕРИОЗ",
              "КАЛЬПРОТЕКТИН"],
    'swab': ['Мазки',
             'ЭОЗИНОФИЛЫ',
             'МАЗОК НА ФЛОРУ',
             'МАЗОК НА КОВИД'
             ],
    'add': ['Сочетания анализов',
            'ОАК  +  ФОРМУЛА',
            'ОАК + ОАМ',
            'ОАК + ОАМ + ГЛЮКОЗА',
            'ОАК + ОАМ + КОПРОГРАММА',
            'ОАК + ОАМ + ЭОЗИНОФИЛЫ',
            'ОАК + ОАМ + ГЛИСТЫ',
            'ОАК + ОАМ + ГЛИСТЫ + ГЛЮКОЗА'
            ]

}

blanks = (('Диспансеризация',
          "Информирование_законного_представителя"),
          ("Тест_аутизма_у_детей",
          "Анкета_по_слуху",
          "Анкета_ПАВ", "Суицид"))

all_blanks_direction = {
    'hospital': (' - - - РНПЦ: - - - ',
                 'РНПЦ ДХ',
                 'РНПЦ НиН',
                 'РНПЦ Мать и дитя',
                 'РНПЦ ТиО',
                 'РНПЦ ЛОР',
                 ' - - - Стационары: - - - ',
                 '1-я ГКБ',
                 '2-я ГДКБ',
                 '3-я ГДКБ',
                 '3-я ГКБ',
                 '4-я ГДКБ',
                 '6-я ГКБ',
                 'ДИКБ',
                 'МГЦМР',
                 'ГККВД',
                 ' - - - Поликлиники: - - - ',
                 '19-я ГДП',
                 '1-я ГДП',
                 '7-я ГДП',
                 '8-я ГП',
                 '11-я ГДП',
                 '17-я ГДП'
                 ),

    'doctor': ('Аллерголога',
               'Гастроэнтеролога',
               'Гематолога',
               'Генетика',
               'Гемангиолога',
               'Гинеколога',
               "Дерматолога",
               'Кардиохирурга',
               'Кардиолога',
               'Невролога',
               'Нейрохирурга',
               'Нефролога',
               'Ортопеда',
               'Оториноларинголога',
               'Офтальмолога',
               'Педиатра',
               'Реабилитолога',
               "Стоматолога",
               'Травматолога',
               'Уролога',
               'Хирурга',
               "Челюстно-лицевого хирурга"
               "Эндокринолога"
               )

}

address_hospital = {'РНПЦ ДХ': 'пр. Независимости 64',
                    'РНПЦ НиН': 'ул. Франциска Скорины 24',
                    'РНПЦ Мать и дитя': 'ул. Орловская, 66',
                    'РНПЦ ТиО': 'ул. Кижеватова 60/4',
                    'РНПЦ ЛОР': 'ул. Сухая 8',
                    '1-я ГКБ': 'пр. Независимости 64',
                    '2-я ГДКБ': 'ул. Нарочанская 17',
                    '3-я ГДКБ': 'улица Кижеватова 60/1',
                    '4-я ГДКБ': 'улица Шишкина 24',
                    '6-я ГКБ': 'Уральская улица 5',
                    'ДИКБ': 'улица Якубовского 53',
                    '19-я ГДП': 'пр. Независимости 119',
                    '1-я ГДП': 'ул. Золотая горка 17',
                    '7-я ГДП': 'ул. Плеханова, 127',
                    '8-я ГП': 'ул. Никифорова 3',
                    '11-я ГДП': 'ул. Никифорова 5',
                    'МГЦМР': 'ул. Володарского 1',
                    "17-я ГДП": "ул. Кольцова, 53/1",
                    "ГККВД": "ул. Смолячкова, 1"}

all_diagnosis = {
    'ОРИ': {
        "epicrisis_add_text": "Осмотрен на чесотку, педикулез, микроспорию\n"
                              "Согласие на простое медицинское вмешательство получено",
        "complaints": {'температура': ['38.5'],
                       'кашель': ['сухой'],
                       'боль': ['в горле'],
                       'насморк': ['сопли прозрачные']},
        "complaints_text" : "температура 38.5, кашель: сухой, боль в горле, насморк: сопли прозрачные.",
        "examination": {'Общее состояние': ['удовлетворительное'],
                        'Кожные покровы': ['влажные', 'чистые', 'тургор сохранен'],
                        'Сыпь': ['отсутствует'],
                        'Слизистая глотки': ['гиперемирована', 'зернистая'],
                        'Нёбные миндалины': ['увеличены', '1ст.', "налетов нет"],
                        'Носовое дыхание': ['затруднено', 'из носа -', 'слизистое отделяемое'],
                        'Периферические лимфоузлы': ['увеличены', 'шейные', 'подчелюстные', "эластичные",
                                                     "безболезненные", "при пальпации"],
                        'Легкие': ["дыхание -", 'везикулярное', "проводится во все отделы", "хрипов нет"],
                        'Сердце': ['тоны сердца -', 'ясные', 'ритмичные', "границы в пределах возрастной нормы"],
                        'Живот': ['мягкий', 'безболезненный', "доступен глубокой пальпации",
                                  "Печень у края реберной дуги", "селезенка не пальпируется"],
                        'Мочеиспускание': ['регулярное', 'безболезненное'],
                        'Стул': ['оформленный', 'коричневый', 'без патологических примесей'],
                        'Дополнительно': ['Менингеальные симптомы', "отрицательные"]},
        "examination_text": "Общее состояние: удовлетворительное. "
                            "Кожные покровы: влажные, чистые, тургор сохранен. Сыпь: отсутствует. "
                            "Слизистая глотки: гиперемирована, зернистая. "
                            "Нёбные миндалины: увеличены, 1ст., налетов нет. "
                            "Носовое дыхание: затруднено, из носа - слизистое отделяемое. "
                            "Периферические лимфоузлы: увеличены, подчелюстные, шейные, эластичные, безболезненные, "
                            "при пальпации. "
                            "Легкие: дыхание - везикулярное, проводится во все отделы, хрипов нет. "
                            "Сердце: тоны сердца ясные, ритмичные, границы в пределах возрастной нормы. "
                            "Живот: мягкий, безболезненный, доступен глубокой пальпации, "
                            "Печень у края реберной дуги, селезенка не пальпируется. "
                            "Мочеиспускание: регулярное, безболезненное. "
                            "Стул: оформленный, коричневый, без патологических примесей. "
                            "Дополнительно: Менингеальные симптомы отрицательные.",

        "prescription": {"Рекомендации": ["домашний режим", "питьевой режим",
                                          "орошать горло", "промывать нос"]},
        "drugs": ["ОРИ__Парацетамол__Форма__автоматически", "ОРИ__Ибупрофен__Форма__автоматически"],
        "prescription_text": "Рекомендации: домашний режим, питьевой режим, "
                             "полоскать горло, орошать горло, промывать нос. "
                             "\nПарацетамол (10-15 мг/кг на прием) или Ибупрофен (5-10 мг/кг на прием) "
                             "при температуре выше 38.5 не более 4 р/сут"
    },
    'ФРК': {
        "epicrisis_add_text": "Осмотрен на чесотку, педикулез, микроспорию\n"
                              "Согласие на простое медицинское вмешательство получено",

        "complaints": {'боль': ['в животе']},
        "complaints_text": "боль в животе.",
        "examination": {'Общее состояние': ['удовлетворительное'],
                        'Кожные покровы': ['влажные', 'чистые', 'тургор сохранен'],
                        'Сыпь': ['отсутствует'],
                        'Слизистая глотки': ['гиперемирована'],
                        'Нёбные миндалины': ['увеличены', '1ст.'],
                        'Носовое дыхание': ['свободное'],
                        'Периферические лимфоузлы': ['в норме'],
                        'Легкие': ["дыхание -", 'везикулярное', "проводится во все отделы", "хрипов нет"],
                        'Сердце': ['тоны сердца -', 'ясные', 'ритмичные', "границы в пределах возрастной нормы"],
                        'Живот': ['мягкий', 'болезненный -', "в эпигастральной обл", "доступен глубокой пальпации",
                                  "Печень у края реберной дуги", "селезенка не пальпируется"],
                        'Мочеиспускание': ['регулярное', 'безболезненное'],
                        'Дополнительно': ['Аппендикулярные симптомы', "Перитониальные симптомы", "Пузырные симптомы",
                                          "отрицательные"]},
        "examination_text": "Общее состояние: удовлетворительное. Кожные покровы: влажные, чистые, тургор сохранен. "
                            "Сыпь: отсутствует. Слизистая глотки: гиперемирована. Нёбные миндалины: увеличены, 1ст. "
                            "Носовое дыхание: свободное. Легкие: "
                            "дыхание - везикулярное, проводится во все отделы, хрипов нет. "
                            "Сердце: тоны сердца ясные, ритмичные, границы в пределах возрастной нормы. "
                            "Живот: мягкий, доступен глубокой пальпации, болезненный - в эпигастральной обл, "
                            "Печень у края реберной дуги, селезенка не пальпируется. "
                            "Мочеиспускание: регулярное, безболезненное. "
                            "Дополнительно: Аппендикулярные симптомы, Перитониальные симптомы, "
                            "Пузырные симптомы отрицательные.",
        "prescription": {"Рекомендации": ["домашний режим", "питьевой режим",
                                          "диета", "Смекта", "Пробиотик"]},
        "drugs": ["ОРИ__Парацетамол__Форма__автоматически", "ОРИ__Ибупрофен__Форма__автоматически"],
        "prescription_text": "Рекомендации: домашний режим, "
                             "питьевой режим, диета, Смекта, Пробиотик. "
                             "\nПарацетамол (10-15 мг/кг на прием) или Ибупрофен (5-10 мг/кг на прием) "
                             "при температуре выше 38.5 не более 4 р/сут"

    },
    'Ветряная оспа': {
        "epicrisis_add_text": "Осмотрен на чесотку, педикулез, микроспорию\n"
                              "Согласие на простое медицинское вмешательство получено",

        "complaints": {'температура': ['37.5'],
                       'сыпь': True},
        "complaints_text": "сыпь, температура 37.5.",
        "examination": {'Общее состояние': ['удовлетворительное'],
                        'Кожные покровы': ['влажные', 'тургор сохранен'],
                        'Сыпь': ['везикулярная'],
                        'Слизистая глотки': ['гиперемирована', 'зернистая'],
                        'Нёбные миндалины': ['увеличены', '1ст.'],
                        'Носовое дыхание': ['свободное'],
                        'Периферические лимфоузлы': ['увеличены', 'шейные', 'подчелюстные', "эластичные",
                                                     "безболезненные", "при пальпации"],
                        'Легкие': ["дыхание -", 'везикулярное', "проводится во все отделы", "хрипов нет"],
                        'Сердце': ['тоны сердца -', 'ясные', 'ритмичные', "границы в пределах возрастной нормы"],
                        'Живот': ['мягкий', 'безболезненный', "доступен глубокой пальпации",
                                  "Печень у края реберной дуги", "селезенка не пальпируется"],
                        'Мочеиспускание': ['регулярное', 'безболезненное'],
                        'Стул': ['оформленный', 'коричневый', 'без патологических примесей'],
                        'Дополнительно': ['Менингеальные симптомы', "отрицательные"]},
        "examination_text": "Общее состояние: удовлетворительное. "
                            "Кожные покровы: влажные, чистые, тургор сохранен. Сыпь: везикулярная. "
                            "Слизистая глотки: гиперемирована, зернистая. Нёбные миндалины: увеличены, 1ст.. "
                            "Носовое дыхание: свободное. Периферические лимфоузлы: увеличены, подчелюстные, шейные, "
                            "эластичные, безболезненные, при пальпации. "
                            "Легкие: дыхание - везикулярное, проводится во все отделы, хрипов нет. "
                            "Сердце: тоны сердца ясные, ритмичные, границы в пределах возрастной нормы. "
                            "Живот: мягкий, безболезненный, доступен глубокой пальпации, "
                            "Печень у края реберной дуги, селезенка не пальпируется. "
                            "Мочеиспускание: регулярное, безболезненное. "
                            "Стул: оформленный, коричневый, без патологических примесей. "
                            "Дополнительно: Менингеальные симптомы отрицательные.",
        "prescription": {"Рекомендации": ["домашний режим", "питьевой режим",
                                          "обработка элементов раствором 'Каламин'",
                                          "карантин 5 дней с момента появления последнего элемента"]},
        "drugs": ["ОРИ__Парацетамол__Форма__автоматически"],
        "prescription_text": "Рекомендации: обработка элементов раствором 'Каламин', "
                             "карантин 5 дней с момента появления последнего элемента, "
                             "домашний режим, питьевой режим. "
                             "\nПарацетамол (10-15 мг/кг на прием) при температуре выше 38.5 не более 4 р/сут"
                             "\nПервый элемент появился: "
                             "\nМесто учебы: "
                             "\nПоследнее посещение детского коллектива: ",
        "diagnosis_text": "Диагноз: B01.9 - Ветряная оспа без осложнений"
    },
    'Здоров': {
        "epicrisis_add_text": "Осмотрен на чесотку, педикулез, микроспорию\n"
                              "Согласие на простое медицинское вмешательство получено",

        "complaints": {'нет': True},
        "complaints_text": "нет",
        "examination": {'Общее состояние': ['удовлетворительное'],
                        'Кожные покровы': ['влажные', 'чистые', 'тургор сохранен'],
                        'Сыпь': ['отсутствует'],
                        'Слизистая глотки': ['зев спокоен'],
                        'Нёбные миндалины': ['увеличены', '1ст.'],
                        'Носовое дыхание': ['свободное'],
                        'Периферические лимфоузлы': ['не увеличены', 'эластичные', "безболезненные", "при пальпации"],
                        'Легкие': ["дыхание -", 'везикулярное', "проводится во все отделы", "хрипов нет"],
                        'Сердце': ['тоны сердца -', 'ясные', 'ритмичные', "границы в пределах возрастной нормы"],
                        'Живот': ['мягкий', 'безболезненный', "доступен глубокой пальпации",
                                  "Печень у края реберной дуги", "селезенка не пальпируется"],
                        'Мочеиспускание': ['регулярное', 'безболезненное'],
                        'Стул': ['оформленный', 'коричневый', 'без патологических примесей']},
        "examination_text": "Общее состояние: удовлетворительное. \n"
                            "Кожные покровы: влажные, чистые, тургор сохранен. Сыпь: отсутствует. \n"
                            "Слизистая глотки: без изменений. Нёбные миндалины: увеличены, 1ст.. \n"
                            "Носовое дыхание: свободное. \n"
                            "Периферические лимфоузлы: не увеличены, эластичные, безболезненные, при пальпации. \n"
                            "Легкие: дыхание - везикулярное, проводится во все отделы, хрипов нет. \n"
                            "Сердце: тоны сердца ясные, ритмичные, границы в пределах возрастной нормы. \n"
                            "Живот: мягкий, безболезненный, доступен глубокой пальпации, \n"
                            "Печень у края реберной дуги, селезенка не пальпируется. \n"
                            "Мочеиспускание: регулярное, безболезненное. \n"
                            "Стул: оформленный, коричневый, без патологических примесей.",
        "prescription": {"Рекомендации": []},
        "prescription_text": ""
    },
    'На приеме здоров': {
        "epicrisis_add_text": "Осмотрен на чесотку, педикулез, микроспорию\n"
                              "Согласие на простое медицинское вмешательство получено",

        "complaints": {'нет': True},
        "complaints_text": "нет",
        "examination": {'Вскармливание': ['по требованию'],
                        'Общее состояние': ['удовлетворительное'],
                        'Крик': ['громкий'],
                        'Движения': ['активные'],
                        'Мышечный тонус': ['удовлетворительный'],
                        'Аппетит': ['сохранен'],
                        'Кожные покровы': ['влажные', 'чистые', 'бледно-розовые', 'тургор сохранен'],
                        'ПЖК': ['умеренно выражена'],
                        'Сыпь': ['отсутствует'],
                        'Глаза': ['без изменений', "гноя нет"],
                        'Слизистая глотки': ['зев спокоен'],
                        'Нёбные миндалины': ['без изменений', 'налетов нет'],
                        'Носовое дыхание': ['свободное'],
                        'Периферические лимфоузлы': ['не увеличены', 'эластичные', "не спаяны с окружающей тканью"],
                        'Легкие': ["дыхание -", 'пуэрильное', "проводится во все отделы", "хрипов нет"],
                        'Сердце': ['тоны сердца -', 'ясные', 'ритмичные', "границы в пределах возрастной нормы"],
                        'Живот': ['мягкий', "доступен глубокой пальпации",
                                  "Печень у края реберной дуги", "селезенка не пальпируется"],
                        'Мочеиспускание': ['регулярное'],
                        'Стул': ['кашицеобразный', 'желтый', 'без патологических примесей', 'регулярный']},
        "examination_text": "Вскармливание: по требованию, \n"
                            "Общее состояние: удовлетворительное, \n"
                            "Крик: громкий, Мышечный тонус: удовлетворительный, \n"
                            "Сон: спокойный, Аппетит: сохранен, \n"
                            "Кожные покровы: влажные, чистые, бледно-розовые, тургор сохранен, \n"
                            "Сыпь: отсутствует, \n"
                            "ПЖК: умеренно выражена, \n"
                            "Слизистая глотки: зев спокоен, \n"
                            "Нёбные миндалины: без изменений, налетов нет, \n"
                            "Носовое дыхание: свободное, \n"
                            "Периферические лимфоузлы: не увеличены, эластичные, не спаяны с окружающей тканью, \n"
                            "Легкие: дыхание - пуэрильное, проводится во все отделы, хрипов нет, \n"
                            "Сердце: тоны сердца - ясные, ритмичные, границы в пределах возрастной нормы, \n"
                            "Живот: мягкий, доступен глубокой пальпации, Печень у края реберной дуги, селезенка не пальпируется, \n"
                            "Мочеиспускание: регулярное, \n"
                            "Стул: кашицеобразный, желтый, без патологических примесей, регулярный,",
        "prescription": {"Рекомендации": []},
        "drugs": ["Льготные__Холекальциферол__Кратность__1 р/сут"],
        "prescription_text": "Воспитательные действия, массаж, гимнастика по возрасту. \n"
                             "С целью профилактики рахита: \n"
                             "Холекальциферол: масляный раствор для приема внутрь 0.5мг/мл 10мл -- по 1 капле -- 1 р/сут -- имеется дома",
        "diagnosis_text": "Заключение: соматически здоров на момент осмотра \nГруппа здоровья 2"

    },

    'Патронаж': {
        "selected_place": "на дому",
        "epicrisis_add_text": "Врачебный патронаж\n"
                              "Согласие на простое медицинское вмешательство получено\n"
                              "Проведена беседа: Безопасность ____",

        "complaints": {'нет': True},
        "complaints_text": "нет",
        "examination": {'Вскармливание': ['по требованию'],
                        'Общее состояние': ['удовлетворительное'],
                        'Сон': ['спокойный'],
                        'Крик': ['громкий'],
                        'Движения': ['активные', 'Тремор', 'нет'],
                        'Мышечный тонус': ['нормальный'],
                        'Аппетит': ['удовлетворительный', 'Срыгивает', 'нет'],
                        'Большой родничок': ['открыт', 'не напряжен'],
                        'Кожные покровы': ['влажные', 'чистые', 'бледно-розовые', 'тургор сохранен'],
                        'ПЖК': ['умеренно выражена'],
                        'Сыпь': ['отсутствует'],
                        'Слизистая глотки': ['зев спокоен'],
                        'Нёбные миндалины': ['без изменений', 'налетов нет'],
                        'Носовое дыхание': ['свободное'],
                        'Периферические лимфоузлы': ['не увеличены', 'эластичные', "не спаяны с окружающей тканью"],
                        'Легкие': ["дыхание -", 'пуэрильное', "проводится во все отделы", "хрипов нет"],
                        'Сердце': ['тоны сердца -', 'ясные', 'ритмичные', "границы в пределах возрастной нормы"],
                        'Живот': ['мягкий', "доступен глубокой пальпации",
                                  "Печень у края реберной дуги", "селезенка не пальпируется",
                                  "Пупочная ранка -", "чистая", "сухая", "под корочкой"],
                        'Мочеиспускание': ['регулярное'],
                        'Стул': ['кашицеобразный', 'желтый', 'без патологических примесей', 'регулярный']},
        "examination_text": "Вскармливание: по требованию, \n"
                            "Общее состояние: удовлетворительное, \n"
                            "Сон: спокойный, Крик: громкий \n"
                            "Движения: активные, Тремора нет, Мышечный тонус: нормальный \n"
                            "Аппетит: удовлетворительный, Не срыгивает\n"
                            "Кожные покровы: влажные, чистые, бледно-розовые, тургор сохранен, \n"
                            "Глаза: чистые, гноя нет, \n"
                            "Сыпь: отсутствует, \n"
                            "ПЖК: умеренно выражена, \n"
                            "Большой родничок: открыт, не напряжен, \n"
                            "Слизистая глотки: зев спокоен, \n"
                            "Нёбные миндалины: без изменений, налетов нет, \n"
                            "Носовое дыхание: свободное, \n"
                            "Периферические лимфоузлы: не увеличены, эластичные, не спаяны с окружающей тканью, \n"
                            "Легкие: дыхание - пуэрильное, проводится во все отделы, хрипов нет, \n"
                            "Сердце: тоны сердца - ясные, ритмичные, границы в пределах возрастной нормы, \n"
                            "Живот: мягкий, доступен глубокой пальпации, "
                            "Печень у края реберной дуги, селезенка не пальпируется, "
                            "Пупочная ранка - чистая, сухая, под корочкой\n"
                            "Мочеиспускание: регулярное, \n"
                            "Стул: кашицеобразный, желтый, без патологических примесей, регулярный, \n"
                            "Физиологические рефлексы: активные",
        "prescription": {"Рекомендации": []},
        "prescription_text": "Воспитательные действия, массаж, гимнастика по возрасту. \n"
                             "Режим свободного вскармливания, широкое пеленание, "
                             "обработка пупочной ранки 3% р-ром перекиси водорода, "
                             "5% р-ром KMnO4, 1% спиртовым р-ром бриллиантового зеленого, "
                             "ежедневный туалет кожи и слизистых, "
                             "купание в кипяченой воде 37*С, слабо-розовым р-ре KMnO4, прогулки на свежем воздухе.",
        "diagnosis_text": "Заключение: соматически здоров на момент осмотра"

    },

    'Врачебно-сестринский патронаж': {
        "selected_place": "на дому",
        "epicrisis_add_text": "Врачебно-сестринский патронаж\n"
                              "Согласие на простое медицинское вмешательство получено\n"
                              "Проведена беседа: Безопасность ____, Вручена памятка по уходу за ребенком\n"
                              f"Выписка из роддома № __________ , дата ___________ .{datetime.now().strftime('%Y')} г. "
                              f"Выписан домой на ______ сутки. \n"
                              "Родился доношенным / недоношенным в сроке _________________ . Апгар __________ баллов \n"
                              "При рождении: Вес _____ гр. Длинна тела _____ см. "
                              "Окружность головы _____ см.  ОГК _____ см. "
                              "Вес при выписке _____ гр. Первоначальная потеря веса _____ гр. \n"
                              "Беременность № _____ Одноплодная. "
                              "Течение беременности: без особенностей. "
                              "Перенесенные болезни во время беременности (прием ЛС): _________________ . \n"
                              "Течение родов: физиологическое, быстрое, затяжное; положение плода; "
                              "наличие патологии плаценты, пуповины; тип родоразрешеня _______________________ . \n"
                              "Продолжительность родов: ____ ч. _____ мин. Безводный период: ____ ч. _____ мин.  "
                              "1-й период: ____ ч. _____ мин. 2-й период: ____ ч. _____ мин. \n"
                              "Стимуляция родов (да, нет). Оперативные вмешательства _____________________________ . "
                              "Ребенок закричал сразу.\n "
                              "Желтушность кожных покровов: нет, да (время появления, выраженность, продолжительность) ______ . \n"
                              "Ребенок приложен к груди в течение 30 минут (на _________ сутки). "
                              "Пуповина отпала на ______ сутки (не отпала). \n"
                              "Пороки развития в роддоме не выявлены. "
                              "Прививки в роддоме: БЦЖ, ВГВ",

        "complaints": {'нет': True},
        "complaints_text": "нет",
        "examination": {'Вскармливание': ['по требованию'],
                        'Общее состояние': ['удовлетворительное'],
                        'Сон': ['спокойный'],
                        'Крик': ['громкий'],
                        'Движения': ['активные', 'Тремор', 'нет'],
                        'Мышечный тонус': ['нормальный'],
                        'Аппетит': ['удовлетворительный', 'Срыгивает', 'нет'],
                        'Большой родничок': ['открыт', 'не напряжен'],
                        'Кожные покровы': ['влажные', 'чистые', 'бледно-розовые', 'тургор сохранен'],
                        'ПЖК': ['умеренно выражена'],
                        'Сыпь': ['отсутствует'],
                        'Слизистая глотки': ['зев спокоен'],
                        'Нёбные миндалины': ['без изменений', 'налетов нет'],
                        'Носовое дыхание': ['свободное'],
                        'Периферические лимфоузлы': ['не увеличены', 'эластичные', "не спаяны с окружающей тканью"],
                        'Легкие': ["дыхание -", 'пуэрильное', "проводится во все отделы", "хрипов нет"],
                        'Сердце': ['тоны сердца -', 'ясные', 'ритмичные', "границы в пределах возрастной нормы"],
                        'Живот': ['мягкий', "доступен глубокой пальпации",
                                  "Печень у края реберной дуги", "селезенка не пальпируется",
                                  "Пупочная ранка -", "чистая", "сухая", "под корочкой"],
                        'Мочеиспускание': ['регулярное'],
                        'Стул': ['кашицеобразный', 'желтый', 'без патологических примесей', 'регулярный']},
        "examination_text": "Вскармливание: по требованию, \n"
                            "Общее состояние: удовлетворительное, \n"
                            "Сон: спокойный, Крик: громкий \n"
                            "Движения: активные, Тремора нет, Мышечный тонус: нормальный \n"
                            "Аппетит: удовлетворительный, Не срыгивает\n"
                            "Кожные покровы: влажные, чистые, бледно-розовые, тургор сохранен, \n"
                            "Глаза: чистые, гноя нет, \n"
                            "Сыпь: отсутствует, \n"
                            "ПЖК: умеренно выражена, \n"
                            "Большой родничок: открыт, не напряжен, \n"
                            "Слизистая глотки: зев спокоен, \n"
                            "Нёбные миндалины: без изменений, налетов нет, \n"
                            "Носовое дыхание: свободное, \n"
                            "Периферические лимфоузлы: не увеличены, эластичные, не спаяны с окружающей тканью, \n"
                            "Легкие: дыхание - пуэрильное, проводится во все отделы, хрипов нет, \n"
                            "Сердце: тоны сердца - ясные, ритмичные, границы в пределах возрастной нормы, \n"
                            "Живот: мягкий, доступен глубокой пальпации, "
                            "Печень у края реберной дуги, селезенка не пальпируется, "
                            "Пупочная ранка - чистая, сухая, под корочкой\n"
                            "Мочеиспускание: регулярное, \n"
                            "Стул: кашицеобразный, желтый, без патологических примесей, регулярный, \n"
                            "Физиологические рефлексы: активные",
        "prescription": {"Рекомендации": []},
        "prescription_text": "Воспитательные действия, массаж, гимнастика по возрасту. \n"
                             "Режим свободного вскармливания, широкое пеленание, "
                             "обработка пупочной ранки 3% р-ром перекиси водорода, "
                             "5% р-ром KMnO4, 1% спиртовым р-ром бриллиантового зеленого, "
                             "ежедневный туалет кожи и слизистых, "
                             "купание в кипяченой воде 37*С, слабо-розовым р-ре KMnO4, прогулки на свежем воздухе.",
        "diagnosis_text": "Заключение: соматически здоров на момент осмотра"

    },

    'Годовой эпикриз': {
        "epicrisis_add_text": "Осмотрен на чесотку, педикулез, микроспорию\n"
                              "Согласие на простое медицинское вмешательство получено\n"
                              "Биологический анамнез - не отягощен, Генеологический анамнез - не отягощен, "
                              "Аллергический анамнез - не отягощен, Социальный анамнез - не отягощен\n"
                              "Ребенок от ___ беременности, ___ родов. \n"
                              "При рождении: Масса тела  _____, Рост _____, Группа здоровья 2, "
                              "Группа риска _________________________ \n"
                              "Диагноз: __________________________________________________\n"
                              "Заболевания, перенесенные до года: ________________________\n"
                              "Находился на грудном вскармливании до _____. Профилактика рахита: Холекальциферол 500МЕ/сут\n"
                              "Профилактические прививки: привит по возрасту\n"
                              "Сведения о проведенных профилактических осмотрах и обследованиях:\n"
                              "осмотра невролога - без патологии; осмотра ортопеда - без патологии;\n"
                              "общий анализ крови - без патологии; общий анализ мочи - без патологии.\n"
                              "Держит голову с ____ месяцев. Ползает с ____ месяцев. Сидит с ____ месяцев. "
                              "Стоит с ____ месяцев. Ходит с ____ месяцев. Первый зуб в ___ месяцев.",
        "complaints": {'нет': True},
        "complaints_text": "нет",
        "examination": {'Вскармливание': ['по требованию'],
                        'Общее состояние': ['удовлетворительное'],
                        'Сон': ['спокойный'],
                        'Аппетит': ['удовлетворительный'],
                        'Кожные покровы': ['влажные', 'чистые', 'бледно-розовые', 'тургор сохранен'],
                        'ПЖК': ['умеренно выражена'],
                        'Сыпь': ['отсутствует'],
                        'Слизистая глотки': ['зев спокоен'],
                        'Нёбные миндалины': ['без изменений', 'налетов нет'],
                        'Носовое дыхание': ['свободное'],
                        'Периферические лимфоузлы': ['не увеличены', 'эластичные', "не спаяны с окружающей тканью"],
                        'Легкие': ["дыхание -", 'пуэрильное', "проводится во все отделы", "хрипов нет"],
                        'Сердце': ['тоны сердца -', 'ясные', 'ритмичные', "границы в пределах возрастной нормы"],
                        'Живот': ['мягкий', "доступен глубокой пальпации",
                                  "Печень у края реберной дуги", "селезенка не пальпируется"],
                        'Мочеиспускание': ['регулярное'],
                        'Стул': ['оформленный', 'коричневый', 'без патологических примесей', 'регулярный']},
        "examination_text": "Вскармливание: по требованию, \n"
                            "Общее состояние: удовлетворительное, \n"
                            "Сон: спокойный, \n"
                            "Аппетит: удовлетворительный, \n"
                            "Кожные покровы: влажные, чистые, бледно-розовые, тургор сохранен, \n"
                            "Сыпь: отсутствует, \n"
                            "ПЖК: умеренно выражена, \n"
                            "Слизистая глотки: зев спокоен, \n"
                            "Нёбные миндалины: без изменений, налетов нет, \n"
                            "Носовое дыхание: свободное, \n"
                            "Периферические лимфоузлы: не увеличены, эластичные, не спаяны с окружающей тканью, \n"
                            "Легкие: дыхание - пуэрильное, проводится во все отделы, хрипов нет, \n"
                            "Сердце: тоны сердца - ясные, ритмичные, границы в пределах возрастной нормы, \n"
                            "Живот: мягкий, доступен глубокой пальпации, Печень у края реберной дуги, селезенка не пальпируется, \n"
                            "Мочеиспускание: регулярное, \n"
                            "Стул: оформленный, коричневый, без патологических примесей, регулярный.",
        "prescription": {"Рекомендации": []},
        "drugs": ["Льготные__Холекальциферол__Кратность__1 р/сут"],
        "prescription_text": "Воспитательные действия, массаж, гимнастика по возрасту. \n"
                             "С целью профилактики рахита: \n"
                             "Холекальциферол: масляный раствор для приема внутрь 0.5мг/мл 10мл -- по 1 капле -- 1 р/сут -- имеется дома",
        "diagnosis_text": "Заключение: соматически здоров на момент осмотра \nГруппа здоровья 2"

    }

}

all_data_diagnosis = {
    'diagnosis_ori': (('ринит', "синусит", 'фарингит', 'ринофaрингит', "тонзиллит", "ларингит"),
                      ("отит", "конъюнктивит"),
                      ("острый", "средний", "катаральный", "гнойный", "экссудативный", "буллезный", "аллергический"),
                      ("справа", "слева", "двусторонний"),
                      ("вирусная экзантема", "вирусная энантема"),
                      ("обструктивный", 'бронхит', 'пневмония', 'плеврит', 'трахеит', "ДН 0", "ДН 1", "ДН 2"),
                      ("кишечный с-м", "абдоминальный с-м"),
                      ("анемия", "нормохромная", "гипохромная", "гиперхромная",
                       "нормоцитарная", "микроцитарная", "макроцитарная"),
                      ("легкой", "средней", "средне-тяжелой", "тяжелой", "степени"),
                      ('реконвалесцент', "продолжает болеть", "улучшение", "соматически здоров", "на момент осмотра"),
                      ("ОРИ", "ФРК", "Ветряная оспа", "ИМВП")
                      ),
    'diagnosis_key_child': (
                    ("период адаптации", "соматически здоров", "на момент осмотра"),
                    ("СДН", "атопический дерматит", "детская форма", "кишечная колика", "пупочная грыжа"),
                    ('ринит', "синусит", 'фарингит', 'ринофaрингит', "тонзиллит", "ларингит"),
                    ("отит", "конъюнктивит", "катаральный", "гнойный", "экссудативный"),
                    ("справа", "слева", "двусторонний"),
                    ("вирусная экзантема", "вирусная энантема"),
                    ("обструктивный", 'бронхит', 'пневмония', 'плеврит', 'трахеит', "ДН 0", "ДН 1", "ДН 2"),
                    ("кишечный с-м", "абдоминальный с-м", "кишечные колики"),
                    ("анемия", "нормохромная", "гипохромная", "гиперхромная",
                    "нормоцитарная", "микроцитарная", "макроцитарная"),
                    ("легкой", "средней", "средне-тяжелой", "тяжелой", "степени"),
                    ('реконвалесцент', "продолжает болеть", "улучшение", "ремиссия"),
                    ("ОРИ", "ФРК", "Ветряная оспа", "ИМВП")),

    "diagnosis_child": ("Вид осмотра", 'Врачебно-сестринский патронаж', 'Патронаж', "На приеме здоров", "Годовой эпикриз"),
    "diagnosis": ("Предварительный диагноз", 'ОРИ', 'ФРК', "Ветряная оспа", "Здоров"),

    "place": ('на дому', 'в поликлинике'),
    'complaints': ("сыпь", "гнойное отделяемое из глаз", "зуд", "тошнота", "ломота",
                   "слабость", "беспокойство",
                   ("температура", '37', '37.5', '38', '38.5', '39', '39.5', '40', '40.5'),
                   ("кашель", "сухой", "влажный", "приступообразный", "лающий"),
                   ("боль в", "голове", "ушах", "горле", "глазах", "груди", "мышцах", "животе"),
                   ("насморк", "заложенность носа", "сопли зеленые", "сопли прозрачные"),
                   ("рвота", "однократная", "многократная", "едой", "жидкостью", "желчью", "приносящая облегчение"),
                   ("диарея", "стул", "зеленый", "коричневый", "обесцвеченный", "желтый", "с кровью", "с слизью", "пенистый")),

    "examination_child":
            (("Вскармливание", "грудное", "по требованию", '\n',
             "смесь", "+ докорм", "Беллакт", "НаН", "Нестожен", "Нутрилак", "Семпер", "Кабрита", "Фрисо", '\n',
             "премиум", "тройной комфорт", "гипоаллергенный", "безлактозный", "иммунис",
              '\n', "+ прикорм"),
            ("Общее состояние", "удовлетворительное", "средней тяжести", "тяжелое", '\n',
             "компенсированное", "декомпенсированное"),
            ("Сон", "спокойный", "беспокойный"),
             ("Крик", "громкий", "слабый", "писклявый"),
             ("Движения", "активные", "малоактивные", "вялые", "Тремор", "нет", "есть", "подбородка", "конечностей"),
             ("Мышечный тонус", "удовлетворительный", "снижен", "повышен", "меняющийся"),
             ("Аппетит", "сохранен", "повышен", "понижен", '\n',
             "Срыгивает", "нет", "редко", "часто"),
            ("Кожные покровы", "влажные", "сухие", "шелушащиеся", "чистые", "бледно-розовые", '\n',
             "тургор сохранен", "тургор снижен"),
            ('Большой родничок', "открыт", "закрыт", '\n', "не напряжен", "выбухает", "запавший"),
            ("Сыпь", "отсутствует", "пятнистая", "папулезная", "пустулезная", "везикулярная", "мелкоточечная",
             "геморрагическая", '\n',
             "на лице", "на шее", "на туловище", "на руках", "на кистях", "на стопах", "на ногах",
             "в паховой области", "в складках кожи", "по всему телу"),
            ("Глаза", "без изменений", "гноя нет", "конъюнктива гиперемирована", "глазная щель сужена",
             "гнойное отделяемое", "отек век"),
            ("ПЖК", "умеренно выражена", "слабовыражена", "чрезмерная"),
            ("Слизистая глотки", "зев спокоен", "гиперемирована", "зернистая", "энантема"),
            ("Нёбные миндалины", "без изменений", '\n', "увеличены", "1ст.", "2ст.", "3ст.", '\n',
             "налетов нет", "обложены налетом", "белого цвета", "серого цвета"),
            ("Носовое дыхание", "свободное", "затруднено", "из носа -",
             "слизистое отделяемое", "гнойное отделяемое"),
            ("Периферические лимфоузлы", "не увеличены", '\n',
             "увеличены", "подчелюстные", "шейные", "надключичные",
             "подмышечные", "паховые", '\n',
             "справа", "слева", "с обеих сторон", '\n',
             "плотные", "эластичные",
             "болезненные", "безболезненные", "при пальпации", "подвижные", "не спаяны с окружающей тканью"),
            ("Легкие", "дыхание -", "везикулярное", "пуэрильное", "жесткое", "ослабленное", '\n',
             "проводится во все отделы", "хрипов нет",
             "хрипы -", "сухие", "влажные", "проводные", "свистящие", '\n',
             "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "S10", "справа", "слева"),
            ("Сердце", "тоны сердца -", "ясные", "приглушены", "ритмичные", '\n',
             "границы в пределах возрастной нормы", "систолический шум"),
            ("Живот", "мягкий", "безболезненный", "вздут", "доступен глубокой пальпации", '\n',
             "напряжен", "защитный дефанс -", "болезненный -", '\n',
             "в эпигастральной обл", "в мезогастральной обл", "в гипогастральной обл", '\n',
             "справа", "слева", '\n',
             "Печень у края реберной дуги", "плотная", "эластичная", "селезенка не пальпируется", '\n',
             "Пуповина не отпала", "Пупочная ранка -", "чистая", "сухая", "под корочкой", '\n',
             "с серозным отделяемым", "с гнойным отделяемым", "с геморрагическим отделяемым"),
            ("Мочеиспускание", "регулярное", "безболезненное", "диурез снижен", "боль при мочеиспускании"),
            ("Стул", "оформленный", "послабленный", "разжиженный", "кашицеобразный", '\n',
             "коричневый", "зеленый", "обесцвеченный", "желтый", "черный", '\n',
             "без патологических примесей", "с кровью", "с слизью", '\n',
             "регулярный", "частый", "редкий", "после каждого кормления", "____ раз в ____ сут"),
            ("Отоскопия", "не проводилась", "без патологии",
             "гиперемия", "серозное содержимое", "гнойное содержимое", "выбухание",
             "серная пробка", "отит", "катаральный", "гнойный", "экссудативный", "наружный диффузный"),
             ("Рефлексы периода новорожденности",
              "Сосательный", "Рефлекс Бабкина (ладонно-ротовой)", "Рефлекс Куссамуля (поисковый)", "Хоботковый",
              "Моро (испуга)", "Рефлекс Робинзона (хватательный)", "Защитный", "Опоры и автоматической ходьбы",
              "Рефлекс Бауэра (ползанья)", "Рефлекс Галанта", '\n',
              "вызываются", "симметричные", "ослабленны"),
            ("Дополнительно", "Менингеальные симптомы", "Аппендикулярные симптомы",
             "Перитониальные симптомы", "Пузырные симптомы", '\n',
             "отрицательные", "положительные", "сомнительные")),

    "examination": (("Общее состояние", "удовлетворительное", "средней тяжести", "тяжелое", '\n',
                     "компенсированное", "декомпенсированное"),
                    ("Кожные покровы", "влажные", "сухие", "чистые", "бледно-розовые", '\n',
                     "тургор сохранен", "тургор снижен"),
                    ("Сыпь", "отсутствует", '\n',
                     "пятнистая", "папулезная", "пустулезная", "везикулярная", "мелкоточечная",
                     "геморрагическая", '\n',
                     "на лице", "на шее", "на туловище", "на руках", "на кистях", "на стопах", "на ногах",
                     "в паховой области", "в складках кожи", "по всему телу"),
                    ("Глаза", "без изменений", "конъюнктива гиперемирована", "глазная щель сужена",
                     "гнойное отделяемое", "отек век"),
                    ("Слизистая глотки", "зев спокоен", "неярко гиперемирована", "гиперемирована", "зернистая", "энантема"),
                    ("Нёбные миндалины", "без изменений", '\n',
                     "увеличены", "1ст.", "2ст.", "3ст.", '\n',
                     "налетов нет", "обложены налетом", "белого цвета", "серого цвета"),
                    ("Носовое дыхание", "свободное", '\n',
                     "затруднено", "из носа -",
                     "слизистое отделяемое", "гнойное отделяемое"),
                    ("Периферические лимфоузлы", "не увеличены", '\n',
                     "увеличены", "подчелюстные", "шейные", "надключичные",
                     "подмышечные", "паховые", "справа", "слева", "с обеих сторон", "плотные", "эластичные", '\n',
                     "болезненные", "безболезненные", "при пальпации", "подвижные", "не спаяны с окружающей тканью"),
                    ("Легкие", "дыхание -", "везикулярное", "пуэрильное", "жесткое", "ослабленное",
                     "проводится во все отделы", "хрипов нет", '\n',
                     "хрипы -", "сухие", "влажные", "проводные", "свистящие", '\n',
                    "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "S10", '\n',
                     "справа", "слева", "с обеих сторон"),
                    ("Сердце", "тоны сердца -", "ясные", "приглушены", "ритмичные", '\n',
                     "границы в пределах возрастной нормы", "систолический шум", "на верхушке"),
                    ("Живот", "мягкий", "безболезненный", "доступен глубокой пальпации", '\n',
                     "напряжен", "защитный дефанс -", "болезненный -", '\n',
                     "в эпигастральной обл", "в мезогастральной обл", "в гипогастральной обл", '\n',
                     "справа", "слева", '\n',
                     "Печень у края реберной дуги", "плотная", "эластичная", "селезенка не пальпируется"),
                    ("Мочеиспускание", "регулярное", "безболезненное", "диурез снижен", "боль при мочеиспускании"),
                    ("Стул", "оформленный", "послабленный", "разжиженный", "кашицеобразный", '\n',
                     "коричневый", "зеленый", "обесцвеченный", "желтый", "черный", '\n',
                     "без патологических примесей", "с кровью", "с слизью", '\n',
                     "регулярный", "частый", "редкий"),
                    ("Отоскопия", "не проводилась", "без патологии",
                     "гиперемия", "серозное содержимое", "гнойное содержимое", "выбухание",
                     "серная пробка", "отит", "катаральный", "гнойный", "экссудативный", "наружный диффузный"),
                    ("Дополнительно", "Менингеальные симптомы", "Аппендикулярные симптомы",
                     "Перитониальные симптомы", "Пузырные симптомы", '\n',
                     "отрицательные", "положительные", "сомнительные")),


    "prescription": (("Рекомендации",
                      ("домашний режим", "питьевой режим", "постельный режим на время лихорадки"),
                      ("полоскать горло", "орошать горло", "промывать нос солевыми растворами"),
                      ("дренажный массаж", "ингалляции с физраствором"),
                      ("безмолочная диета", "диета с ограничением сырых продуктов", "Пробиотик")),
                     ("Разрешена вакцинация",
                      ("V -", "V1 -", "V2 -", "V3 -", "V4 -", "R -", "R1 -", "R2 -", "R3 -", "R4 -"),
                      ("БЦЖ-М", "ХИБ", "ИПВ"),
                      ("ВГВ", "(Эувакс)"),
                      ("ВГА", "(Хаврикс)", "(Хеалив)", "(Альгавак)", "(Аваксим)"),
                      ("КПК", "(Приорикс)"),
                      ("А(а)КДС", "АДС", "АДМ"),
                      ("АДС-М", "(Инфанрикс)", "(Адасель)"),
                      ("от Гриппа", "(Гриппол +)", "(Гриппол)", "(Ваксигрипп тетра)"),
                      ("от ротавируса", "(Рота-V-Эйд)"),
                      ("от Ветряной оспы", "(Варилрикс)", "(Варицелла)"),
                      ("от Клещевого энцефалита", "(Тиковак Джуниор)", "(Тиковак)"),

                      ("от Пневмококковой инфекции", "(Превенар-13)", "(Синфлорикс)"),
                      ("от Менингококковой инфекции", "(Менактра)", "(Труменба)"),
                      ("Реакция Манту", "Диаскинтест"),

                      ("ВГВ + А(а)КДС + ХИБ + ИПВ", "(Инфанрикс гекса)", "(Гексаксим)"),
                      ("А(а)КДС + ХИБ", "(Тетраксим)"),
                      ("А(а)КДС + ВГА", ),
                      ("На бесплатной основе", ),

                      )),

    "drugs": {
        "Антибиотики": (
            ("Амоксициллин",
             "Форма", "суспензия 125/5", "суспензия 250/5", "таб. 250", "таб. 500", "таб. 1000",
             "Дозировка", "40 мг/кг/сут", "50 мг/кг/сут", "75 мг/кг/сут", "90 мг/кг/сут",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить",
             "Способ применения", "принимать внутрь не зависимо от приема пищи", "подключить пробиотик",
             "выписан льготный рецепт", "имеется дома"),

            ("Амоксициллин + клавулановая кислота",
             "Форма", "суспензия 125/31.25/5", "суспензия 200/28.5/5",
             "суспензия 250/62.5/5", "суспензия 400/57/5", "суспензия 600/42.9/5",
             "таб. 250/125", "таб. 500/125", "таб. 875/125",
             "Дозировка", "40 мг/кг/сут", "50 мг/кг/сут", "75 мг/кг/сут", "90 мг/кг/сут",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить",
             "Способ применения", "принимать внутрь не зависимо от приема пищи", "подключить пробиотик",
             "выписан льготный рецепт", "имеется дома"),

            ("Цефуроксим",
             "Форма", "суспензия 125/5", "таб. 125", "таб. 250", "таб. 500",
             "Дозировка", "20 мг/кг/сут", "30 мг/кг/сут",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить",
             "Способ применения", "принимать внутрь перед приемом пищи", "подключить пробиотик",
             "выписан рецепт", "выписан льготный рецепт", "имеется дома"),

            ("Кларитромицин",
             "Форма", "суспензия 125/5", "суспензия 250/5", "таб. 250", "таб. 500",
             "Дозировка", "15 мг/кг/сут",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить",
             "Способ применения", "принимать внутрь не зависимо от приема пищи", "подключить пробиотик",
             "выписан рецепт", "выписан льготный рецепт", "имеется дома"),

            ("Азитромицин",
             "Форма", "суспензия 200/5", "таб. 125", "таб. 250", "таб. 500",
             "Дозировка", "10 мг/кг/сут",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "1-й день - 2 р/сут, далее - 1 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить",
             "Способ применения", "принимать внутрь не зависимо от приема пищи", "подключить пробиотик",
             "выписан рецепт", "выписан льготный рецепт", "имеется дома"),

            ("Цефдинир",
             "Форма", "суспензия 125/5", "суспензия 250/5", "таб. 300",
             "Дозировка", "14 мг/кг/сут",
             "Кратность", "1 р/сут", "2 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить",
             "Способ применения", "принимать внутрь не зависимо от приема пищи", "подключить пробиотик",
             "выписан рецепт", "выписан льготный рецепт", "имеется дома"),

            ("Фосфомицин",
             "Форма", "порошок для приг. раствора внутрь 3г",
             "Кратность", "однократно", "1 р/сут", "2 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "продолжить",
             "Способ применения", "принимать внутрь перед приемом пищи", "подключить пробиотик",
             "выписан рецепт", "имеется дома"),

            ("Фуразидин (Фурагин)",
             "Форма", "таблетки 50мг",
             "Дозировка", "1 таб", "2 таб", "3 таб.",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "продолжить",
             "Способ применения", "принимать внутрь после приема пищи", "подключить пробиотик")

        ),

        "ОРИ": (
            ("Парацетамол",
             "Форма", "автоматически", "суппозитории", "раствор 30 мг/мл", "суспензия 120 мг/5мл",
             "таб. 200 мг", "таб. 500 мг",
             "Дозировка", "10 мг/кг", "12.5 мг/кг", "15 мг/кг",
             "Способ применения", "принимать при температуре 38.5 и выше",
             "принимать при болевом синдроме",
             "с интервалом не меньше 6 часов", "с интервалом не меньше 8 часов",
             "выписан льготный рецепт", "имеется дома"),

            ("Ибупрофен",
             "Форма", "автоматически", "суппозитории", "суспензия 100 мг/5мл", "суспензия 200 мг/5мл",
             "таб. 200 мг", "таб. 400 мг",
             "Дозировка", "5 мг/кг", "7.5 мг/кг", "10 мг/кг",
             "Способ применения", "принимать при температуре 38.5 и выше",
             "принимать при болевом синдроме",
             "с интервалом не меньше 6 часов", "с интервалом не меньше 8 часов",
             "выписан льготный рецепт", "имеется дома"),

            ("Ибупрофен+Парацетамол",
             "Форма", "таб. диспергируемые 100мг/125мг", "таб. 400мг/325мг",
             "Дозировка", "1 таб", "2 таб", "3 таб",
             "Способ применения", "принимать при температуре 38.5 и выше",
             "принимать при болевом синдроме",
             "с интервалом не меньше 6 часов"),

            ("Оксиметазолин - капли в нос",
             "Форма", "0.01%", "0.025%", "0.05%",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут",
             "Длительность", "3 дня", "не дольше 5 дней",
             "Способ применения", "при заложенности носа",
             "закапывать по 1-2 капли в каждый носовой ход после туалета физраствором", "выписан льготный рецепт", "имеется дома"),

            ("Ксилометазолин - капли в нос",
             "Форма", "0.05%", "0.1%",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут",
             "Длительность", "3 дня", "не дольше 5 дней",
             "Способ применения", "при заложенности носа",
             "закапывать по 1-2 капли в каждый носовой ход после туалета физраствором", "выписан льготный рецепт", "имеется дома"),


            ("Осельтамивир",
             "Форма", "капс. 30мг", "капс. 45мг", "капс. 75мг",
             "Дозировка", "1/2 капс", "1 капс", "2 капс",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить",
             "до нормализации температуры"),

            ("Амброксол",
             "Форма", "раствор 7.5мг/мл", "суспензия 15мг/5мл", "суспензия 30мг/мл", "таб 30 мг",
             "Дозировка", "2.5 миллилитра", "5 миллилитров", "10 миллилитров",
             "1/2 таблетки", "1 таблетка",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить",
             "Способ применения", "для ингалляций", "принимать внутрь"),

            ("Ацетилцистеин",
             "Форма", "суспензия 20мг/мл", "пор. 100мг", "пор/таб. 200мг", "пор/таб. 600мг",
             "Дозировка", "5 миллилитров", "7.5 миллилитров", "10 миллилитров",
             "1 порошок", "2 порошка",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить"),

            ("Карбоцистеин",
             "Форма", "суспензия 20мг/мл", "суспензия 50мг/мл",
             "Дозировка", "2.5 миллилитров", "5 миллилитров", "7.5 миллилитров", "10 миллилитров",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить"),

            ("Бутамират",
             "Форма", "капли 5мг/мл", "суспензия 15мг/10мл",
             "Дозировка", "по 10 капель", "по 15 капель", "по 25 капель",
             "5 миллилитров", "10 миллилитров", "15 миллилитров",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить"),

            ("Мометазон",
             "Форма", "спрей назальный 50мкг/доза 140доз",
             "Дозировка", "1 доза", "2 дозы", "3 дозы",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "на ночь",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить", "длительно"),

            ("Феназон+Лидокаин (отисфен) - капли ушные",
             "Дозировка", "по 1 капле", "по 2 капли", "по 1-2 капли",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "при боли в ушах",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить"),

            ("Рифамицин (отофа) - капли ушные",
             "Дозировка", "по 1 капле", "по 2 капли", "по 1-2 капли",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "на ночь",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить")),

        "Бронхолитики": (
            ("Беродуал (Фенотерол+Ипратропия бромид)",
             "Форма", "раствор 0.5мг+0.25мг", "аэрозоль 50мкг+20мкг/доза - 200 доз",
             "Дозировка", "5 капель", "10 капель", "15 капель", "20 капель", "25 капель",
             "1 доза", "2 дозы", "3 дозы",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить",
             "Способ применения", "развести в 3 мл физраствора - для ингалляций",
             "вдыхать через спейсер", "выписан льготный рецепт", "имеется дома"),

            ("Сальбутамол",
             "Форма", "суспензия 2мг/5мл", "аэрозоль 100мкг/доза - 200 доз",
             "Дозировка", "2.5 миллилитра", "5 миллилитров", "10 миллилитров",
             "1 доза", "2 дозы", "3 дозы",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "при приступе",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить",
             "Способ применения", "выписан рецепт", "выписан льготный рецепт", "имеется дома"),

            ("Флутиказон",
             "Форма", "аэрозоль 50мкг/доза - 120 доз", "аэрозоль 125мкг/доза - 120 доз", "аэрозоль 250мкг/доза - 120 доз",
             "Дозировка", "1 доза", "2 дозы", "3 дозы",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить", "длительно",
             "Способ применения", "выписан рецепт", "выписан льготный рецепт", "имеется дома"),

            ("Бромгексин+Гвайфенезин+Сальбутамол+Ментол (Джосет)",
             "Форма", "сироп 100мл",
             "Дозировка", "5 миллилитров", "7,5 миллилитров", "10 миллилитров",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить",
             "Способ применения", "выписан рецепт", "имеется дома"),

            ("Будесонид",
             "Форма", "суспензия 0.25мг/мл - 2мл", "суспензия 0.5мг/мл - 2мл",
             "аэрозоль 100мкг/доза - 200 доз", "аэрозоль 200мкг/доза - 200 доз",
             "Дозировка", "1 миллилитр", "2 миллилитра", "3 миллилитра", "4 миллилитра",
             "1 доза", "2 дозы", "3 дозы",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "при приступе лающего кашля",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить",
             "Способ применения", "развести в 3 мл физраствора - для ингалляций", "вдыхать через спейсер",
             "после применения прополоскать рот водой", "выписан рецепт", "выписан льготный рецепт", "имеется дома"),

            ("Монтелукаст",
             "Форма", "таб. 4мг", "таб. 5мг", "таб. 10мг",
             "Дозировка", "1/2 таб", "1 таб", "2 таб",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "1 р/сут на ночь",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить", "длительно",
             "Способ применения", "выписан рецепт", "выписан льготный рецепт", "имеется дома")),

        "Глазные капли": (
            ("Нитрофурал (фурацилин)",
             "Форма", "раствор для наружного применения 0.02%",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "промывать глаза по мере загноения"),

            ("Тобрамицин - капли глазные 0.3%",
             "Дозировка", "по 1-2 капли",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут", "5 р/сут", "на ночь",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "продолжить",
             "Способ применения", "закапывать в открытый глаз",
             "при наличии гнойного содержимого - промыть конъюнктивальную полость", "выписан льготный рецепт", "имеется дома"),

            ("Дексаметазон+Тобрамицин - капли глазные",
             "Дозировка", "по 1-2 капли",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут", "5 р/сут", "на ночь",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "продолжить",
             "Способ применения", "закапывать в открытый глаз",
             "при наличии гнойного содержимого - промыть конъюнктивальную полость", "выписан льготный рецепт", "имеется дома"),

            ("Офлоксацин",
             "Форма", "капли глазные 0.3%", "мазь глазная 0.3%",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут", "5 р/сут", "на ночь",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "продолжить",
             "Способ применения", "закапывать в открытый глаз  по 1-2 капли", "закладывать за нижнее веко",
             "при наличии гнойного содержимого - промыть конъюнктивальную полость"),

            ("Кромоглициевая кислота - капли глазные",
             "Форма", "2% (Кромором) по 1-2 капли",
             "4% (Лекролин) по 1-2 капли",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут", "5 р/сут", "на ночь",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить",
             "Способ применения", "закапывать в открытый глаз",
             "при наличии гнойного содержимого - промыть конъюнктивальную полость"),

            ("Дексаметазон - капли глазные 0.1%",
             "Дозировка", "по 1-2 капли",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут", "5 р/сут", "на ночь",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить",
             "Способ применения", "закапывать в открытый глаз",
             "при наличии гнойного содержимого - промыть конъюнктивальную полость"),

            ("Диклофенак - капли глазные 0.1%",
             "Дозировка", "по 1-2 капли",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут", "5 р/сут", "на ночь",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить",
             "Способ применения", "закапывать в открытый глаз",
             "при наличии гнойного содержимого - промыть конъюнктивальную полость"),

            ("Гидрокортизон - мазь глазная 0.5%",
             "Дозировка", "закладывать за нижнее веко",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут", "5 р/сут", "на ночь",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить"),

            ("Тетрациклин - мазь глазная 1%",
             "Форма", " - закладывать за нижнее веко",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут", "5 р/сут", "на ночь",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "продолжить")),

        "Антигистаминные": (
            ("Хифенадин (Фенкарол)",
             "Форма", "таб. 10мг", "таб. 25мг", "таб. 50мг",
             "Дозировка", "1/4 таб", "1/2 таб", "1 таб", "1.5 таб",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "30 дней",
             "до улучшения симптомов", "до следующего осмотра",
             "Способ применения", "выписан льготный рецепт"
             ),

            ("Цетиризин",
             "Форма", "кап. 10мг/мл-20мл", "таб. 10мг",
             "Дозировка", "5 капель", "10 капель", "20 капель", "1/2 таб", "1 таб",
             "Кратность", "1 р/сут", "2 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "30 дней",
             "до улучшения симптомов", "до следующего осмотра",
             "Способ применения", "выписан льготный рецепт"),

            ("Лоратадин",
             "Форма", "суспензия 5мг/5мл", "таб. 10мг",
             "Дозировка", "5 миллилитров", "10 миллилитров", "1/2 таб", "1 таб",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "30 дней",
             "до улучшения симптомов", "до следующего осмотра",
             "Способ применения", "выписан льготный рецепт"),

            ("Дезлоратадин",
             "Форма", "суспензия 0.5мг/мл", "таб. 5мг",
             "Дозировка", "2.5 миллилитра", "5 миллилитров", "10 миллилитров", "1/2 таб", "1 таб",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "30 дней",
             "до улучшения симптомов", "до следующего осмотра",
             "Способ применения", "выписан льготный рецепт"),

            ("Хлоропирамин",
             "Инструкция - раствор для инъекций\n"
             "1-12 месяцев -- 5 мг -- 0.25 миллилитра\n"
             "1-6 лет -- 10 мг -- 0.5 миллилитра\n"
             "6-14 лет -- 10-20 мг -- 0.5-1.0 миллилитр\n"
             "14-18 лет -- 20 мг -- 1.0 миллилитр\n"
             "Максимальная суточная доза - 2мг/кг\n\n"
             "таблетки 25мг\n"
             "2-6 лет -- 1/2 таб 2 раза в сутки\n"
             "6-14 лет -- 1/2 таб 2-3 раза в сутки\n"
             "14-18 лет -- 1 таб 3-4 раза в сутки",

             "Форма", "раствор для инъекций 20мг / 1мл", "таб. 25мг N20",
             "Дозировка", "0.25 миллилитра (5 мг)", "0.5 миллилитра (10 мг)", "1.0 миллилитр (20 мг)",
             "1/2 таб", "1 таб", "2 таб",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "30 дней",
             "до улучшения симптомов", "до следующего осмотра",
             "Способ применения", "Внутримышечно!", "выписан рецепт"
             )

        ),

        "Неотложка": (
            ("Хлоропирамин",
             "Инструкция - раствор для инъекций\n"
             "1-12 месяцев -- 5 мг -- 0.25 миллилитра\n"
             "1-6 лет -- 10 мг -- 0.5 миллилитра\n"
             "6-14 лет -- 10-20 мг -- 0.5-1.0 миллилитр\n"
             "14-18 лет -- 20 мг -- 1.0 миллилитр\n"
             "Максимальная суточная доза - 2мг/кг\n\n"
             "таблетки 25мг\n"
             "2-6 лет -- 1/2 таб 2 раза в сутки\n"
             "6-14 лет -- 1/2 таб 2-3 раза в сутки\n"
             "14-18 лет -- 1 таб 3-4 раза в сутки",

             "Форма", "раствор для инъекций 20мг / 1мл", "таб. 25мг N20",
             "Дозировка", "0.25 миллилитра (5 мг)", "0.5 миллилитра (10 мг)", "1.0 миллилитр (20 мг)",
             "1/2 таб", "1 таб", "2 таб",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "30 дней",
             "до улучшения симптомов", "до следующего осмотра",
             "Способ применения", "Внутримышечно!", "выписан рецепт"
             ),

            ("Преднизолон",
             "Инструкция - раствор для инъекций\n"
             "Дозировка 1-3 мг/кг\n",

             "Форма", "раствор для инъекций 30мг/1мл 1мл N10", "таб. 5мг N50",
             "Дозировка", "0.25 миллилитра (7.5 мг)", "0.5 миллилитра (15 мг)", "1.0 миллилитр (30 мг)",
             "1/2 таб", "1 таб", "2 таб",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "30 дней",
             "до улучшения симптомов", "до следующего осмотра",
             "Способ применения", "Внутримышечно!", "развести в 3 мл физраствора - для ингалляций",
             "выписан рецепт"
             ),

            ("Дексаметазон",
             "Инструкция - раствор для инъекций\n"
             "Дозировка 0.5 мг/кг\n",

             "Форма", "раствор для инъекций 4мг/мл 2мл", "таб. 0.5мг N50",
             "Дозировка", "0.25 миллилитра", "0.5 миллилитра", "1.0 миллилитр",
             "1/2 таб", "1 таб", "2 таб",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "30 дней",
             "до улучшения симптомов", "до следующего осмотра",
             "Способ применения", "Внутримышечно!",
             "выписан рецепт"
             ),

            ("Эпинефрин",
             "Инструкция\n"
             "Дозировка 10 мкг/кг но не больше 0.3 мг\n"
             "Показания: Анафилактический шок, бронхоспазм\n"
             "до 6 месяцев -- 100-150 мкг -- 0.1-0.15 миллилитра\n"
             "6 мес - 6 лет -- 150 мкг -- 0.15 миллилитра\n"
             "6-12 лет -- 300 мкг -- 0.3 миллилитра\n"
             "старше 12 лет -- 500 мкг -- 0.5 миллилитра",

             "Форма", "раствор для инъекций 1.82мг/мл 1мл",
             "Дозировка", "0.1 миллилитр", "0.15 миллилитра", "0.3 миллилитра", "0.5 миллилитра", "1.0 миллилитр",
             "до улучшения симптомов", "до следующего осмотра",
             "Способ применения", "Внутримышечно!", "выписан рецепт"
             ),

            ("Литическая смесь",
             "Форма", "Метамизол натрия (Анальгин) раствор для инъекций 50% 2мл "
                      "+ Дротаверин раствор для инъекций 2% 2мл",
             "Дозировка", "0.1 миллилитр на год жизни Внутримышечно!"
             ),

        ),
        "ЖКТ": (
            ("Нифуроксазид",
             "Форма", "суспензия 220/5", "капс. 100мг", "капс. 200мг",
             "Дозировка", "5 мл.", "1 капс.", "2 капс.",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "30 дней"),

            ("Лактулоза",
             "Форма", "суспензия сироп 667мг/мл",
             "Дозировка", "2.5 мл.", "5 мл.", "10 мл.",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут",
             "Длительность", "3 дня", "5 дней", "7 дней", "10 дней", "14 дней", "30 дней",
             "Способ применения", "выписан льготный рецепт", "имеется дома"),

            ("Альбендазол",
             "Форма", "суспензия 100мг/5мл - 20мл", "таб. 400мг",
             "Дозировка", "5 мл.", "10 мл.", "20 мл.", "1 таб.",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут",
             "Длительность", "однократно", "3 дня", "5 дней"),

            ("Мебендазол",
             "Форма", "суспензия 100мг/5мл - 20мл", "таб. 100мг",
             "Дозировка", "5 мл.", "10 мл.", "20 мл.", "1 таб.",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут",
             "Длительность", "однократно", "3 дня", "5 дней"),

            ("Симетикон",
             "Форма", "капли для приема внутрь 40мг/мл", "капли для приема внутрь 66.66 мг/мл", "капли для приема внутрь 100мг/мл", "капли для приема внутрь 300 мг/мл", "капс 40 мг", "капс 80 мг", "капс 120 мг",
             "Дозировка", "4 капли", "6 капель", "8 капель", "14 капель", "16 капель", "25 капель", "50 капель",
                            "1 капс", "2 капс",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут", "после каждого приема пищи",
             "Способ применения", "выписан льготный рецепт", "имеется дома"
             ),

            ("Смектит диоктаэдрический (Смекта)",
             "Форма", "суспензия 3г/15мл", "пор 3г",
             "Дозировка", "5 мл.", "1 пак.",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут"),

            ("Активированный уголь таб. 250мг",
             "Дозировка", "1 таб", "2 таб", "3 таб", "4 таб", "5 таб", "6 таб",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут"),

            ("Дротаверин",
             "Форма", "таб 40мг", "таб 80мг",
             "Дозировка", "1/2 таб", "1 таб", "2 таб",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "при болевом синдроме, но не больше 3 р/сут")),

        "Льготные": (
            ("Холекальциферол",
             "Форма", "водный раствор для приема внутрь 15000МЕ/1мл 10мл",
             "масляный раствор для приема внутрь 0.5мг/мл 10мл", "масляный раствор для приема внутрь 0.425мг/мл 5мл",
             "Дозировка", "по 1 капле", "по 2 капли", "по 3 капли", "по 4 капли",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут",
             "Способ применения", "выписан льготный рецепт", "имеется дома"),

            ("Железа (III) гидроксид полимальтозат",
             "Форма", "сироп 50мг/5мл 100мл",
             "капли для приема внутрь 50мг/мл 30мл",
             "раствор для инъекций 100мг/2мл N10",
             "таблетки жевательные 100мг",
             "Дозировка", "1.25 мл.", "2.5 мл.", "5 мл.", "10 мл.", "20 мл.",
             "по 6 капель (15 мг Fe)", "по 10 капель (25 мг Fe)", "по 20 капель (50 мг Fe)",
             "по 40 капель (100 мг Fe)", "по 80 капель (200 мг Fe)", "по 120 капель (300 мг Fe)", "1 таб.",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут",
             "Длительность", "7 дней", "14 дней", "30 дней", "2 месяца",
             "Способ применения", "выписан льготный рецепт", "имеется дома"),

            ("Смектит диоктаэдрический (Смекта)",
             "Форма", "суспензия 3г/15мл", "пор 3г",
             "Дозировка", "5 мл.", "1 пак.",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут",
             "Способ применения", "выписан льготный рецепт", "имеется дома"),

            ("Бифидумбактерин",
             "Форма", "порошок для приг. раствора внутр. 5доз N10",
             "Дозировка", "1 доза (1/5 флакона)", "2 дозы (2/5 флакона)", "3 дозы (3/5 флакона)",
                "5 доз (1 флакон)", "10 доз (2 флакона)",
             "Кратность", "1 р/сут", "2 р/сут", "3 р/сут", "4 р/сут", "после каждого приема пищи",
             "Способ применения", "содержимое флакона развести в теплой воде", "выписан льготный рецепт", "имеется дома"
             )
        )

    }
}

recipe_data = {
	"Антибиотики": {
		"Амоксициллин": {
			"суспензия 125/5": "1 (одна упаковка)",
			"суспензия 250/5": "1 (одна упаковка)",
			"таб. 250": "30 (тридцать)",
			"таб. 500": "20 (двадцать)",
			"таб. 1000": "14 (четырнадцать)",
		},
		"Амоксициллин + клавулановая кислота": {
			"суспензия 125/31.25/5": "1 (одна упаковка)",
			"суспензия 200/28.5/5": "1 (одна упаковка)",
			"суспензия 250/62.5/5": "1 (одна упаковка)",
			"суспензия 400/57/5": "1 (одна упаковка)",
			"суспензия 600/42.9/5": "1 (одна упаковка)",
			"таб. 250/125": "15 (пятнадцать)",
			"таб. 500/125": "14 (четырнадцать)",
			"таб. 875/125": "14 (четырнадцать)",
		},
		"Цефуроксим": {
			"суспензия 125/5": "1 (одна упаковка)",
			"таб. 125": "10 (десять)",
			"таб. 250": "10 (десять)",
			"таб. 500": "10 (десять)",
		},
		"Кларитромицин": {
			"суспензия 125/5": "1 (одна упаковка)",
			"суспензия 250/5": "1 (одна упаковка)",
			"таб. 250": "14 (четырнадцать)",
			"таб. 500": "7 (семь)",
		},
		"Азитромицин": {
			"суспензия 200/5": "1 (одна упаковка)",
			"таб. 125": "6 (шесть)",
			"таб. 250": "6 (шесть)",
			"таб. 500": "6 (шесть)",
		},
		"Цефдинир": {
			"суспензия 125/5": "1 (одна упаковка)",
			"суспензия 250/5": "1 (одна упаковка)",
			"таб. 300": "10 (десять)",
		},
		"Фосфомицин": {
			"порошок для приг. раствора внутрь 3г": "1 (один)",
		},
		"Фуразидин (Фурагин)": {
			"таблетки 50мг": "30 (тридцать)",
		},
	},
	"ОРИ": {
		"Парацетамол": {
			"суппозитории": "10 (десять)",
			"суспензия 30 мг/мл": "1 (одна упаковка)",
			"суспензия 120 мг/5мл": "1 (одна упаковка)",
			"таб. 200 мг": "20 (двадцать)",
			"таб. 500 мг": "20 (двадцать)",
		},
		"Ибупрофен": {
			"суппозитории": "10 (десять)",
			"суспензия 100 мг/5мл": "1 (одна упаковка)",
			"суспензия 200 мг/5мл": "1 (одна упаковка)",
			"таб. 200 мг": "20 (двадцать)",
			"таб. 400 мг": "20 (двадцать)",
		},

        "Ибупрофен+Парацетамол": {
            "таб. диспергируемые 100мг/125мг": "20 (двадцать)",
            "таб. 400мг/325мг": "20 (двадцать)"
        },


        "Оксиметазолин - капли в нос": {
			"0.01%": "1 (одна упаковка)",
			"0.025%": "1 (одна упаковка)",
			"0.05%": "1 (одна упаковка)",
		},
		"Ксилометазолин - капли в нос": {
			"0.05%": "1 (одна упаковка)",
			"0.1%": "1 (одна упаковка)",
		},
		"Осельтамивир": {
			"капс. 30мг": "10 (десять)",
			"капс. 45мг": "10 (десять)",
			"капс. 75мг": "10 (десять)",
		},

		"Амброксол": {
			"раствор 7.5мг/мл": "1 (одна упаковка)",
			"суспензия 15мг/5мл": "1 (одна упаковка)",
			"суспензия 30мг/мл": "1 (одна упаковка)",
			"таб 30 мг": "20 (двадцать)",
		},
		"Ацетилцистеин": {
			"суспензия 20мг/мл": "1 (одна упаковка)",
			"пор. 100мг": "20 (двадцать)",
			"пор/таб. 200мг": "20 (двадцать)",
			"пор/таб. 600мг": "10 (десять)",
		},
		"Мометазон": {
			"спрей назальный 50мкг/доза 140доз": "1 (одна упаковка - 140 доз)",
		},
	},
	"Бронхолитики": {
		"Беродуал (Фенотерол+Ипратропия бромид)": {
			"раствор 0.5мг+0.25мг": "1 (одна упаковка - 20мл)",
			"аэрозоль 50мкг+20мкг/доза - 200 доз": "1 (одна упаковка - 200 доз)",
		},
		"Сальбутамол": {
			"суспензия 2мг/5мл": "1 (одна упаковка)",
			"аэрозоль 100мкг/доза - 200 доз": "1 (одна упаковка)",
		},
		"Флутиказон": {
			"аэрозоль 50мкг/доза - 120 доз": "1 (одна упаковка)",
			"аэрозоль 125мкг/доза - 120 доз": "1 (одна упаковка)",
			"аэрозоль 250мкг/доза - 120 доз": "1 (одна упаковка)",
		},

		"Будесонид": {
			"суспензия 0.25мг/мл - 2мл": "10 (десять) in amp",
			"суспензия 0.5мг/мл - 2мл": "10 (десять) in amp",
			"аэрозоль 100мкг/доза - 200 доз": "1 (одна упаковка)",
			"аэрозоль 200мкг/доза - 200 доз": "1 (одна упаковка)",
		},
		"Монтелукаст": {
			"таб. 4мг": "30 (тридцать)",
			"таб. 5мг": "30 (тридцать)",
			"таб. 10мг": "30 (тридцать)",
		},
	},
	"Антигистаминные": {
		"Хифенадин (Фенкарол)": {
			"таб. 10мг": "20 (двадцать)",
			"таб. 25мг": "20 (двадцать)",
			"таб. 50мг": "15 (пятнадцать)",
		},
		"Цетиризин": {
			"кап. 10мг/мл-20мл": "1 (одна упаковка)",
			"таб. 10мг": "30 (тридцать)",
		},
		"Лоратадин": {
			"суспензия 5мг/5мл": "1 (одна упаковка)",
			"таб. 10мг": "10 (десять)",
		},
		"Дезлоратадин": {
			"суспензия 0.5мг/мл": "1 (одна упаковка)",
			"таб. 5мг": "30 (тридцать)",
		},
	},
	"ЖКТ": {
		"Нифуроксазид": {
			"суспензия 220/5": "1 (одна упаковка)",
			"капс. 100мг": "30 (тридцать)",
			"капс. 200мг": "30 (тридцать)",
		},
		"Альбендазол": {
			"суспензия 100мг/5мл - 20мл": "",
			"таб. 400мг": "",
		},
		"Мебендазол": {
			"суспензия 100мг/5мл - 20мл": "1 (одна упаковка)",
			"таб. 100мг": "1 (одна упаковка)",
		},
		"Симетикон": {
			"капли для приема внутрь 40мг/мл": "1 (одна упаковка)",
			"капли для приема внутрь 66.66 мг/мл": "1 (одна упаковка)",
			"капли для приема внутрь 100мг/мл": "1 (одна упаковка)",
			"капли для приема внутрь 300 мг/мл": "1 (одна упаковка)",
			"капс 40 мг": "1 (одна упаковка)",
			"капс 80 мг": "1 (одна упаковка)",
			"капс 120 мг": "1 (одна упаковка)",
		},
		"Смектит диоктаэдрический (Смекта)": {
			"суспензия 3г/15мл": "1 (одна упаковка)",
			"пор 3г": "10 (десять)",
		},

		"Дротаверин": {
			"таб 40мг": "20 (двадцать)",
			"таб 80мг": "20 (двадцать)",
		},
	},
	"Льготные": {
		"Холекальциферол": {
			"водный раствор для приема внутрь 15000МЕ/1мл 10мл": "1 (одна упаковка)",
			"масляный раствор для приема внутрь 0.5мг/мл 10мл": "1 (одна упаковка)",
			"масляный раствор для приема внутрь 0.425мг/мл 5мл": "1 (одна упаковка)",
		},
		"Железа (III) гидроксид полимальтозат": {
			"сироп 50мг/5мл 100мл": "1 (одна упаковка)",
			"капли для приема внутрь 50мг/мл 30мл": "1 (одна упаковка)",
			"раствор для инъекций 100мг/2мл N10": "1 (одна упаковка)",
			"таблетки жевательные 100мг": "30 (тридцать)",
		},
		"Смектит диоктаэдрический (Смекта)": {
			"суспензия 3г/15мл": "1 (одна упаковка)",
			"пор 3г": "10 (десять)",
		},
		"Симетикон": {
			"капли для приема внутрь 40мг/мл": "1 (одна упаковка)",
			"капли для приема внутрь 66.66 мг/мл": "1 (одна упаковка)",
			"капли для приема внутрь 100мг/мл": "1 (одна упаковка)",
			"капли для приема внутрь 300 мг/мл": "1 (одна упаковка)",
			"капс 40 мг": "1 (одна упаковка)",
			"капс 80 мг": "1 (одна упаковка)",
			"капс 120 мг": "1 (одна упаковка)",
		},
	}
}

anthropometry = {
    "до года": {
        'мужской': {
            'weight': {
                0: [2700, 2900, 3100, 3400, 3700, 3900, 4200],
                1: [3300, 3600, 4000, 4300, 4700, 5100, 5400],
                2: [3900, 4200, 4600, 5100, 5600, 6000, 6400],
                3: [4500, 4900, 5300, 5800, 6400, 7000, 7300],
                4: [5100, 5500, 6000, 6500, 7200, 7600, 8100],
                5: [5600, 6100, 6500, 7100, 7800, 8300, 8800],
                6: [6100, 6600, 7100, 7600, 8400, 9000, 9400],
                7: [6600, 7100, 7600, 8200, 8900, 9500, 9900],
                8: [7100, 7500, 8000, 8600, 9400, 10000, 10500],
                9: [7500, 7900, 8400, 9100, 9800, 10500, 11000],
                10: [7900, 8300, 8800, 9500, 10300, 10900, 11400],
                11: [8200, 8600, 9100, 9800, 10600, 11200, 11800],
                12: [8500, 8900, 9400, 10000, 10900, 11600, 12100]},
            'height': {
                0: [46.5, 48.0, 49.8, 51.3, 52.3, 53.5, 55.0],
                1: [49.5, 51.2, 52.7, 54.5, 55.6, 56.5, 57.3],
                2: [52.6, 53.8, 55.3, 57.3, 58.2, 59.4, 60.9],
                3: [55.3, 56.5, 58.1, 60.0, 60.9, 62.0, 63.8],
                4: [57.5, 58.7, 60.6, 62.0, 63.1, 64.5, 66.3],
                5: [59.9, 61.1, 62.3, 64.3, 65.6, 67.0, 68.9],
                6: [61.7, 63.0, 64.8, 66.1, 67.7, 69.0, 71.2],
                7: [63.8, 65.1, 66.3, 68.0, 69.8, 71.1, 73.5],
                8: [65.5, 66.8, 68.1, 70.0, 71.3, 73.1, 75.3],
                9: [67.3, 68.2, 69.8, 71.3, 73.2, 75.1, 77.1],
                10: [68.8, 69.6, 71.2, 73.0, 75.1, 76.9, 78.8],
                11: [70.1, 71.3, 72.6, 74.3, 76.2, 78.0, 80.3],
                12: [71.2, 72.3, 74.0, 75.5, 77.3, 79.7, 81.7],}},

        'женский': {
            'weight': {
                0: [2600, 2800, 3000, 3300, 3700, 3900, 4100],
                1: [3300, 3600, 3800, 4200, 4500, 4700, 5100],
                2: [3800, 4200, 4500, 4800, 5200, 5500, 5900],
                3: [4400, 4800, 5200, 5500, 5900, 6300, 6700],
                4: [5000, 5400, 5800, 6200, 6600, 7000, 7500],
                5: [5500, 5900, 6300, 6700, 7200, 7700, 8100],
                6: [5900, 6300, 6800, 7300, 7800, 8300, 8700],
                7: [6400, 6800, 7300, 7700, 8400, 8900, 9300],
                8: [6700, 7200, 7600, 8200, 8800, 9300, 9700],
                9: [7100, 7500, 8000, 8600, 9200, 9700, 10100],
                10: [7400, 7900, 8400, 9000, 9600, 10100, 10500],
                11: [7700, 8300, 8700, 9300, 9900, 10500, 10900],
                12: [8000, 8500, 9000, 9600, 10200, 10800, 11300],
            },
            'height': {
                0: [45.8, 47.5, 49.8, 50.7, 52.0, 53.1, 53.9],
                1: [48.5, 50.3, 52.1, 53.5, 55.0, 56.1, 57.3],
                2: [51.2, 53.3, 55.2, 56.8, 58.0, 59.3, 60.6],
                3: [54.0, 56.2, 57.6, 59.3, 60.7, 61.8, 63.6],
                4: [56.7, 58.4, 60.0, 61.2, 62.8, 64.0, 65.7],
                5: [59.1, 60.8, 62.0, 63.8, 65.1, 66.0, 68.0],
                6: [60.8, 62.5, 64.1, 65.5, 67.1, 68.8, 70.0],
                7: [62.7, 64.1, 65.9, 67.5, 69.2, 70.4, 71.9],
                8: [64.5, 66.0, 67.5, 69.0, 70.5, 72.5, 73.7],
                9: [66.0, 67.5, 69.1, 70.2, 72.0, 74.1, 75.5],
                10: [67.5, 69.0, 70.3, 71.9, 73.2, 75.3, 76.8],
                11: [68.9, 70.1, 71.5, 73.0, 74.7, 76.5, 78.1],
                12: [70.1, 71.4, 72.8, 74.1, 75.8, 78.0, 79.6]}
        }},

    "после года": {
        'мужской': {
            'weight': {
                0: [8.5, 8.9, 9.4, 10, 10.9, 11.6, 12.1],
                1: [8.5, 8.9, 9.4, 10, 10.9, 11.6, 12.1],
                2: [10.6, 11, 11.7, 12.6, 13.5, 14.2, 15],
                3: [12.1, 12.8, 13.8, 14.8, 16, 16.9, 17.7],
                4: [13.4, 14.2, 15.1, 16.4, 17.8, 19.4, 20.3],
                5: [14.8, 15.7, 16.8, 18.3, 20, 21.7, 23.4],
                6: [16.3, 17.5, 18.8, 20.4, 22.6, 24.7, 26.7],
                7: [18, 19.5, 21, 22.9, 25.4, 28, 30.8],
                8: [20, 21.5, 23.3, 25.5, 28.3, 31.4, 35.5],
                9: [21.9, 23.5, 25.6, 28.1, 31.5, 35.1, 39.1],
                10: [23.9, 25.6, 28.2, 31.4, 35.1, 39.7, 44.7],
                11: [26, 28, 31, 34.9, 39.9, 44.9, 51.5],
                12: [28.2, 30.7, 34.4, 38.8, 45.1, 50.6, 58.7],
                13: [30.9, 33.8, 38, 43.4, 50.6, 56.8, 66],
                14: [34.3, 38, 42.8, 48.8, 56.6, 63.4, 73.2],
                15: [38.7, 43, 48.3, 54.8, 62.8, 70, 80.1],
                16: [44, 48.3, 54, 61, 69.6, 76.5, 84.7],
                17: [49.3, 54.6, 59.8, 66.3, 74, 80.1, 87.8]
            },
            'height': {
                0: [71.2, 72.3, 74, 75.5, 77.3, 79.7, 81.7],
                1: [71.2, 72.3, 74, 75.5, 77.3, 79.7, 81.7],
                2: [81.3, 83, 84.5, 86.8, 89, 90.8, 94],
                3: [88, 90, 92.3, 96, 99.8, 102, 104.5],
                4: [93.2, 95.5, 98.3, 102, 105.5, 108, 110.6],
                5: [98.9, 101.5, 104.4, 108.3, 112, 114.5, 117],
                6: [105, 107.7, 110.9, 115, 118.7, 121.1, 123.8],
                7: [111, 113.6, 116.8, 121.2, 125, 128, 130.6],
                8: [116.3, 119, 122.1, 126.9, 130.8, 134.5, 137],
                9: [121.5, 124.7, 125.6, 133.4, 136.3, 140.3, 143],
                10: [126.3, 129.4, 133, 137.8, 142, 146.7, 149.2],
                11: [131.3, 134.5, 138.5, 143.2, 148.3, 152.9, 156.2],
                12: [136.2, 140, 143.6, 149.2, 154.5, 159.5, 163.5],
                13: [141.8, 145.7, 149.8, 154.8, 160.6, 166, 170.7],
                14: [148.3, 152.3, 156.2, 161.2, 167.7, 172, 176.7],
                15: [154.6, 158.6, 162.5, 166.8, 173.5, 177.6, 181.6],
                16: [158.8, 163.2, 166.8, 173.3, 177.8, 182, 186.3],
                17: [162.8, 166.6, 171.6, 177.3, 181.6, 186, 188.5]
            }},

        'женский': {
            'weight': {
                0: [8, 8.5, 9, 9.6, 10.2, 10.8, 11.3],
                1: [8, 8.5, 9, 9.6, 10.2, 10.8, 11.3],
                2: [10.2, 10.8, 11.3, 12.1, 12.8, 13.5, 14.1],
                3: [11.7, 12.5, 13.3, 13.7, 15.5, 16.5, 17.6],
                4: [13, 14, 14.8, 15.9, 17.6, 18.9, 20],
                5: [14.7, 15.7, 16.6, 18.1, 19.7, 21.6, 23.2],
                6: [16.3, 17.4, 18.7, 20.4, 22.5, 24.8, 27.1],
                7: [17.9, 19.4, 20.6, 22.7, 25.3, 28.3, 31.6],
                8: [20, 21.4, 23, 25.1, 28.5, 32.1, 36.3],
                9: [21.9, 23.4, 25.5, 28.2, 32, 36.3, 41],
                10: [22.7, 25, 27.7, 30.6, 34.9, 39.8, 47.4],
                11: [24.9, 27.8, 30.7, 34.3, 38.9, 44.6, 55.2],
                12: [27.8, 31.8, 36, 40, 45.4, 51.8, 63.4],
                13: [32, 38.7, 43, 47.5, 52.5, 59, 69],
                14: [37.6, 43.8, 48.2, 52.8, 58, 64, 72.2],
                15: [42, 46.8, 50.6, 55.2, 60.4, 66.5, 74.9],
                16: [45.2, 48.4, 51.8, 56.5, 61.3, 67.6, 75.6],
                17: [46.2, 49.2, 52.9, 57.3, 61.9, 68, 76]
            },
            'height': {
                0: [70.1, 71.4, 72.8, 74.1, 75.8, 78, 79.6],
                1: [70.1, 71.4, 72.8, 74.1, 75.8, 78, 79.6],
                2: [80.1, 81.7, 83.3, 85.2, 87.5, 90.1, 92.5],
                3: [89, 90.8, 93, 95.5, 98.1, 100.7, 103.1],
                4: [94, 96.1, 98.5, 101.5, 104.1, 106.9, 109.7],
                5: [100, 102.5, 104.7, 107.5, 110.7, 113.6, 116.7],
                6: [105.3, 108, 110.9, 114.1, 118, 120.6, 124],
                7: [111.1, 113.6, 116.9, 120.8, 124.8, 128, 131.3],
                8: [116.5, 119.3, 123, 127.2, 131, 134.3, 137.7],
                9: [122, 124.8, 128.4, 132.8, 137, 140.5, 144.8],
                10: [127, 130.5, 134.3, 139, 142.9, 146.7, 151],
                11: [131.8, 136.2, 140.2, 145.3, 148.8, 153.2, 157.7],
                12: [137.6, 142.2, 145.9, 150.4, 154.2, 159.2, 163.2],
                13: [143, 148.3, 151.8, 155.5, 159.8, 163.7, 168],
                14: [147.8, 152.6, 155.4, 159, 163.6, 167.2, 171.2],
                15: [150.7, 154.4, 157.2, 161.2, 166, 169.2, 173.4],
                16: [151.6, 155.2, 158, 162.5, 166.8, 170.2, 173.8],
                17: [152.2, 155.8, 158.6, 162.8, 169.2, 170.4, 174.2]
            }
        }}
}

program_version = '2.2.69'
# print("recipe_data = {")
# for d_cat in all_data_diagnosis.get('drugs'):
#     print(f"\t\"{d_cat}\":", '{')
#     for d_name in all_data_diagnosis['drugs'].get(d_cat):
#         print(f"\t\t\"{d_name[0]}\":", '{')
#         for i in d_name[1:]:
#             if i in ("Дозировка", "Кратность", "Длительность", 'Способ применения'):
#                 break
#             elif i == 'Форма':
#                 pass
#             else:
#                 print(f"\t\t\t\"{i}\": \"\",")
#         print('\t\t},')
#     print('\t},')



render_data = dict()

data = dict()

patient = {
    'name': '',
    'birth_date': '',
    'gender': '',
    'amb_cart': '',
    'patient_district': '',
    'address': ''
}

user = {'text_size': 12,
        'doctor_name': '',
        'manager': '',
        'ped_div': '',
        'doctor_district': ''}

app_info = {
    'all_doctor_info': dict(),
    'roots': dict()
}

class ScrolledRoot(tk.Toplevel):
    def __init__(self, marker=None, func=None):
        super().__init__()
        self.scroll_x = tk.Scrollbar(self, orient=tk.HORIZONTAL)
        self.scroll_y = tk.Scrollbar(self, orient=tk.VERTICAL, width=user.get('text_size', 10) * 2)

        self.canvas = tk.Canvas(self, height=self.winfo_screenheight() - 200,
                                xscrollcommand=self.scroll_x.set,
                                yscrollcommand=self.scroll_y.set)
        self.scroll_x.config(command=self.canvas.xview)
        self.scroll_y.config(command=self.canvas.yview)

        self.bind("<Control-KeyPress>", keypress)

        self.canvas_frame = Frame(self.canvas, borderwidth=1, bg="#36566d")
        self.canvas_frame.columnconfigure(index='all', minsize=40, weight=1)
        self.canvas_frame.rowconfigure(index='all', minsize=20)

        if marker.startswith('paste_examination_cmd'):
            Label(self,
                  text=f"ФИО: {patient.get('name')}    Дата рождения: {patient.get('birth_date')}    "
                       f"Возраст: {patient['age'].get('age_txt')}\n Адрес: {patient.get('address')}",
                  font=('Comic Sans MS', user.get('text_size')),
                  bg="#36566d", fg='white').grid(row=0, column=0, columnspan=2, sticky="nswe")

            self.canvas.grid(row=1, column=0, sticky="nswe")
            self.scroll_x.grid(row=2, column=0, sticky="we")
            self.scroll_y.grid(row=1, column=1, sticky="ns")

            # self.canvas.grid(row=0, column=0, sticky="nswe")
            # self.scroll_x.grid(row=1, column=0, sticky="we")
            # self.scroll_y.grid(row=0, column=1, sticky="ns")

        else:
            self.canvas.grid(row=0, column=0, sticky="nswe")
            self.scroll_x.grid(row=1, column=0, sticky="we")
            self.scroll_y.grid(row=0, column=1, sticky="ns")


        self.canvas.create_window((0, 0), window=self.canvas_frame, anchor="nw")

        if marker == 'paste_examination_cmd_main':
            func(self, self.canvas_frame)
        elif marker == 'paste_examination_cmd_main_child':
            func(self, self.canvas_frame, child_marker=True)
        else:
            func(self.canvas_frame)
        self.canvas_frame.columnconfigure(index='all', minsize=40, weight=1)
        self.canvas_frame.rowconfigure(index='all', minsize=20)

        # self.canvas.create_window((0, 0), window=self.canvas_frame, anchor="nw")


        self.rowconfigure(0, weight=1)
        self.columnconfigure(0, weight=1)
        self.bind("<Configure>", self.resize)
        self.update_idletasks()
        self.minsize(self.winfo_width(), self.winfo_height())

        self.canvas['width'] = int(self.canvas_frame.winfo_geometry().split('x')[0])
        self.canvas.bind("<Enter>", self.on_binds)
        self.canvas.bind("<Leave>", self.off_binds)
        self.geometry('+0+0')
        self.canvas.focus()

    def resize(self, event):
        region = self.canvas.bbox(tk.ALL)
        self.canvas.configure(scrollregion=region)
        self.minsize(width=int(self.canvas_frame.winfo_width()), height=self.canvas.winfo_screenheight() - 100)

        self.canvas['width'] = int(self.canvas_frame.winfo_width())

    def on_binds(self, event=None):
        self.idbind = self.bind_all("<MouseWheel>", self.on_mousewheel)

    def off_binds(self, event=None):
        self.unbind_all("<MouseWheel>")

    def on_mousewheel(self, event):
        try:
            if os.name == 'posix':
                self.canvas.yview_scroll(int(-1 * event.delta), "units")
            else:
                self.canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

        except Exception as ex:
            print(f"Exception on_mousewheel: {ex}\nos.name: {os.name}\n"
                  f"-1 * (event.delta / 120: {int(-1 * (event.delta / 120))}\n")


def paste_examination_cmd_main(root_examination: Toplevel, examination_root: Frame, child_marker=False):

    destroy_elements = dict()
    data['examination'] = dict()
    render_data = dict()
    data['examination']['all_kb_status'] = 'open'
    data['examination']['selected_drugs'] = dict()

    selected_place = StringVar()
    selected_diagnosis = StringVar()
    selected_type_ln = StringVar()
    # err_msd_weight = StringVar()
    selected_examination_frame = StringVar()
    selected_prescription_frame = StringVar()

    selected_button = StringVar()
    selected_examination_button = StringVar()
    selected_diagnosis_button = StringVar()
    selected_recommendation_button = StringVar()

    patient_age = get_age_d_m_y(patient.get('birth_date'))
    age = patient_age.get('year')

    patient_banner = StringVar()
    animation = StringVar()

    # Label(examination_root, textvariable=patient_banner,
    #       font=('Comic Sans MS', user.get('text_size')),
    #       bg="#36566d", fg='white').pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
    Label(examination_root, textvariable=animation,
          font=('Comic Sans MS', user.get('text_size')),
          bg="#36566d", fg='white').pack(fill='both', expand=True)

    def start_action(func=None):
        def check_thread(thread):
            if thread.is_alive():

                animation.set(animation.get()[-1] + animation.get()[:-1])
                # root.update()
                root_examination.after(200, lambda: check_thread(thread))
            else:
                animation.set("")

        def run_action():
            if func:
                func()
            else:
                time.sleep(5)

        animation.set("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░")
        thread = threading.Thread(target=run_action)
        thread.start()
        check_thread(thread)

    def upload_last_data():

        found_info = data_base(command='examination__upload_last_data')
        local_info = {
            'select_past_examination': list(),
            'get_last_doc_LN': {
                "Справка ВН": list(),
                "Лист ВН": list()},
            'get_last_patient_ln': {
                "Справка ВН": list(),
                "Лист ВН": list()},
            'get_last_anthro_data': dict(),
            'LN_data': {
                'last_patient_ln': dict()},
            'anamnesis': ''
        }

        if found_info.get('get_last_doc_LN'):
            for ln_info in found_info.get('get_last_doc_LN'):
                for ln_data in ("Справка ВН", "Лист ВН"):
                    if ln_info[0].startswith(ln_data):
                        local_info['get_last_doc_LN'][ln_data].append(ln_info[0])

        if found_info.get('select_past_examination'):
            for rowid, date_time, doctor_name, status, LN_type, patient_info, examination_text, examination_key \
                    in sorted(found_info.get('select_past_examination'),
                              key=lambda i: (datetime.now() -
                                             datetime.strptime(f"{i[1]}", "%d.%m.%Y %H:%M:%S")).total_seconds()):

                local_info['select_past_examination'].append((rowid, date_time, doctor_name, status, LN_type,
                                                              patient_info, examination_text, examination_key))
                for ln_data in ("Справка ВН", "Лист ВН"):
                    if LN_type.startswith(ln_data):
                        local_info['get_last_patient_ln'][ln_data].append((date_time, LN_type))


                if child_marker:
                    if not local_info.get('get_last_anthro_data'):
                        if ('type_examination:____child__' in examination_key
                                and 'txt_weight_variable' in examination_key):
                            for string in examination_key.split('__<end!>__\n'):
                                if string.startswith('patient_anthro_data:____'):
                                    for marker in string.replace('patient_anthro_data:____', '').split("____"):
                                        if len(marker.split('__')) == 2:
                                            name, variable = marker.split('__')
                                            if name in ('txt_weight_bir_variable', 'txt_weight_variable'):
                                                local_info['get_last_anthro_data'][name] = variable
                    if not local_info.get('get_last_diagnosis_text'):
                        for string in examination_key.split('__<end!>__\n'):
                            if string.startswith('diagnosis_text:____'):
                                local_info['get_last_diagnosis_text'] = string.replace('diagnosis_text:____', '')

                else:
                    if not local_info.get('anamnesis'):
                        if (datetime.now() - datetime.strptime(date_time, "%d.%m.%Y %H:%M:%S")).total_seconds() < 2592000:
                            if 'anamnesis:____' in examination_key:
                                for string in examination_key.split('__<end!>__\n'):
                                    if string.startswith('anamnesis:____'):
                                        txt_anamnesis.insert(1.0, string.replace('anamnesis:____', ''))
                                        local_info['anamnesis'] = 'True'
                        else:
                            local_info['anamnesis'] = 'None'

                    if not local_info.get('get_last_anthro_data'):
                        if ('type_examination:____adult__' in examination_key
                                and 'txt_weight_variable' in examination_key) or (
                                'type_examination:____certificate__' in examination_key
                            and 'weight__' in examination_key
                        ):

                            for string in examination_key.split('__<end!>__\n'):
                                if string.startswith('patient_anthro'):
                                    for marker in string.split("____"):
                                        if len(marker.split('__')) == 2:
                                            name, variable = marker.split('__')
                                            if name in ('txt_weight_variable', 'weight'):
                                                local_info['get_last_anthro_data']['txt_weight_variable'] = variable


                    if 'LN_blank_data:____' in examination_key:
                        for string in examination_key.split('__<end!>__\n'):
                            if string.startswith('LN_blank_data:____'):
                                local_ln_data = {
                                    "Дата осмотра": date_time,
                                    "Фамилия": "",
                                    "Имя": "",
                                    "Отчество": "",
                                    "Дата рождения": "",
                                    "Место работы (службы, учебы)": "",
                                    "Информация про ребенка (в корешок)": ""}
                                for marker in string.replace('LN_blank_data:____', '').split("____"):
                                    if len(marker.split('__')) == 2:
                                        name, variable = marker.split('__')
                                        if name in local_ln_data:
                                            local_ln_data[name] = variable
                                if (local_ln_data.get('Фамилия')
                                        and local_ln_data.get('Дата рождения')):

                                    key = f"{local_ln_data.get('Фамилия')} " \
                                          f"{local_ln_data.get('Имя')} " \
                                          f"{local_ln_data.get('Отчество')} -- " \
                                          f"{local_ln_data.get('Дата рождения')} -- " \
                                          f"{local_ln_data.get('Место работы (службы, учебы)')} -- " \
                                          f"{local_ln_data.get('Информация про ребенка (в корешок)')}"
                                    local_info['LN_data']['last_patient_ln'][key] = local_ln_data.copy()

        for ln_data in ("Справка ВН", "Лист ВН"):
            if local_info['get_last_patient_ln'].get(ln_data):
                last_visit = min(local_info['get_last_patient_ln'].get(ln_data),
                                 key=lambda i: (datetime.now() -
                                                datetime.strptime(f"{i[0]}", "%d.%m.%Y %H:%M:%S")).total_seconds())

                local_info['get_last_patient_ln'][ln_data] = None
                if ((datetime.now() - datetime.strptime(f"{last_visit[0]}", "%d.%m.%Y %H:%M:%S")).total_seconds() / (
                        60 * 60 * 24) < 14 and last_visit[1].split('__')[-1] != 'closed'):

                    local_info['get_last_patient_ln'][ln_data] = last_visit[1]


        for marker in local_info:
            data['examination'][marker] = local_info.get(marker)

        if child_marker:
            if data['examination']['get_last_anthro_data'].get('txt_weight_bir_variable'):
                data['examination']['anthro']['txt_weight_bir_variable'].set(
                    data['examination']['get_last_anthro_data'].get('txt_weight_bir_variable'))

            if data['examination']['get_last_anthro_data'].get('txt_weight_variable'):

                data['examination']['last_txt_weight_variable'] = data['examination']['get_last_anthro_data'].get('txt_weight_variable')


        else:
            if data['examination']['get_last_anthro_data'].get('txt_weight_variable'):
                data['examination']['anthro']['txt_weight_variable'].set(
                    data['examination']['get_last_anthro_data'].get('txt_weight_variable'))
            # if data['examination'].get('anamnesis') and data['examination'].get('anamnesis') != 'None':
            #     txt_anamnesis.insert(1.0, data['examination'].get('anamnesis').strip())

    def paste_past_examination():
        def past_examination(past_examination_frame: Frame):
            def selected_past_but():
                selected_past_but_info = ''
                for but_info in past_examination_data.get('buttons'):
                    if past_examination_data['buttons'].get(but_info).get() == 1:
                        selected_past_but_info = but_info
                        past_examination_data['buttons'][but_info].set(0)
                if selected_past_but_info:
                    rowid_, command = selected_past_but_info.split('__')
                    if command in ('Удалить осмотр', 'Удалить справку'):
                        result = messagebox.askyesno(title='Удаление осмотра',
                                                     message="Удалить осмотр?")
                        if result:
                            answer, message = data_base(command='examination__delete',
                                                        insert_data=rowid_)
                            if not answer:
                                messagebox.showerror('Ошибка', f"Ошибка удаления записи: \n{message}")
                            else:
                                past_examination_data['destroy_elements'].get(rowid_).destroy()
                        past_examination_frame.focus()

                    elif command == 'Загрузить в текущий':
                        for but_marker in ('complaints', 'examination', 'prescription'):
                            for mark_ in data['examination'].get(f'{but_marker}_but'):
                                data['examination'][f'{but_marker}_but'].get(mark_).set(0)
                        if data['examination'].get('selected_drugs'):
                            data['examination']['selected_drugs'].clear()
                        txt_epicrisis_add.delete(1.0, 'end')
                        all_markers = past_examination_data['found_info'].get(rowid_). \
                            get('examination_key').split('__<end!>__\n')
                        for selected_marker in all_markers:
                            if 'selected_diagnosis_get:____' in selected_marker:
                                selected_diagnosis.set(selected_marker.split(':____')[-1])

                            elif "drugs:____" in selected_marker:
                                all_buttons = selected_marker.replace('drugs:____', '').split("____")

                                for drugs_but in all_buttons:
                                    if len(drugs_but.split('__')) == 4:
                                        select_drugs_item(drug_name=drugs_but)

                            elif "epicrisis_add_text:____" in selected_marker:
                                txt_epicrisis_add.insert(1.0, selected_marker.replace("epicrisis_add_text:____", ""))
                                txt_epicrisis_add["height"] = len(selected_marker.split('\n')) + 1


                            elif "patient_anthro_data:____" in selected_marker:
                                for marker in selected_marker.replace('patient_anthro_data:____', '').split("____"):
                                    if len(marker.split('__')) == 2:
                                        name, variable = marker.split('__')
                                        if name in data['examination'].get('anthro'):
                                            data['examination']['anthro'][name].set(variable)

                            elif "selected_place:____" in selected_marker:
                                selected_place.set(selected_marker.replace('selected_place:____', ''))

                            elif "anamnesis:____" in selected_marker:
                                txt_anamnesis.delete(1.0, 'end')
                                txt_anamnesis.insert(1.0, selected_marker.replace('anamnesis:____', ''))

                            else:
                                for but_marker in ('complaints', 'examination', 'prescription',
                                                   'diagnosis'):

                                    if f"{but_marker}:____" in selected_marker:


                                        all_buttons = selected_marker.replace(f"{but_marker}:____", '').split("__")
                                        for button in all_buttons:
                                            if button in data['examination'].get(f'{but_marker}_but'):
                                                data['examination'][f'{but_marker}_but'].get(button).set(1)

                                    elif f"{but_marker}_text:____" in selected_marker:
                                        text_inserted = selected_marker.replace(f"{but_marker}_text:____", '')

                                        if but_marker == 'complaints':
                                            txt_complaints.delete(1.0, 'end')
                                            txt_complaints.insert(1.0, text_inserted)
                                        if but_marker == 'examination':
                                            txt_examination.delete(1.0, 'end')
                                            txt_examination.insert(1.0, text_inserted)
                                        if but_marker == 'diagnosis':
                                            txt_diagnosis.delete(1.0, 'end')
                                            txt_diagnosis.insert(1.0, text_inserted)
                                        if but_marker == 'prescription':
                                            txt_prescription.delete(1.0, 'end')
                                            txt_prescription.insert(1.0, text_inserted)

                        past_examination_root.destroy()
                        examination_root.update()
                        edit_examination_kb_text()
                        edit_complaints_kb_color()

                    elif command == 'Сохранить изменения':
                        saved_text = past_examination_data['found_info'][f"{rowid_}"]. \
                            get('txt_examination_past').get(1.0, 'end').strip()
                        if saved_text == past_examination_data['found_info'][f"{rowid_}"].get("examination_text"):
                            messagebox.showinfo('Инфо', f"Осмотры совпадают\n"
                                                        f"Нет изменений для сохранения")
                        else:
                            answer, message = data_base(command='examination__delete',
                                                        insert_data=rowid_)
                            if not answer:
                                messagebox.showerror('Ошибка', f"Ошибка удаления записи: \n{message}")
                            else:

                                save_info_examination = [
                                    f"{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
                                    f"{user.get('doctor_name')}",
                                    None,
                                    past_examination_data['found_info'][f"{rowid_}"].get("ln_type"),
                                    past_examination_data['found_info'][f"{rowid_}"].get("patient_info_"),
                                    saved_text,
                                    past_examination_data['found_info'][f"{rowid_}"].get("examination_key"),
                                    None]

                                answer, message = data_base(command='examination__save',
                                                            insert_data=save_info_examination)
                                if not answer:
                                    messagebox.showerror("Ошибка", f"Ошибка сохранения осмотра\n{message}")
                                else:
                                    messagebox.showinfo('Инфо', f"Осмотр успешно сохранен")
                                    text = past_examination_data['found_info'][f"{rowid_}"].get("past_exam_text")
                                    text.set(f"Время редактирования: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}    "
                                             f"Пользователь: {user.get('doctor_name')}")
                                    past_examination_frame.update()

                        past_examination_frame.focus()

                    elif command in ('Печать А5', 'Печать А6'):
                        if command == 'Печать А5':
                            text_size = 11
                        else:
                            text_size = 8
                        exam_text = past_examination_data['found_info'][f"{rowid_}"]. \
                                        get('txt_examination_past').get(1.0, 'end')[:-1]

                        document = Document()
                        paragraph = document.add_paragraph()
                        for text in exam_text.split('\n'):
                            text = text.strip()

                            for marker in ('Жалобы:', 'Данные объективного обследования:', 'Диагноз:'):
                                if text.startswith(marker):
                                    text = text.replace(marker, '')
                                    p = paragraph.add_run(marker)
                                    r_fmt = p.font
                                    r_fmt.name = 'Times New Roman'
                                    r_fmt.size = Pt(text_size)
                                    r_fmt.bold = True
                            if text:
                                p = paragraph.add_run(f"{text}\n")
                                r_fmt = p.font
                                r_fmt.name = 'Times New Roman'
                                r_fmt.size = Pt(text_size)

                        sections = document.sections
                        for section in sections:
                            section.top_margin = Cm(1.5)
                            section.bottom_margin = Cm(1.5)
                            section.left_margin = Cm(1.5)
                            section.right_margin = Cm(1.5)
                            if command == 'Печать А5':
                                section.page_height = Cm(14.8)
                                section.page_width = Cm(21)
                            else:
                                section.page_height = Cm(10.5)
                                section.page_width = Cm(14.8)

                        doc_name = f'.{os.sep}generated{os.sep}осмотр.docx'
                        doc_name = save_document(doc=document, doc_name=doc_name)
                        run_document(doc_name)

            past_examination_data = dict()
            past_examination_data['buttons'] = dict()
            past_examination_data['found_info'] = dict()
            past_examination_data['destroy_elements'] = dict()
            past_examination_data['frame_info'] = dict()

            past_examination_connect_status = StringVar()
            Label(master=past_examination_frame, textvariable=past_examination_connect_status,
                  font=('Comic Sans MS', user.get('text_size')), bg="#36566d", fg='white').pack(fill='both',
                                                                                                expand=True)

            past_examination_connect_status.set("Подключение к базе данных")
            past_examination_frame.update()
            found_info = data['examination'].get('select_past_examination')
            if found_info:
                past_examination_connect_status.set("Подключение к базе данных: успешно")
            past_examination_frame.update()

            if not found_info:
                past_examination_connect_status.set(f"{past_examination_connect_status.get()}\n"
                                                    f"История о прошлых осмотрах пациента пуста")
            else:
                for info in found_info:
                    local_frame = Frame(past_examination_frame, borderwidth=1, relief="solid", padx=3, pady=3)
                    rowid, date_time, doctor_name, status, ln_type, patient_info_, examination_text, examination_key = info

                    past_examination_data['destroy_elements'][f"{rowid}"] = local_frame

                    past_examination_data['found_info'][f"{rowid}"] = {
                        "date_time": date_time,
                        "doctor_name": doctor_name,
                        "ln_type": ln_type,
                        "patient_info_": patient_info_,
                        "examination_text": examination_text,
                        "examination_key": examination_key
                    }
                    past_exam_text = StringVar()
                    past_examination_data['found_info'][f"{rowid}"]['past_exam_text'] = past_exam_text
                    past_exam_text.set(f"Время редактирования: {date_time}    Пользователь: {doctor_name}    Статус: {status}")
                    Label(master=local_frame, width=100,
                          textvariable=past_exam_text,
                          justify='left',
                          font=('Comic Sans MS', user.get('text_size')),
                          bg='white').pack(fill='both', expand=True, side="top")
                    height = 1
                    for string in examination_text.split('\n'):
                        height += (1 + len(string) // 100)

                    txt_examination_past = ScrolledText(local_frame, width=100, height=height,
                                                        font=('Comic Sans MS', user.get('text_size')),
                                                        wrap="word")

                    txt_examination_past.insert(1.0, f"{examination_text}\n")
                    txt_examination_past.pack(fill='both', expand=True, side="top")
                    past_examination_data['found_info'][f"{rowid}"]['txt_examination_past'] = txt_examination_past
                    # counter = 0
                    # for text in examination_text.split(" "):
                    #     counter += len(text)
                    #     if '\n' in text:
                    #         counter = 0
                    #     if counter >= 90:
                    #         past_exam_text += '\n'
                    #         counter = 0
                    #
                    #     past_exam_text += text + ' '
                    # past_exam_text += f"\nЛН: {ln_type}\nВрач: {doctor_name}".replace('_', ' ')
                    # Label(master=local_frame, width=100,
                    #       text=past_exam_text,
                    #       justify='left',
                    #       font=('Comic Sans MS', user.get('text_size')),
                    #       bg='white').pack(fill='both', expand=True, side="top")

                    if examination_key.startswith('type_examination:____certificate__'):
                        if doctor_name == user.get('doctor_name'):
                            mark = 'Удалить справку'
                            past_examination_data['buttons'][f"{rowid}__{mark}"] = IntVar()
                            Checkbutton(local_frame, text=mark,
                                        font=('Comic Sans MS', user.get('text_size')),
                                        onvalue=1, offvalue=0,
                                        variable=past_examination_data['buttons'].get(f"{rowid}__{mark}"),
                                        command=selected_past_but,
                                        indicatoron=False,
                                        selectcolor='#77f1ff').pack(fill='both', expand=True)
                    else:
                        for mark in ('Удалить осмотр',
                                     'Загрузить в текущий',
                                     "Печать А5",
                                     "Печать А6",
                                     "Сохранить изменения"):
                            past_examination_data['buttons'][f"{rowid}__{mark}"] = IntVar()

                            if mark not in ("Сохранить изменения", 'Удалить осмотр') \
                                    or doctor_name == user.get('doctor_name'):
                                Checkbutton(local_frame, text=mark,
                                            font=('Comic Sans MS', user.get('text_size')),
                                            onvalue=1, offvalue=0,
                                            variable=past_examination_data['buttons'].get(f"{rowid}__{mark}"),
                                            command=selected_past_but,
                                            indicatoron=False,
                                            selectcolor='#77f1ff').pack(fill='both', expand=True, side="left")


                    local_frame.columnconfigure(index='all', minsize=40, weight=1)
                    local_frame.rowconfigure(index='all', minsize=20)
                    local_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)

        past_examination_root = ScrolledRoot(marker='past_examination', func=past_examination)
        past_examination_root.title(f"Осмотры пациента "
                                    f"{patient.get('name').split()[0]} "
                                    f"{patient.get('name').split()[1]} "
                                    f"{patient.get('birth_date')}")
        past_examination_root.geometry('+0+0')

        past_examination_root.mainloop()

    def change_all_kb_status():
        if data['examination'].get('all_kb_status') == 'open':
            for marker in ('complaints', 'examination', 'prescription'):
                if data['examination'].get(f'open_{marker}_kb') != 'closed':
                    if marker == 'complaints':
                        change_complaints_kb_status()
                    elif marker == 'examination':
                        change_examination_kb_status()
                    elif marker == 'prescription':
                        change_prescription_kb_status()
            data['examination']['all_kb_status'] = 'closed'
            button_change_all_kb_status['text'] = 'Открыть\nвсе\nклавиатуры'

        elif data['examination'].get('all_kb_status') == 'closed':
            for marker in ('complaints', 'examination', 'prescription'):
                if not data['examination'].get(f'open_{marker}_kb') == 'open':
                    if marker == 'complaints':
                        change_complaints_kb_status()
                    elif marker == 'examination':
                        change_examination_kb_status()
                    elif marker == 'prescription':
                        change_prescription_kb_status()
            data['examination']['all_kb_status'] = 'open'
            button_change_all_kb_status['text'] = 'Скрыть\nвсе\nклавиатуры'

        root_examination.update()

    def create_examination_doc(doc_size=None):

        type_ln = selected_type_ln.get()
        if type_ln in ('Лист ВН', 'Справка ВН') and not txt_ln_num.get():
            messagebox.showerror('Ошибка!', 'Не указан номер документа ВН!')
            txt_ln_num.focus()
        else:
            render_data.clear()

            date_time_str = txt_date_time.get().strip()
            if date_time_str:
                render_data['date_time'] = f"Дата осмотра: {date_time_str}\n"
            else:
                render_data['date_time'] = ""

            render_data['patient_info'] = f"ФИО: {patient.get('name')}\t" \
                                          f"Дата рождения: {patient.get('birth_date')}\t" \
                                          f"Возраст: {patient['age'].get('age_txt')}\n" \
                                          f"Место осмотра: {selected_place.get()}"
            if selected_place.get() == 'в поликлинике':
                render_data['patient_info'] = f"{render_data.get('patient_info')}\tна приеме с {combo_company.get()}"
            render_data['patient_info'] = f"{render_data.get('patient_info')}    {patient.get('patient_district')}-й уч"

            render_data['complaints'] = f"{txt_complaints.get(1.0, 'end').strip()}"
            examination_text = txt_examination.get(1.0, 'end').replace('\n', ' ').replace('  ', ' ').strip()
            render_data['examination'] = f" {examination_text}"
            render_data['diagnosis'] = f"{txt_diagnosis.get(1.0, 'end').strip()}"
            render_data['prescription'] = f"{txt_prescription.get(1.0, 'end').strip()}"

            add_info = ''
            if type_ln == 'Уход обеспечен':
                add_info += "Уход обеспечен\n"
            elif type_ln in ('Лист ВН', 'Справка ВН'):
                if data['examination'].get('ln_closed'):
                    if type_ln == 'Лист ВН':
                        add_info += f"{type_ln} № {txt_ln_num.get()} закрыт к труду c {txt_ln_until.get()}\n"
                    else:
                        add_info += f"{type_ln} № {txt_ln_num.get()} закрыта к труду c {txt_ln_until.get()}\n"
                else:
                    add_info += f"{type_ln} № {txt_ln_num.get()} c {txt_ln_from.get()} по {txt_ln_until.get()}\n"
            if txt_second_examination.get():
                add_info += f"Повторный осмотр: {txt_second_examination.get()}\n"
                render_data['second_exam'] = f"Повторный осмотр: {txt_second_examination.get()}"
            else:
                render_data['second_exam'] = ''
            # add_info += f"Врач-педиатр: {user.get('doctor_name')}"

            render_data['doctor_name'] = user.get('doctor_name')
            render_data['add_info'] = add_info.strip()

            active_but = ""
            if child_marker:
                active_but += "type_examination:____child__<end!>__\n"
            else:
                active_but += "type_examination:____adult__<end!>__\n"
            if selected_diagnosis.get():
                active_but += f"selected_diagnosis_get:____{selected_diagnosis.get()}__<end!>__\n"

            active_but += f"selected_place:____{selected_place.get()}__<end!>__\n"

            for mark in ('complaints', 'examination', 'prescription'):
                active_but += f'{mark}:__'
                for but in data['examination'].get(f'{mark}_but'):
                    if data['examination'][f'{mark}_but'].get(but).get() == 1:
                        active_but += f'__{but}'
                active_but += '__<end!>__\n'

            local_drugs_text = ''
            for drug_category in data['examination'].get('selected_drugs', []):
                for drug_name in data['examination']['selected_drugs'].get(drug_category, []):
                    for mark_flag in data['examination']['selected_drugs'][drug_category].get(drug_name, []):
                        mark = data['examination']['selected_drugs'][drug_category][drug_name].get(mark_flag)
                        if mark:
                            if isinstance(mark, list):
                                for mark_2 in mark:
                                    local_drugs_text += f"____{drug_category}__{drug_name}__{mark_flag}__{mark_2}"
                            else:
                                local_drugs_text += f"____{drug_category}__{drug_name}__{mark_flag}__{mark}"
            if local_drugs_text:
                active_but += f"drugs:{local_drugs_text}__<end!>__\n"
            if data['examination']['anthro']['patient_anthro_data'].get():
                patient_anthro_data_loc = ''
                patient_anthro_data_but_loc = 'patient_anthro_data:____'

                npr_flag = False
                for mark in local_data_anthro:


                    for name, variable in local_data_anthro.get(mark):
                        select_name = data['examination']['anthro'][variable].get()
                        if select_name:
                            if mark == 'anal' and not npr_flag:
                                patient_anthro_data_loc += '\nНПР: \n'
                                npr_flag = True

                            patient_anthro_data_loc += f"{name}".replace('_', select_name)
                            patient_anthro_data_but_loc += f"{variable}__{select_name}____".replace(',', '.')
                            if child_marker and doc_size == 'а5_child_disp':
                                patient_anthro_data_loc += '\n'
                            else:
                                patient_anthro_data_loc += '  '
                render_data['patient_anthro_data'] = f"{patient_anthro_data_loc}".strip()
                active_but = f"{active_but}" \
                             f"{patient_anthro_data_but_loc}__<end!>__\n"

                active_but += f"drugs:{local_drugs_text}__<end!>__\n"
            render_data['epicrisis_add_text'] = txt_epicrisis_add.get(1.0, 'end').strip()
            if (type_ln in ('Лист ВН', 'Справка ВН')
                    and data['examination']['LN_data'].get('current_data')
                    and data['examination']['LN_data']['current_data'].get('save')):
                local_ln_data = ''
                for marker in ('Фамилия', 'Имя', 'Отчество',
                               'Дата рождения', 'Место работы (службы, учебы)',
                               'Информация про ребенка (в корешок)'):
                    local_ln_data += f"____{marker}__{data['examination']['LN_data']['current_data'].get(marker).get().strip()}"
                active_but += f"LN_blank_data:{local_ln_data}__<end!>__\n"

            active_but = f"{active_but}" \
                         f"complaints_text:____{render_data.get('complaints')}__<end!>__\n" \
                         f"examination_text:____{render_data.get('examination')}__<end!>__\n" \
                         f"diagnosis_text:____{render_data.get('diagnosis')}__<end!>__\n" \
                         f"prescription_text:____{render_data.get('prescription')}__<end!>__\n" \
                         f"epicrisis_add_text:____{render_data.get('epicrisis_add_text')}__<end!>__\n"

            anamnesis = txt_anamnesis.get(1.0, 'end').strip()
            if not child_marker:
                active_but = f"{active_but}" \
                             f"anamnesis:____{anamnesis}__<end!>__\n"
                if anamnesis:
                    anamnesis = f"\nАнамнез заболевания: {anamnesis}"
            render_data['anamnesis'] = anamnesis


            patient_anthro_data = render_data.get('patient_anthro_data', '').replace('\n', '  ')
            active_examination = f"{render_data.get('date_time')}{render_data.get('patient_info')}\n" \
                                 f"{render_data.get('epicrisis_add_text')}\n" \
                                 f"Жалобы: {render_data.get('complaints')}{anamnesis}\n" \
                                 f"Данные объективного обследования: " \
                                 f"{patient_anthro_data}\n" \
                                 f"{render_data.get('examination')}\n" \
                                 f"{render_data.get('diagnosis')}\n" \
                                 f"{render_data.get('prescription')}\n" \
                                 f"{render_data.get('add_info')}\n" \
                                 f"Врач-педиатр: {user.get('doctor_name')}"

            if type_ln in ('Лист ВН', 'Справка ВН'):
                num_ln = ''
                for word in txt_ln_num.get().strip():
                    if not word.isdigit():
                        num_ln += word
                num_ln += '_'
                for word in txt_ln_num.get().strip():
                    if word.isdigit():
                        num_ln += word
                if data['examination'].get('ln_closed'):
                    ln_data = f"{type_ln}__{num_ln}__closed"
                else:
                    ln_data = f"{type_ln}__{num_ln}__{txt_ln_from.get().strip()}__{txt_ln_until.get().strip()}"

            else:
                ln_data = type_ln

            save_info_examination = [
                f"{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
                f"{user.get('doctor_name')}",
                'loc',
                ln_data,
                f"{patient.get('name').strip()}__{patient.get('birth_date').strip()}",
                active_examination,
                active_but,
                None]
            if doc_size:
                render_data['diagnosis'] = render_data.get('diagnosis', '').replace('Диагноз:', '')

                doc = DocxTemplate(f".{os.sep}example{os.sep}certificate{os.sep}осмотр_педиатра_{doc_size}.docx")
                doc.render(render_data)
                doc_name = f".{os.sep}generated{os.sep}{patient.get('name').split()[0]}_осмотр__" \
                           f"{datetime.now().strftime('%d_%m_%Y_%H_%M')}.docx"
                doc_name = save_document(doc=doc, doc_name=doc_name)
                run_document(doc_name)

            answer, message = data_base(command='examination__save',
                                        insert_data=save_info_examination)
            if not answer:
                messagebox.showerror("Ошибка", f"Ошибка сохранения осмотра\n{message}")

            render_data.clear()
            data.clear()
            root_examination.destroy()
            data_base(command="statistic_write",
                      insert_data="Осмотр")

    def paste_hr_br():
        indicators = {
            '0-1': {
                'br': (26, 28),
                'hr': (104, 112),
                'bp': (90, 100, 60, 70)},

            '0-3': {
                'br': (24, 28),
                'hr': (96, 110),
                'bp': (90, 100, 60, 70)},
            '3-6': {
                'br': (22, 28),
                'hr': (80, 100),
                'bp': (96, 110, 60, 70)},
            '6-12': {
                'br': (20, 22),
                'hr': (70, 90),
                'bp': (100, 110, 60, 75)},
            '>12': {
                'br': (18, 22),
                'hr': (70, 80),
                'bp': (110, 120, 70, 78)},
        }
        if age <= 1:
            indicator = indicators['0-1']
        elif age <= 3:
            indicator = indicators['0-3']
        elif age <= 6:
            indicator = indicators['3-6']
        elif age <= 12:
            indicator = indicators['6-12']
        else:
            indicator = indicators['>12']

        render_data['br'] = random.randrange(start=indicator['br'][0], stop=indicator['br'][1], step=2)
        render_data['hr'] = random.randrange(start=indicator['hr'][0], stop=indicator['hr'][1], step=2)

    def paste_frame_diagnosis():
        def select_diagnosis():
            data['examination']['diagnosis'] = selected_diagnosis.get()

            for mark_ in data['examination'].get('complaints_but'):
                data['examination']['complaints_but'].get(mark_).set(0)
            for mark_ in data['examination'].get('examination_but'):
                data['examination']['examination_but'].get(mark_).set(0)
            for mark_ in data['examination'].get('prescription_but'):
                data['examination']['prescription_but'].get(mark_).set(0)

            if data['examination'].get('selected_drugs'):
                data['examination']['selected_drugs'].clear()

            if child_marker:
                if selected_diagnosis.get() in ('Врачебно-сестринский патронаж', 'Патронаж'):
                    for mark_ in data['examination'].get('anthro', []):
                        if mark_.startswith('txt_anal_'):
                            data['examination']['anthro'].get(mark_).set('')
                else:
                    patient_age_month = patient_age.get('month')
                    if patient_age.get('year') > 0:
                        patient_age_month = 12

                    for mark_ in data['examination'].get('anthro', []):
                        if mark_.startswith('txt_anal_'):
                            data['examination']['anthro'].get(mark_).set(f"{patient_age_month} мес.")


            for complaints_but in all_diagnosis.get(selected_diagnosis.get()).get("complaints"):
                complaints_list = all_diagnosis.get(selected_diagnosis.get()).get("complaints").get(
                    complaints_but)
                if isinstance(complaints_list, list):
                    for complaints in complaints_list:
                        if f"{complaints_but}_{complaints}" in data['examination'].get('complaints_but'):
                            data['examination']['complaints_but'][f"{complaints_but}_{complaints}"].set(1)
                else:
                    if complaints_but in data['examination'].get('complaints_but'):
                        data['examination']['complaints_but'][complaints_but].set(1)

            for examination_but in all_diagnosis.get(selected_diagnosis.get()).get("examination"):
                examination_list = all_diagnosis.get(selected_diagnosis.get()).get("examination").get(
                    examination_but)
                if isinstance(examination_list, list):
                    for examination in examination_list:
                        if f"{examination_but}_{examination}" in data['examination'].get('examination_but'):
                            data['examination']['examination_but'][f"{examination_but}_{examination}"].set(1)
                else:
                    if examination_but in data['examination'].get('examination_but'):
                        data['examination']['examination_but'][examination_but].set(1)

            for prescription_but in all_diagnosis.get(selected_diagnosis.get()).get("prescription"):
                prescription_list = all_diagnosis.get(selected_diagnosis.get()).get("prescription").get(
                    prescription_but)
                if isinstance(prescription_list, list):
                    for prescription in prescription_list:
                        if f"{prescription_but}_{prescription}" in data['examination'].get('prescription_but'):
                            data['examination']['prescription_but'][f"{prescription_but}_{prescription}"].set(1)
                else:
                    if prescription_but in data['examination'].get('prescription_but'):
                        data['examination']['prescription_but'][prescription_but].set(1)

            for drugs_but in all_diagnosis.get(selected_diagnosis.get()).get("drugs", []):

                if len(drugs_but.split('__')) == 4:
                    select_drugs_item(drug_name=drugs_but)


            txt_complaints.delete(1.0, 'end')
            txt_complaints.insert(1.0, all_diagnosis.get(selected_diagnosis.get()).get("complaints_text", ''))

            txt_examination.delete(1.0, 'end')
            txt_examination.insert(1.0, all_diagnosis.get(selected_diagnosis.get()).get("examination_text", ''))

            txt_prescription.delete(1.0, 'end')
            txt_prescription.insert(1.0, all_diagnosis.get(selected_diagnosis.get()).get("prescription_text", ''))

            txt_epicrisis_add.delete(1.0, 'end')

            if "Проведена беседа: Безопасность ____" in all_diagnosis.get(selected_diagnosis.get()).get("epicrisis_add_text", ''):
                conversation = ("Ответственность родителей за детей",
                                "Безопасность сна",
                                "Безопасность в кроватке",
                                "Безопасность при купании",
                                "Безопасность детской одежды",
                                "Отравления детей",
                                "Домашние животные и безопасность ребёнка")

                txt_epicrisis_add.insert(1.0, all_diagnosis.get(selected_diagnosis.get()).get("epicrisis_add_text", '').replace('Проведена беседа: Безопасность ____', f"Проведена беседа: {random.choice(conversation)}"))
            else:
                txt_epicrisis_add.insert(1.0, all_diagnosis.get(selected_diagnosis.get()).get("epicrisis_add_text", ''))
            txt_epicrisis_add["height"] = len(all_diagnosis.get(selected_diagnosis.get()).get("epicrisis_add_text", '\n').split('\n')) + 1


            if all_diagnosis.get(selected_diagnosis.get()).get("selected_place"):
                selected_place.set(all_diagnosis.get(selected_diagnosis.get()).get("selected_place"))

            txt_diagnosis.delete(1.0, 'end')
            if child_marker and data['examination'].get('get_last_diagnosis_text'):
                txt_diagnosis.insert(1.0, data['examination'].get('get_last_diagnosis_text'))

            elif all_diagnosis.get(selected_diagnosis.get()).get("diagnosis_text"):
                txt_diagnosis.insert(1.0, all_diagnosis.get(selected_diagnosis.get()).get("diagnosis_text"))
            else:
                txt_diagnosis.insert(1.0, f'Диагноз: {selected_diagnosis.get()} ')

            edit_examination_kb_text()
            if not data['examination'].get('all_kb_status'):
                change_all_kb_status()
            else:
                root_examination.update()

        loc_data = all_data_diagnosis.get('diagnosis')
        if child_marker:
            loc_data = all_data_diagnosis.get('diagnosis_child')


        label_diagnosis = Label(master=frame_diagnosis, text=f"{loc_data[0]}",
                                font=('Comic Sans MS', user.get('text_size')), bg='white')
        label_diagnosis.pack(fill='both', expand=True)
        frame_diagnosis_1 = Frame(frame_diagnosis, borderwidth=1)
        row, col = 0, 0

        for mark in loc_data[1:]:
            btn = Radiobutton(frame_diagnosis_1, text=mark,
                              font=('Comic Sans MS', user.get('text_size')),
                              value=mark, variable=selected_diagnosis, command=select_diagnosis,
                              indicatoron=False, selectcolor='#77f1ff')
            btn.grid(row=row, column=col, sticky='ew')
            col += 1

        frame_diagnosis_1.columnconfigure(index='all', minsize=40, weight=1)
        frame_diagnosis_1.rowconfigure(index='all', minsize=20)
        frame_diagnosis_1.pack(fill='both', expand=True)

        frame_diagnosis.columnconfigure(index='all', minsize=40, weight=1)
        frame_diagnosis.rowconfigure(index='all', minsize=20)
        frame_diagnosis.pack(fill='both', expand=True, side=tk.LEFT)

    def paste_frame_date_time():
        label_date_time = Label(master=frame_date_time, text="Дата и время осмотра:",
                                font=('Comic Sans MS', user.get('text_size')), bg='white')
        label_date_time.pack(fill='both', expand=True)
        txt_date_time.pack(fill='both', expand=True)
        txt_date_time.insert(0, datetime.now().strftime("%d.%m.%Y %H:%M"))

        frame_date_time.columnconfigure(index='all', minsize=40, weight=1)
        frame_date_time.rowconfigure(index='all', minsize=20)
        frame_date_time.pack(fill='both', expand=True, side=tk.LEFT)

    def my_saved_diagnosis():

        def delete_my_diagnosis():

            found_diagnosis = user.get('my_saved_diagnosis')
            if not found_diagnosis:
                messagebox.showerror('Ошибка!', f'История о сохраненных осмотрах пуста!\n')
                examination_root.focus()

            else:
                def delete_my_diagnosis_root(delete_my_diagnosis_root_main: Frame):
                    def select_delete_diagnosis():
                        answer, mess = data_base(command='examination__delete_my_diagnosis',
                                                 delete_data=selected_delete_diagnosis.get())
                        if answer:
                            messagebox.showinfo('Инфо', f'Осмотр успешно удален')
                            delete_my_diagnosis_root_main.focus()

                            destroy_elements['delete_my_diagnosis'][f"{selected_delete_diagnosis.get()}"].destroy()



                    selected_delete_diagnosis = StringVar()
                    destroy_elements['delete_my_diagnosis'] = dict()

                    for diagnosis_, examination_key_ in found_diagnosis:
                        frame_loc = Frame(delete_my_diagnosis_root_main, borderwidth=1, relief="solid", padx=3, pady=3)
                        destroy_elements['delete_my_diagnosis'][f"{diagnosis_}"] = frame_loc
                        text = f'Имя шаблона: {diagnosis_}\n'
                        for info in examination_key_.split('__<end!>__\n'):
                            if 'complaints_text:____' in info:
                                for i in info.replace('complaints_text:____', 'Жалобы: ').split():
                                    if len(text.split('\n')[-1]) > 90:
                                        text += '\n'
                                    text += f"{i} "
                                text += "\n"
                            if 'examination_text:____' in info:
                                for i in info.replace('examination_text:____', 'Осмотр: ').split():
                                    if len(text.split('\n')[-1]) > 90:
                                        text += '\n'
                                    text += f"{i} "
                                text += "\n"
                            if 'diagnosis_text:____' in info:
                                for i in info.replace('diagnosis_text:____', 'Диагноз: ').split():
                                    if len(text.split('\n')[-1]) > 90:
                                        text += '\n'
                                    text += f"{i} "
                                text += "\n"
                            if 'prescription_text:____' in info:
                                for i in info.replace('prescription_text:____', 'Рекомендации: ').split():
                                    if len(text.split('\n')[-1]) > 90:
                                        text += '\n'
                                    text += f"{i} "
                                text += "\n"

                        Label(master=frame_loc, text=text, justify="left",
                              font=('Comic Sans MS', user.get('text_size')),
                              bg='white').pack(fill='both', expand=True)

                        Radiobutton(master=frame_loc, text=f"Удалить {diagnosis_}",
                                    font=('Comic Sans MS', user.get('text_size')),
                                    value=f"{diagnosis_}", variable=selected_delete_diagnosis,
                                    command=select_delete_diagnosis,
                                    indicatoron=False, selectcolor='#77f1ff').pack(fill='both', expand=True)

                        frame_loc.pack(fill='both', expand=True)

                delete_diagnosis_root = ScrolledRoot(marker='delete_diagnosis_root', func=delete_my_diagnosis_root)
                delete_diagnosis_root.title(f"Удаление моих осмотров")
                delete_diagnosis_root.geometry('+0+0')
                delete_diagnosis_root.mainloop()

        def select_my_saved_diagnosis():
            my_selected_diagnosis = \
                data['examination']['my_saved_diagnosis'].get(selected_diagnosis.get().replace('my__', ''))

            for but_marker in ('complaints', 'examination', 'prescription'):
                for mark_ in data['examination'].get(f'{but_marker}_but'):
                    data['examination'][f'{but_marker}_but'].get(mark_).set(0)
            if data['examination'].get('selected_drugs'):
                data['examination']['selected_drugs'].clear()
            txt_epicrisis_add.delete(1.0, 'end')

            for selected_marker in my_selected_diagnosis.split('__<end!>__\n'):
                if 'selected_diagnosis_get:____' in selected_marker:
                    selected_diagnosis.set(selected_marker.split(':____')[-1])
                elif "selected_place:____" in selected_marker:
                    selected_place.set(selected_marker.replace('selected_place:____', ''))

                elif "drugs:____" in selected_marker:
                    all_buttons = selected_marker.replace('drugs:____', '').split("____")

                    for drugs_but in all_buttons:
                        if len(drugs_but.split('__')) == 4:
                            select_drugs_item(drug_name=drugs_but)

                #
                # elif "drugs:____" in selected_marker:
                #     if not data['examination'].get('selected_drugs'):
                #         data['examination']['selected_drugs'] = dict()
                #
                #     all_buttons = selected_marker.replace('drugs:____', '').split("____")
                #     for button in all_buttons:
                # if len(drugs_but.split('__')) == 4:
                #         if button.split('__') == 4:
                #             drug_category, drug_name, mark_flag, mark = button.split('__')
                #             if not data['examination']['selected_drugs'].get(drug_category):
                #                 data['examination']['selected_drugs'][drug_category] = dict()
                #             if not data['examination']['selected_drugs'][drug_category].get(
                #                     drug_name):
                #                 data['examination']['selected_drugs'][drug_category][
                #                     drug_name] = dict()
                #
                #             if mark_flag == "Способ применения":
                #                 if not data['examination']['selected_drugs'][drug_category][
                #                     drug_name].get(mark_flag):
                #                     data['examination']['selected_drugs'][drug_category][
                #                         drug_name][mark_flag] = list()
                #                 data['examination']['selected_drugs'][drug_category][
                #                     drug_name][mark_flag].append(mark)
                #
                #             else:
                #                 data['examination']['selected_drugs'][drug_category][drug_name][
                #                     mark_flag] = mark
                elif "epicrisis_add_text:____" in selected_marker:
                    txt_epicrisis_add.insert(1.0, selected_marker.replace("epicrisis_add_text:____", ""))
                    txt_epicrisis_add["height"] = len(selected_marker.split('\n')) + 1


                else:
                    for but_marker in ('complaints', 'examination', 'prescription', 'diagnosis'):
                        if f"{but_marker}:____" in selected_marker:
                            all_buttons = selected_marker.replace(f"{but_marker}:____", '').split("__")
                            for button in all_buttons:
                                if button in data['examination'].get(f'{but_marker}_but'):
                                    data['examination'][f'{but_marker}_but'].get(button).set(1)


                        elif f"{but_marker}_text:____" in selected_marker:
                            text_inserted = selected_marker.replace(f"{but_marker}_text:____", '')

                            if but_marker == 'complaints':
                                txt_complaints.delete(1.0, 'end')
                                txt_complaints.insert(1.0, text_inserted)
                            if but_marker == 'examination':
                                txt_examination.delete(1.0, 'end')
                                txt_examination.insert(1.0, text_inserted)
                            if but_marker == 'diagnosis':
                                txt_diagnosis.delete(1.0, 'end')
                                txt_diagnosis.insert(1.0, text_inserted)
                            if but_marker == 'prescription':
                                txt_prescription.delete(1.0, 'end')
                                txt_prescription.insert(1.0, text_inserted)

                edit_examination_kb_text()
                edit_complaints_kb_color()

        def saved_new_diagnosis():
            def final_save_new_diagnosis():
                if data_base(command='save_new_diagnosis',
                             insert_data=[user.get('doctor_name'), new_diagnosis_name.get(), render_text]):
                    messagebox.showinfo('Инфо', f'Осмотр успешно сохранен')
                    saved_new_diagnosis_root.destroy()
                    root_examination.destroy()
                else:
                    messagebox.showerror('Ошибка!', f'Ошибка при сохранении!')

            if not new_diagnosis_name.get():
                messagebox.showerror('Ошибка!', 'Не указано имя осмотра для сохранения!')
                new_diagnosis_name.focus()
            else:
                saved_new_diagnosis_root = Toplevel()
                saved_new_diagnosis_root.title('Проверка осмотра')
                saved_new_diagnosis_root.config(bg='white')

                text = f"Имя осмотра: {new_diagnosis_name.get()}\n"
                render_text = ''
                if selected_place.get():
                    text += f"Место осмотра: {selected_place.get()}\n"
                    render_text += f"selected_place:____{selected_place.get()}__<end!>__\n"
                text += f"Дополнительная информация: {txt_epicrisis_add.get(1.0, 'end').strip()}\n"
                for mark in ('complaints', 'examination', 'prescription'):
                    render_text += f'{mark}:__'
                    # text += f"{mark}: ".replace('complaints', 'Жалобы (кнопки)') \
                    #     .replace('examination', 'Осмотр (кнопки)') \
                    #     .replace('prescription', 'Назначения (кнопки)')
                    for but in data['examination'].get(f'{mark}_but'):

                        if data['examination'][f'{mark}_but'].get(but).get() == 1:
                            render_text += f'__{but}'

                    render_text += '__<end!>__\n'
                local_drugs_text = ''
                for drug_category in data['examination'].get('selected_drugs', []):
                    for drug_name in data['examination']['selected_drugs'].get(drug_category, []):
                        for mark_flag in data['examination']['selected_drugs'][drug_category].get(drug_name, []):
                            mark = data['examination']['selected_drugs'][drug_category][drug_name].get(mark_flag)
                            if mark:
                                if isinstance(mark, list):
                                    for mark_2 in mark:
                                        local_drugs_text += f"____{drug_category}__{drug_name}__{mark_flag}__{mark_2}"
                                else:
                                    local_drugs_text += f"____{drug_category}__{drug_name}__{mark_flag}__{mark}"
                if local_drugs_text:
                    render_text += f"drugs:{local_drugs_text}__<end!>__\n"
                examination_text = txt_examination.get(1.0, 'end').replace('\n', ' ').replace('  ', ' ').strip()
                render_text += f"complaints_text:____{txt_complaints.get(1.0, 'end').strip()}__<end!>__\n" \
                               f"examination_text:____{examination_text}__<end!>__\n" \
                               f"diagnosis_text:____{txt_diagnosis.get(1.0, 'end').strip()}__<end!>__\n" \
                               f"prescription_text:____{txt_prescription.get(1.0, 'end').strip()}__<end!>__\n" \
                               f"epicrisis_add_text:____{txt_epicrisis_add.get(1.0, 'end').strip()}__<end!>__\n"


                render_text = render_text.replace("'", '').replace("\"", '')
                if txt_complaints.get(1.0, 'end').strip():
                    text += '\nЖалобы: '
                    for word in txt_complaints.get(1.0, 'end').strip().split():
                        if len(text.split('\n')[-1]) > 100:
                            text += '\n'
                        text += word + " "
                if txt_examination.get(1.0, 'end').strip():
                    text += '\nОсмотр: '
                    for word in txt_examination.get(1.0, 'end').strip().split():
                        if len(text.split('\n')[-1]) > 100:
                            text += '\n'
                        text += word + " "
                if txt_diagnosis.get(1.0, 'end').strip():
                    text += '\nДиагноз: '
                    for word in txt_diagnosis.get(1.0, 'end').strip().split():
                        if len(text.split('\n')[-1]) > 100:
                            text += '\n'
                        text += word + " "
                if txt_prescription.get(1.0, 'end').strip():
                    text += '\nНазначения: '
                    for word in txt_prescription.get(1.0, 'end').strip().split():
                        if len(text.split('\n')[-1]) > 100:
                            text += '\n'
                        text += word + " "

                Label(master=saved_new_diagnosis_root, text=text, justify="left",
                      font=('Comic Sans MS', user.get('text_size')),
                      bg='white').pack(fill='both', expand=True)
                Button(saved_new_diagnosis_root, text='Сохранить',
                       command=final_save_new_diagnosis,
                       font=('Comic Sans MS', user.get('text_size'))).pack(fill='both', expand=True)

                saved_new_diagnosis_root.mainloop()

        def add_frame_new_diagnosis():

            if not data['examination'].get('add_frame_new_diagnosis'):
                data['examination']['add_frame_new_diagnosis'] = 'closed'

            if data['examination'].get('add_frame_new_diagnosis') == "closed":
                data['examination']['add_frame_new_diagnosis'] = 'open'

                frame_new_my_diagnosis.columnconfigure(index='all', minsize=40, weight=1)
                frame_new_my_diagnosis.rowconfigure(index='all', minsize=20)
                frame_new_my_diagnosis.pack(fill='both', expand=True, before=frame_my_saved_diagnosis, side="bottom")

            elif data['examination'].get('add_frame_new_diagnosis') == "open":
                data['examination']['add_frame_new_diagnosis'] = 'closed'

                frame_new_my_diagnosis.pack_forget()

        col, row = 0, 0
        if not user.get('my_saved_diagnosis'):
            lbl_my_saved_diagnosis['text'] = "История о сохраненных осмотрах пуста"
            lbl_my_saved_diagnosis.grid(column=col, row=row, sticky='ew', columnspan=2)
            col += 2
        else:
            data['examination']['my_saved_diagnosis'] = dict()
            lbl_my_saved_diagnosis['text'] = "Мои осмотры:"
            lbl_my_saved_diagnosis.grid(column=col, row=row, sticky='ew')
            col += 1
            for diagnosis, examination_key in user.get('my_saved_diagnosis'):
                data['examination']['my_saved_diagnosis'][f"{diagnosis}"] = examination_key
                btn = Radiobutton(master=frame_my_saved_diagnosis, text=diagnosis,
                                  font=('Comic Sans MS', user.get('text_size')),
                                  value=f"my__{diagnosis}", variable=selected_diagnosis,
                                  command=select_my_saved_diagnosis,
                                  indicatoron=False, selectcolor='#77f1ff')
                btn.grid(column=col, row=row, sticky='ew')
                col += 1
                if col == 5:
                    row += 1
                    col = 0
        Button(frame_my_saved_diagnosis, text='Сохранить осмотр в избранное',
               command=add_frame_new_diagnosis,
               font=('Comic Sans MS', user.get('text_size'))).grid(column=col, row=row)
        col += 1
        Button(frame_my_saved_diagnosis, text='Удалить шаблоны',
               command=delete_my_diagnosis,
               font=('Comic Sans MS', user.get('text_size'))).grid(column=col, row=row)

        new_diagnosis_lbl = Label(master=frame_new_my_diagnosis, text="Название осмотра",
                                  font=('Comic Sans MS', user.get('text_size')), bg='white')
        new_diagnosis_lbl.pack(fill='both', expand=True, side='left')

        new_diagnosis_name = Entry(frame_new_my_diagnosis, width=15, font=('Comic Sans MS', user.get('text_size')))
        new_diagnosis_name.pack(fill='both', expand=True, side='left')

        button_saved_new_diagnosis = Button(frame_new_my_diagnosis, text='Сохранить',
                                            command=saved_new_diagnosis,
                                            font=('Comic Sans MS', user.get('text_size')))
        button_saved_new_diagnosis.pack(fill='both', expand=True, side='left')

        button_my_saved_diagnosis.pack(fill='both', expand=True)

        frame_my_saved_diagnosis_but.columnconfigure(index='all', minsize=40, weight=1)
        frame_my_saved_diagnosis_but.rowconfigure(index='all', minsize=20)
        frame_my_saved_diagnosis_but.pack(fill='both', expand=True, side=tk.LEFT)

    def my_saved_diagnosis_change_status():
        if not data['examination'].get('my_saved_diagnosis_status'):
            data['examination']['my_saved_diagnosis_status'] = 'closed'
            button_my_saved_diagnosis['text'] = 'Закрыть мои осмотры'

        if data['examination'].get('my_saved_diagnosis_status') == "closed":
            data['examination']['my_saved_diagnosis_status'] = 'open'
            button_my_saved_diagnosis['text'] = 'Закрыть мои осмотры'

            frame_my_saved_diagnosis.columnconfigure(index='all', minsize=40, weight=1)
            frame_my_saved_diagnosis.rowconfigure(index='all', minsize=20)
            frame_my_saved_diagnosis.pack(fill='both', expand=True, before=frame_diagnosis, side="bottom")

        elif data['examination'].get('my_saved_diagnosis_status') == "open":
            data['examination']['my_saved_diagnosis_status'] = 'closed'
            button_my_saved_diagnosis['text'] = 'Открыть мои осмотры'

            frame_my_saved_diagnosis.pack_forget()

    def paste_frame_1():
        def paste_button_title():
            Button(frame_button, text='Загрузить\nпрошлые\nосмотры',
                   command=paste_past_examination,
                   font=('Comic Sans MS', user.get('text_size'))).pack(fill='both', expand=True, side=tk.LEFT)

            # button_change_all_kb_status.grid(column=0, row=0, rowspan=3, sticky='nswe')
            button_change_all_kb_status.pack(fill='both', expand=True, side=tk.LEFT)

            frame_button.pack(fill='both', expand=True, side=tk.LEFT)
        paste_frame_diagnosis()
        paste_frame_date_time()
        paste_button_title()
        my_saved_diagnosis()

        if user.get('my_saved_diagnosis'):
            my_saved_diagnosis_change_status()

        frame_1.columnconfigure(index='all', minsize=40, weight=1)
        frame_1.rowconfigure(index='all', minsize=20)
        frame_1.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)

    frame_1 = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
    frame_diagnosis = Frame(frame_1, borderwidth=1, relief="solid")
    frame_date_time = Frame(frame_1, borderwidth=1, relief="solid")

    txt_date_time = Entry(frame_date_time, width=15,
                          font=('Comic Sans MS', user.get('text_size')),
                          justify="center")
    frame_button = Frame(frame_1, borderwidth=1, relief="solid")

    button_change_all_kb_status = Button(frame_button, text='Скрыть\nвсе\nклавиатуры',
                                         command=change_all_kb_status,
                                         font=('Comic Sans MS', user.get('text_size')))

    frame_my_saved_diagnosis_but = Frame(frame_diagnosis, borderwidth=1)
    frame_my_saved_diagnosis = Frame(frame_1, borderwidth=1, relief="solid", padx=3, pady=3)
    frame_new_my_diagnosis = Frame(frame_1, borderwidth=1, relief="solid", padx=3, pady=3)

    lbl_my_saved_diagnosis = Label(master=frame_my_saved_diagnosis, text="",
                                   font=('Comic Sans MS', user.get('text_size')), bg='white')

    button_my_saved_diagnosis = Button(frame_my_saved_diagnosis_but, text='Открыть мои осмотры',
                                       command=my_saved_diagnosis_change_status,
                                       font=('Comic Sans MS', user.get('text_size')))

    paste_frame_1()

    def paste_frame_place_company():
        def select_place():
            data['examination']['place'] = selected_place.get()
            label_place['text'] = f"{all_data_diagnosis.get('place')[0]}: {selected_place.get()}"
            if selected_place.get() == 'в поликлинике':
                frame_company.pack(fill='both', expand=True, side="left")
            else:
                frame_company.pack_forget()

        label_place = Label(master=frame_place, text=f"{all_data_diagnosis.get('place')[0]}",
                            font=('Comic Sans MS', user.get('text_size')), bg='white')
        label_place.pack(fill='both', expand=True, side="left")

        for mark in all_data_diagnosis.get('place')[1:]:
            btn = Radiobutton(master=frame_place, text=mark,
                              font=('Comic Sans MS', user.get('text_size')),
                              value=mark, variable=selected_place, command=select_place,
                              indicatoron=False, selectcolor='#77f1ff')
            btn.pack(fill='both', expand=True, side="left")
        selected_place.set('в поликлинике')

        Label(master=frame_company, text=" На осмотре ",
              font=('Comic Sans MS', user.get('text_size')),
              bg='white').pack(fill='both', expand=True, side="left")

        combo_company['values'] = ['c мамой', 'c папой', 'c братом', 'c сестрой', 'c бабушкой', 'c дедушкой',
                                   'без сопровождения']

        combo_company.current(0)
        combo_company.pack(fill='both', expand=True, side="left")

        frame_company.columnconfigure(index='all', minsize=40, weight=1)
        frame_company.rowconfigure(index='all', minsize=20)
        frame_company.pack(fill='both', expand=True, side="left")

        frame_place.columnconfigure(index='all', minsize=40, weight=1)
        frame_place.rowconfigure(index='all', minsize=20)
        frame_place.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)


    def is_valid__anthro(num, marker):

        text = ''

        mark, name, variable = marker.split('__')

        if num:

            if variable in ("txt_weight_variable", "txt_weight_bir_variable", "txt_weight_must_variable",
                            "txt_weight_delta_variable", "txt_height_variable",
                            "txt_head_variable", "txt_chest_variable"):
                try:
                    num = float(num.replace(',', '.'))
                except ValueError:
                    return False




        if not child_marker and variable in ("txt_weight_variable", "txt_height_variable"):
            if num:

                txt_imt_variable = None
                if variable == "txt_weight_variable" and data['examination']['anthro']["txt_height_variable"].get():
                    height = float(data['examination']['anthro']["txt_height_variable"].get().replace(',', '.'))
                    txt_imt_variable = round(num / float(height/100)**2, 1)


                elif variable == "txt_height_variable" and data['examination']['anthro']["txt_weight_variable"].get():
                    weight = float(data['examination']['anthro']["txt_weight_variable"].get().replace(',', '.'))
                    txt_imt_variable = round(weight / (num/100) ** 2, 1)

                if txt_imt_variable:
                    data['examination']['anthro']["txt_imt_variable"].set(txt_imt_variable)
            else:
                data['examination']['anthro']["txt_imt_variable"].set('')


        if variable == "txt_weight_variable":
            if not num:
                edit_drugs_weight(weight='None')

            else:
                if child_marker:
                    edit_drugs_weight(weight=num / 1000)
                    if data['examination'].get('last_txt_weight_variable'):
                        try:
                            last_txt_weight = float(data['examination'].get('last_txt_weight_variable'))
                        except ValueError:
                            pass
                        else:
                            data['examination']['anthro']['txt_weight_delta_variable'].set(
                                round(num - last_txt_weight))
                else:
                    edit_drugs_weight(weight=num)

        if variable == "txt_weight_bir_variable":
            if num:
                if patient_age.get('year') in (0, 1):
                    loc_data = {
                        0: 0,
                        1: 600,
                        2: 1400,
                        3: 2200,
                        4: 2950,
                        5: 3650,
                        6: 4300,
                        7: 4900,
                        8: 5450,
                        9: 5950,
                        10: 6400,
                        11: 6800,
                        12: 7150}
                    if patient_age.get('year') == 0:
                        age_month = patient_age.get('month')
                        age_day = patient_age.get('day')

                        weight_must = round(float(num) + loc_data.get(age_month) +
                                            ((loc_data.get(age_month + 1) - loc_data.get(age_month)) / 30 * age_day))
                        data['examination']['anthro']['txt_weight_must_variable'].set(weight_must)
                    else:
                        data['examination']['anthro']['txt_weight_must_variable'].set(round(float(num) + 7150))
            else:
                data['examination']['anthro']['txt_weight_must_variable'].set('')

        for mark in local_data_anthro:
            for name_, variable_ in local_data_anthro.get(mark):
                if variable_ == variable:
                    select_name = str(num)
                else:
                    select_name = data['examination']['anthro'][variable_].get()
                if select_name:
                    if len(text.split('\n')[-1]) > 70:
                        text += '\n'

                    text += f"{name_}    ".replace('_', select_name)


        if variable in ('txt_weight_variable', 'txt_height_variable'):

            if not data['examination']['anthro'].get('anthro_height_weight'):
                marker_age_y = 'после года'
                marker_age = patient_age.get('year')
                if marker_age > 17:
                    marker_age = 17
                if child_marker:
                    marker_age_y = 'до года'
                    marker_age = patient_age.get('month')
                    if patient_age.get('year') > 0:
                        marker_age = 12

                data['examination']['anthro']['anthro_height_weight'] = dict()
                marker_gender = 'женский'
                if patient.get('gender').lower().startswith('м'):
                    marker_gender = 'мужской'

                data['examination']['anthro']['anthro_height_weight']['anthro_height'] = \
                    anthropometry[marker_age_y][marker_gender]['height'].get(marker_age)
                data['examination']['anthro']['anthro_height_weight']['anthro_weight'] = \
                    anthropometry[marker_age_y][marker_gender]['weight'].get(marker_age)

            anthro_height = data['examination']['anthro']['anthro_height_weight'].get('anthro_height')
            anthro_weight = data['examination']['anthro']['anthro_height_weight'].get('anthro_weight')


            height, weight = None, None
            if variable == 'txt_weight_variable':
                if num:
                    weight = num
            elif data['examination']['anthro'].get('txt_weight_variable').get():
                weight = float(data['examination']['anthro'].get('txt_weight_variable').get().replace(',', '.'))
            if variable == 'txt_height_variable':
                if num:
                    height = num
            elif data['examination']['anthro'].get('txt_height_variable').get():
                height = float(data['examination']['anthro'].get('txt_height_variable').get().replace(',', '.'))


            patient_physical_anthro = ""

            if height and weight:
                if anthro_height and anthro_weight:

                    index_height, index_weight = 7, 7

                    for a_height in anthro_height:
                        if height < a_height:
                            index_height = anthro_height.index(a_height)
                            break


                    for a_weight in anthro_weight:
                        if weight <= a_weight:
                            index_weight = anthro_weight.index(a_weight)
                            break

                    if index_height == 0:
                        anthro = 'Низкое '
                    elif index_height <= 2:
                        anthro = 'Ниже среднего '
                    elif index_height <= 4:
                        anthro = 'Среднее '
                    elif index_height <= 6:
                        anthro = 'Выше среднего '
                    elif index_height == 7:
                        anthro = 'Высокое '

                    if abs(index_weight - index_height) <= 1:
                        anthro += 'гармоничное'
                    else:
                        if abs(index_weight - index_height) < 3:
                            anthro += 'дисгармоничное'
                        else:
                            anthro += 'резко дисгармоничное'

                        if not  2 < index_height < 5 and not  2 < index_weight < 5:
                            anthro += ' по росту и по весу'
                        elif not  2 < index_height < 5:
                            anthro += ' по росту'
                        elif not  2 < index_weight < 5:
                            anthro += ' по весу'

                    patient_physical_anthro = f"Физическое развитие: {anthro}"
                    text = f"{text.strip()}\nФизическое развитие: {anthro}"

            if weight:
                if anthro_weight:
                    index_weight = 7
                    for a_weight in anthro_weight:
                        if weight <= a_weight:
                            index_weight = anthro_weight.index(a_weight)
                            break

                    if index_weight == 0:
                        anthro = f'Вес резко ниже нормы ({anthro_weight[0]} - {anthro_weight[-1]})'
                    elif index_weight <= 2:
                        anthro = 'Вес ниже среднего '
                    elif index_weight <= 4:
                        anthro = 'Вес в норме '
                    elif index_weight <= 6:
                        anthro = 'Вес выше среднего '
                    elif index_weight == 7:
                        anthro = f'Вес резко выше нормы ({anthro_weight[0]} - {anthro_weight[-1]})'

                    patient_physical_anthro = f"{anthro} -- {patient_physical_anthro}"

            if height:
                if anthro_height:
                    index_height = 7
                    for a_height in anthro_height:
                        if height < a_height:
                            index_height = anthro_height.index(a_height)
                            break

                    if index_height == 0:
                        anthro = f'Рост резко ниже нормы ({anthro_height[0]} - {anthro_height[-1]})'
                    elif index_height <= 2:
                        anthro = 'Рост ниже среднего '
                    elif index_height <= 4:
                        anthro = 'Рост в норме '
                    elif index_height <= 6:
                        anthro = 'Рост выше среднего '
                    elif index_height == 7:
                        anthro = f'Рост резко выше нормы ({anthro_height[0]} - {anthro_height[-1]})'

                    patient_physical_anthro = f"{anthro} -- {patient_physical_anthro}"

            if not patient_physical_anthro:
                patient_physical_anthro = "Физическое развитие: нет данных"
            data['examination']['anthro']['patient_physical_anthro'].set(patient_physical_anthro)


        data['examination']['anthro']['patient_anthro_data'].set(text.strip())

        return True

    frame_place = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
    frame_company = Frame(frame_place)

    combo_company = Combobox(frame_company, font=('Comic Sans MS', user.get('text_size')),
                             state="readonly", justify="center")

    paste_frame_place_company()

    frame_epicrisis_add = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
    txt_epicrisis_add = ScrolledText(frame_epicrisis_add, width=15, height=3,
                                     font=('Comic Sans MS', user.get('text_size')),
                                     wrap="word")
    txt_epicrisis_add.insert(1.0, "Осмотрен на чесотку, педикулез, микроспорию\n"
                                  "Согласие на простое медицинское вмешательство получено")
    Label(master=frame_epicrisis_add,
          text="Дополнительная информация",
          font=('Comic Sans MS', user.get('text_size')), bg='white').pack(fill='both', expand=True, padx=2, pady=2)
    txt_epicrisis_add.pack(fill='both', expand=True)
    frame_epicrisis_add.pack(fill='both', expand=True, padx=2, pady=2)


    def paste_frame_complaints():

        label_complaints = Label(master=frame_complaints_main,
                                 text=f"{all_data_diagnosis.get('complaints')[0]}",
                                 font=('Comic Sans MS', user.get('text_size')), bg='white')
        label_complaints.grid(row=0, column=0, sticky='ew')

        txt_complaints.grid(column=0, row=1, sticky='ew', columnspan=2)
        data['examination']['complaints_but'] = dict()

        for mark in all_data_diagnosis.get('complaints'):
            if isinstance(mark, tuple):
                data['examination']['complaints_but'][f"{mark[0]}_main"] = IntVar()

                for mark_2 in mark[1:]:
                    data['examination']['complaints_but'][f"{mark[0]}_{mark_2}"] = IntVar()
            else:
                data['examination']['complaints_but'][mark] = IntVar()

        change_complaints_kb_button.grid(column=1, row=0, sticky='ew')

        frame_complaints_main.columnconfigure(index='all', minsize=10, weight=1)
        frame_complaints_main.rowconfigure(index='all', minsize=10)
        # frame_complaints_main.pack(fill='both', expand=True, side=tk.LEFT)
        frame_complaints_main.grid(row=0, column=0, sticky='ew')

        paste_complaints_kb()
        frame_complaints.columnconfigure(index='all', minsize=40, weight=1)
        frame_complaints.rowconfigure(index='all', minsize=20)
        frame_complaints.pack(fill='both', expand=True, padx=2, pady=2)

    def select_complaints():
        local_complaints = dict()
        text = txt_complaints.get(1.0, 'end').strip()
        if text and text[-1] == '.':
            text = text[:-1] + ', '
        for mark in all_data_diagnosis.get('complaints'):
            if isinstance(mark, tuple):
                text = text.replace(mark[0], f"\n__!__{mark[0]}")
                local_complaints[mark[0]] = ""
        for string in text.split('\n__!__'):
            for i in local_complaints.keys():
                if i in string:
                    local_complaints[i] = string
                    if data['examination']['complaints_but'].get(f"{i}_main"):
                        data['examination']['complaints_but'].get(f"{i}_main").set(1)

                    break
            else:
                if not local_complaints.get("add"):
                    local_complaints["add"] = ""
                local_complaints["add"] += string

        complaints_button = selected_button.get()
        if text == 'нет':
            text = ''

        selected_button.set('')
        if complaints_button:
            if complaints_button in ('нет', 'обусловлены основным заболеванием'):
                for mark_ in data['examination'].get('complaints_but'):
                    data['examination']['complaints_but'].get(mark_).set(0)
                text = complaints_button

            else:
                if data['examination']['complaints_but'].get(complaints_button):
                    if data['examination']['complaints_but'].get(complaints_button).get() == 1:
                        data['examination']['complaints_but'].get(complaints_button).set(0)

                    else:
                        data['examination']['complaints_but'].get(complaints_button).set(1)

        if complaints_button not in ('нет', 'обусловлены основным заболеванием'):
            if '_' in complaints_button:
                mark_1, mark_2 = complaints_button.split('_')
                if data['examination']['complaints_but'].get(complaints_button).get() == 1:
                    if not data['examination']['complaints_but'].get(f"{mark_1}_main").get() == 1:
                        data['examination']['complaints_but'].get(f"{mark_1}_main").set(1)
                    text += ' '
                    if mark_2 == 'main':
                        text += f" {mark_1}, "
                    elif not local_complaints.get(mark_1):

                        text += f" {mark_1} {mark_2}, "
                    else:
                        if local_complaints.get(mark_1) == f"{mark_1}, ":
                            local_complaints[mark_1] = f"{mark_1} "
                        if mark_1 == 'температура':
                            if local_complaints.get(mark_1).strip()[-1] in (",", "."):
                                local_complaints[mark_1] = local_complaints.get(mark_1).strip()[:-1]
                            if local_complaints.get(mark_1).strip()[-1].isdigit():

                                text = text.replace(local_complaints.get(mark_1),
                                                    local_complaints.get(mark_1) + f" - {mark_2}, ")
                            else:
                                text = text.replace(local_complaints.get(mark_1),
                                                    f"{local_complaints.get(mark_1)} {mark_2}, ")
                        else:

                            text = text.replace(local_complaints.get(mark_1),
                                                local_complaints.get(mark_1, f" {mark_1} ") + f" {mark_2}, ")

                else:
                    if mark_2 == 'main':
                        text = text.replace(local_complaints.get(mark_1, '').split('\n')[0], "")
                        for but in data['examination'].get('complaints_but'):
                            if mark_1 in but:
                                data['examination']['complaints_but'].get(but).set(0)
                    elif mark_1 == 'температура':
                        for i in (f" - {mark_2}", f"{mark_2} - ", f"{mark_2}, ", f", {mark_2}", f"{mark_2}"):
                            if i in text:
                                text = text.replace(i, '')
                                break

                    else:
                        for i in (f"{mark_2}, ", f"{mark_2},", f", {mark_2}", f"{mark_2}"):
                            if i in text:
                                text = text.replace(i, '')
                                break
            else:
                if data['examination']['complaints_but'].get(complaints_button).get() == 1:
                    if local_complaints.get("add"):
                        text = text.replace(local_complaints.get("add"),
                                            local_complaints.get("add") + f"{complaints_button}, ")
                    else:
                        text = f"{complaints_button}, " + text

                else:
                    if local_complaints.get("add"):
                        for i in (f"{mark_2}, ", f"{mark_2},", f", {mark_2}", f"{mark_2}"):
                            if i in local_complaints.get("add"):
                                text = text.replace(local_complaints.get("add"),
                                                    local_complaints.get("add").replace(i, ''))
                                break
                    else:
                        for i in (f"{mark_2}, ", f"{mark_2},", f", {mark_2}", f"{mark_2}"):
                            if i in text:
                                text = text.replace(i, '')
                                break

        text = text.replace('\n__!__', ' ').strip().replace(', ,', ',').replace('  ', ' ').replace(' ,', ',')
        txt_complaints.delete(1.0, 'end')
        if text != 'нет' and text[-2:] == ', ':
            text = text[:-2] + '. '
        txt_complaints.insert(1.0, text)

        edit_complaints_kb_color()

        # if data['examination'].get('open_complaints_kb'):
        #     for but in data['examination'].get('complaints_buttons'):
        #         if data['examination']['complaints_but'].get(but).get() == 1:
        #             data['examination']['complaints_buttons'][but]['bg'] = '#77f1ff'
        #         else:
        #             data['examination']['complaints_buttons'][but]['bg'] = '#cdcdcd'

    def change_complaints_kb_status():

        if data['examination'].get('open_complaints_kb') == 'open':
            data['examination']['open_complaints_kb'] = 'closed'
            change_complaints_kb_button['text'] = 'открыть клавиатуру жалоб'
            txt_complaints['height'] = 4
            txt_complaints['width'] = 100
            frame_complaints_buttons.grid_forget()
            frame_complaints_main.grid_configure(row=0, column=0, sticky='ew', columnspan=3)
        else:
            data['examination']['open_complaints_kb'] = 'open'
            change_complaints_kb_button['text'] = 'скрыть клавиатуру жалоб'
            txt_complaints['height'] = 8
            txt_complaints['width'] = 15
            frame_complaints_buttons.grid(row=0, column=1, sticky='ew', columnspan=2)
            frame_complaints_main.grid_configure(row=0, column=0, sticky='ew', columnspan=1)

    def paste_complaints_kb():
        destroy_elements['complaints'] = list()
        data['examination']['complaints_buttons'] = dict()
        data['examination']['open_complaints_kb'] = 'open'

        frame_loc = Frame(frame_complaints_buttons)

        row, col = 0, 0
        for mark in all_data_diagnosis.get('complaints'):
            if not isinstance(mark, tuple):
                btn = Radiobutton(frame_loc, text=f"{mark}",
                                  font=('Comic Sans MS', user.get('text_size')),
                                  value=f"{mark}", variable=selected_button,
                                  command=select_complaints,
                                  indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')

                btn.grid(row=1, column=col, sticky='ew')
                data['examination']['complaints_buttons'][mark] = btn

                col += 1
        frame_loc.columnconfigure(index='all', minsize=10, weight=1)
        frame_loc.rowconfigure(index='all', minsize=10)
        frame_loc.pack(fill='both', expand=True)

        for mark in all_data_diagnosis.get('complaints'):
            if isinstance(mark, tuple):
                row, col = 0, 0
                frame_loc = Frame(frame_complaints_buttons)
                destroy_elements['complaints'].append(frame_loc)

                btn = Radiobutton(frame_loc, text=f"{mark[0]}",
                                  font=('Comic Sans MS', user.get('text_size')),
                                  value=f"{mark[0]}_main", variable=selected_button,
                                  command=select_complaints,
                                  indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
                btn.grid(row=row, column=col, sticky='ew')
                data['examination']['complaints_buttons'][f"{mark[0]}_main"] = btn

                col += 1
                for mark_2 in mark[1:]:
                    btn = Radiobutton(frame_loc, text=f"{mark_2}",
                                      font=('Comic Sans MS', user.get('text_size')),
                                      value=f"{mark[0]}_{mark_2}", variable=selected_button,
                                      command=select_complaints,
                                      indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')

                    # btn = Checkbutton(frame_loc, text=mark_2,
                    #                   font=('Comic Sans MS', user.get('text_size')),
                    #                   onvalue=1, offvalue=0,
                    #                   variable=data['examination']['complaints_but'].get(f"{mark[0]}_{mark_2}"),
                    #                   command=select_complaints,
                    #                   indicatoron=False, selectcolor='#77f1ff')
                    btn.grid(row=row, column=col, sticky='ew')
                    data['examination']['complaints_buttons'][f"{mark[0]}_{mark_2}"] = btn

                    col += 1
                frame_loc.columnconfigure(index='all', minsize=10, weight=1)
                frame_loc.rowconfigure(index='all', minsize=10)
                frame_loc.pack(fill='both', expand=True)
        frame_complaints_buttons.columnconfigure(index='all', minsize=10, weight=1)
        frame_complaints_buttons.rowconfigure(index='all', minsize=10)
        # frame_complaints_1.pack(fill='both', expand=True).grid(row=0, column=0, sticky='ew')
        frame_complaints_buttons.grid(row=0, column=1, sticky='ew', columnspan=2)

    def edit_complaints_kb_color():
        for but in data['examination'].get('complaints_buttons'):
            if data['examination']['complaints_but'].get(but).get() == 1:
                data['examination']['complaints_buttons'][but]['bg'] = '#77f1ff'
            else:
                data['examination']['complaints_buttons'][but]['bg'] = '#cdcdcd'

        # for button_name in data['examination'].get('examination_buttons_2_color'):
        #     if data['examination']['examination_but'].get(button_name):
        #         if data['examination']['examination_but'].get(button_name).get() == 1:
        #             data['examination']['examination_buttons_2_color'][button_name]['bg'] = '#77f1ff'
        #         else:
        #             data['examination']['examination_buttons_2_color'][button_name]['bg'] = '#cdcdcd'


    frame_complaints = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
    frame_complaints_main = Frame(frame_complaints, padx=1, pady=1)
    frame_complaints_buttons = Frame(frame_complaints, padx=1, pady=1)
    txt_complaints = ScrolledText(frame_complaints_main, width=15, height=8,
                                  font=('Comic Sans MS', user.get('text_size')),
                                  wrap="word")
    change_complaints_kb_button = Button(frame_complaints_main, text='скрыть клавиатуру жалоб',
                                         command=change_complaints_kb_status,
                                         font=('Comic Sans MS', user.get('text_size')))

    paste_frame_complaints()

    frame_anamnesis = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
    txt_anamnesis = ScrolledText(frame_anamnesis, width=15, height=3,
                                 font=('Comic Sans MS', user.get('text_size')),
                                 wrap="word")

    if not child_marker:
        Label(master=frame_anamnesis,
              text="Анамнез заболевания",
              font=('Comic Sans MS', user.get('text_size')), bg='white').pack(fill='both', expand=True, padx=2, pady=2)
        txt_anamnesis.pack(fill='both', expand=True)
        frame_anamnesis.pack(fill='both', expand=True, padx=2, pady=2)

    def paste_patient_anthro_data():
        def paste_npr_root():
            def selected_age_month(event=None):
                for age_month in data['examination'].get('npr_frame'):
                    frame = data['examination']['npr_frame'].get(age_month)
                    frame.pack_forget()

                frame = data['examination']['npr_frame'].get(int(combo_age_month.get()))
                frame.pack(fill='both', expand=True)

            local_data_npr = {
                1: {
                    "Аз": "Плавное прослеживание движущегося предмета",
                    "Ас": "Длительное слуховое сосредоточение (прислушивается к голосу взрослого, звуку игрушки и .т д.)",
                    "Э": "Первая улыбка в ответ на речь взрослого",
                    "ДР": "Ручки чаще слегка раскрыты",
                    "ДО": "Лежа на животе, пытается поднимать и удерживать голову",
                    "ПР": "Не оценивается",
                    "PA": "Издает отдельные звуки в ответ на разговор с ним",
                    "Н": "Не оценивается"
                },
                2: {
                    "Аз": "Длительное сосредоточение, смотрит на лицо взрослого или неподвижный предмет. \n"
                          "Длительно следит за движущейся игрушкой или взрослым",
                    "Ас": "Ищущие повороты головы при длительном звуке. Поворачивает голову в сторону взрослого",
                    "Э": "Быстро отвечает улыбкой на речь взрослого",
                    "ДР": "Ручки чаще слегка раскрыты",
                    "ДО": "Лежа на животе,поднимает и некоторое время удерживает голову",
                    "ПР": "Не оценивается",
                    "PA": "Произносит отдельные звуки",
                    "Н": "Не оценивается"},
                3: {
                    "Аз": "Зрительное сосредоточение в вертикальном положении на руках взрослого \n"
                          "(на лице говорящего, на игрушке), длительно рассматривает свои ручки",
                    "Ас": "Ищущие повороты головы при длительном звуке. Поворачивает голову в сторону взрослого",
                    "Э": "Отвечает «комплексом оживления» в ответ на эмоциональное общение со взрослым (разговор). \n"
                         "Ищет глазами ребенка, издающего звуки",
                    "ДР": "Случайно наталкивается ручками на игрушки, низко висящие над грудью",
                    "ДО": "Лежит на животе несколько минут, опираясь на предплечья и высоко подняв голову. \n"
                          "Удерживает голову в вертикальном положении",
                    "ПР": "Не оценивается",
                    "PA": "Произносит отдельные звуки",
                    "Н": "Не оценивается"},
                4: {
                    "Аз": "Узнает мать или близкого человека (радуется)",
                    "Ас": "Поворачивает голову в сторону невидимого источника звука инаходит его глазами. \n"
                          "Адекватно реагирует на спокойную и плясовую мелодию",
                    "Э": "Комплекс «оживления» во время бодрствования. Громко смеется в ответ на эмоциональное речевое общение. \n"
                         "Ищет взглядом другого ребенка, рассматривает, радуется, тянется к нему",
                    "ДР": "Рассматривает, ощупывает и захватывает низко висящие над грудью игрушки",
                    "ДО": "При поддержке под мышки крепко упирается о твердую опору ногами, согнутыми в тазобедренном суставе",
                    "ПР": "Не оценивается",
                    "PA": "Гулит",
                    "Н": "Во время кормления придерживает ручками грудь матери или бутылочку"
                },
                5: {
                    "Аз": "Отличает близких людей от чужих по внешнему виду \n"
                          "(по разному реагирует на лицо знакомого и незнакомого)",
                    "Ас": "Узнает голос матери или близкого человека. \n"
                          "Различает строгую и ласковую интонацию обращенной к нему речи, по-разному реагирует",
                    "Э": "Радуется ребенку, берет унего из рук игрушку, гулит",
                    "ДР": "Берет игрушку из рук взрослого иудерживает ее в ручке",
                    "ДО": "Долго лежит на животе, подняв корпус и опираясь на ладони выпрямленных рук. \n"
                          "Переворачивается со спины на живот. Ровно, устойчиво стоит при поддержке под мышки",
                    "ПР": "Не оценивается",
                    "PA": "Подолгу певуче гулит",
                    "Н": "Ест с ложки полугустую и густую пищу"
                },
                6: {
                    "Аз": "Не оценивается",
                    "Ас": "По-разному реагирует на свое и чужое имя",
                    "Э": "Не оценивается",
                    "ДР": "Уверенно берет игрушки, находясь в любом положении, и подолгу занимается ими, \n"
                          "перекладывает из одной ручки вдругую",
                    "ДО": "Переворачивается с живота на спину. \n"
                          "Передвигается, переставляя ручки или немного подползая",
                    "ПР": "Не оценивается",
                    "PA": "Произносит отдельные слоги (начало лепета)",
                    "Н": "Хорошо ест с ложки, снимая пищу губами. \n"
                         "Небольшое количество жидкой пищи пьет из блюдца или из чашки"},
                7: {
                    "Аз": "Не оценивается",
                    "Ас": "Не оценивается",
                    "Э": "Не оценивается",
                    "ДР": "Игрушкой стучит, размахивает, перекладывает, бросает ее и пр.",
                    "ДО": "Хорошо ползает (много, быстро, в различном направлении)",
                    "ПР": "На вопрос «где?» находит взглядом предмет на постоянном определенном месте \n"
                          "(например, часы, куклу и пр.)",
                    "PA": "Подолгу лепечет, произнося одни и те же слоги (2-3)",
                    "Н": "Пьет из чашки, которую держит взрослый"},
                8: {
                    "Аз": "Не оценивается",
                    "Ас": "Не оценивается",
                    "Э": "Смотрит на действия другого ребенка и смеется или лепечет",
                    "ДР": "Игрушками занимается долго и разнообразно действует ими в зависимости от их свойств. \n"
                          "Подражает действиям взрослого с игрушками (толкает мяч, стучит и тд.)",
                    "ДО": "Сам садится, сидит, ложится. Держась за барьер, сам встает, стоит и опускается. \n"
                          "Переступает, держась за барьер",
                    "ПР": "На вопрос «где?» находит несколько предметов (2-3) на постоянных местах. \n"
                          "По вербальной просьбе взрослого выполняет разученные ранее действия (без показа), \n"
                          "например «ладушки», «дай ручку» и пр.",
                    "PA": "Громко, четко, выразительно произносит различные слоги и повторяет их",
                    "Н": "Ест корочку хлеба, которую сам держит в ручке. Пьет из чашки, которую держит взрослый"},
                9: {
                    "Аз": "Не оценивается",
                    "Ас": "Выполняет плясовые движения под музыку",
                    "Э": "Подражает действиям другого ребенка. Догоняет ребенка или ползет ему навстречу",
                    "ДР": "Выполняет различные действия с предметами в зависимости от их свойств "
                          "(катает, открывает, гремит и т. д.)",
                    "ДО": "Не оценивается",
                    "ПР": "На вопрос «где?» находит несколько знакомых предметов независимо от их местоположения. "
                          "Знает свое имя",
                    "PA": "Подражает взрослому, повторяя за ним слоги, которые уже есть в лепете",
                    "Н": "Пьет из чашки, слегка придерживая е руками, спокойно относится к высаживанию на горшок"},
                10: {
                    "Аз": "Не оценивается",
                    "Ас": "Выполняет плясовые движения под музыку",
                    "Э": "Действует рядом с ребенком или одной игрушкой с ним",
                    "ДР": "По просьбе выполняет разученные действия с игрушками, \n"
                          "действия с предметами принимают устойчивый характер",
                    "ДО": "Всходит на невысокую наклонную поверхность или горку, держась за перила, и сходит с нее. \n"
                          "Идет вперед с поддержкой за оберуки",
                    "ПР": "По просьбе «дай» находит и дает знакомые предметы. \n"
                          "При игре с ним выполняет разученные движения (догоню-догоню, игра в прятки и т.д.)",
                    "PA": "Подражая взрослому, повторяет за ним новые слоги, которых нет в его лепете",
                    "Н": "Закрепляет навыки иумения, приобретенные в 9 месяцев \n"
                         "(Пьет из чашки, слегка придерживая е руками, спокойно относится к высаживанию на горшок)"},
                11: {
                    "Аз": "Не оценивается",
                    "Ас": "Выполняет плясовые движения под музыку",
                    "Э": "Радуется приходу детей, относится к ним избирательно",
                    "ДР": "Овладевает новыми движениями и начинает выполнять их по команде взрослого \n"
                          "(снимает и надевает кольца на стержень, ставит кубик на кубик)",
                    "ДО": "Стоит самостоятельно, делает первые самостоятельные шаги",
                    "ПР": "Понимает речь и общается (по просьбе взрослого находит любую куклу, \n"
                          "которую видит среди игрушек, любой мяч, все машины и пр.)",
                    "PA": "Произносит первые слова-обозначения (например: «дай», «мама», «на» и др.)",
                    "Н": "Закрепляет навыки и умения, приобретенные в 9 месяцев \n"
                         "(Пьет из чашки, слегка придерживая ее руками, спокойно относится к высаживанию на горшок)"},
                12: {
                    "Аз": "Различает предметы по форме (отличает кирпичик от кубика по просьбе взрослого). \n"
                          "Узнает на фотографии знакомого взрослого",
                    "Ас": "Выполняет плясовые движения под музыку",
                    "Э": "Ищет игрушку, спрятанную другим ребенком. \n"
                         "Протягивает другому ребенку игрушку, сопровождая свои действия смехом и лепетом",
                    "ДР": "Выполняет самостоятельно разученные действия с игрушками (катает, кормит, возит и пр.). \n"
                          "Переносит действия, разученные с одним предметом, на другой (всех кормит, всех баюкает и пр.)",
                    "ДО": "Ходит самостоятельно, без опоры",
                    "ПР": "Знает имена взрослых, названия нескольких предметов, выполняет отдельные поручения (принеси, найди и пр.). \n"
                          "Понимает слово «нельзя». Некоторые слова в речи взрослых принимают обобщенный характер. \n"
                          "По просьбе взрослого выполняет ранее разученные действия с игрушками",
                    "PA": "Легко подражает новым слогам. Произносит 5-10 облегченных слов",
                    "Н": "Самостоятельно пьет из чашки"}
            }
            npr_name = {
                "Аз": "анализатор зрительный",
                "Ас": "анализатор слуховой",
                "Э": "эмоции",
                "ДР": "движения руки",
                "ДО": "движения общие",
                "ПР": "понимаемая речь",
                "PA": "речь активная",
                "Н": "навыки"
            }

            local_data_npr_anthro = {
                "Аз": ("Аз: _ ", "txt_anal_1_variable"),
                "Ас": ("Ас: _ ", "txt_anal_2_variable"),
                "Э": ("Э: _ ", "txt_anal_3_variable"),
                "ДР": ("ДР: _ ", "txt_anal_4_variable"),
                "ДО": ("ДО: _ ", "txt_anal_5_variable"),
                "ПР": ("ПР: _ ", "txt_anal_6_variable"),
                "PA": ("PA: _ ", "txt_anal_7_variable"),
                "Н": ("Н: _ ", "txt_anal_8_variable")
            }
            patient_age_month = patient_age.get('month')
            if patient_age.get('year') > 0:
                patient_age_month = 12
            elif patient_age.get('month') == 0:
                patient_age_month = 1

            frame_npr = Frame(examination_root, borderwidth=0.5, relief="solid", padx=1, pady=1, bg="#36566d")

            data['examination']['npr_frame'] = dict()
            for age_month in local_data_npr:
                frame = Frame(frame_npr)
                row = 0
                for npr_marker in local_data_npr.get(age_month):
                    name, variable = local_data_npr_anthro.get(npr_marker)

                    check = (root_examination.register(is_valid__anthro), "%P",
                             f"anal__{name}__{variable}")

                    Label(master=frame, text=name.replace(' _', ''),
                          font=('Comic Sans MS', user.get('text_size')),
                          bg='white'
                          ).grid(column=0, row=row, sticky='nwse', pady=2)

                    Entry(frame, width=10,
                          font=('Comic Sans MS', user.get('text_size')),
                          justify="center",
                          validate="all",
                          textvariable=data['examination']['anthro'][variable],
                          validatecommand=check
                          ).grid(column=1, row=row, sticky='nwse')

                    data['examination']['anthro'][variable].set(f"{patient_age_month} мес.")


                    Label(master=frame, text=f"{npr_name.get(npr_marker)}",
                          font=('Comic Sans MS', user.get('text_size')), bg='white'
                          ).grid(row=row, column=2, sticky='nwse', pady=2)

                    Label(master=frame, text=f"{local_data_npr[age_month].get(npr_marker)}",
                          font=('Comic Sans MS', user.get('text_size')),
                          bg='white').grid(row=row, column=3, sticky='nwse', columnspan=2, pady=2)
                    row += 1

                frame.columnconfigure(index='all', minsize=40, weight=1)
                frame.rowconfigure(index='all', minsize=20)
                data['examination']['npr_frame'][age_month] = frame

            frame = Frame(frame_npr)
            Label(master=frame, text="Показатели НПР для возраста (месяцев): ",
                  font=('Comic Sans MS', user.get('text_size')), bg='white').grid(row=0, column=0, sticky='ew')

            combo_age_month = Combobox(frame, font=('Comic Sans MS', user.get('text_size')),  state="readonly", width=10)
            combo_age_month['values'] = [i for i in range(1, 13)]
            combo_age_month.set(patient_age_month)
            combo_age_month.grid(row=0, column=1, sticky='ew')
            combo_age_month.bind("<<ComboboxSelected>>", selected_age_month)

            frame.columnconfigure(index='all', minsize=40, weight=1)
            frame.rowconfigure(index='all', minsize=20)
            frame.pack(fill='both', expand=True)
            data['examination']['npr_frame'][patient_age_month].pack(fill='both', expand=True)

            frame_npr.pack(fill='both', expand=True, padx=2, pady=2)

        frame_patient_anthro_main = Frame(examination_root, borderwidth=0.5, relief="solid", padx=1, pady=1)
        Label(master=frame_patient_anthro_main,
              text="Данные обследования",
              font=('Comic Sans MS', user.get('text_size')), bg='white').pack(fill='both', expand=True, padx=2, pady=2)


        frame_patient_anthro = Frame(frame_patient_anthro_main, borderwidth=0.5, relief="solid", padx=1, pady=1, bg="#36566d")

        if not render_data.get('hr'):
            paste_hr_br()
        data['examination']['anthro'] = dict()
        data['examination']['anthro']['patient_anthro_data'] = StringVar()
        data['examination']['anthro']['patient_physical_anthro'] = StringVar()

        for mark in local_data_anthro:
            for name, variable in local_data_anthro.get(mark):
                data['examination']['anthro'][variable] = StringVar()

        counter_col = 0
        for mark in local_data_anthro:
            if mark == 'anal':
                continue

            frame = Frame(frame_patient_anthro, padx=3, pady=3)
            row = 0
            for name, variable in local_data_anthro.get(mark):
                check = (root_examination.register(is_valid__anthro), "%P",
                         f"{mark}__{name}__{variable}")

                Label(master=frame, text=name.replace(' _', ''),
                      font=('Comic Sans MS', user.get('text_size')),
                      bg='white'
                      ).grid(column=0, row=row, sticky='ew')

                Entry(frame, width=10,
                      font=('Comic Sans MS', user.get('text_size')),
                      justify="center",
                      validate="all",
                      textvariable=data['examination']['anthro'][variable],
                      validatecommand=check
                      ).grid(column=1, row=row, sticky='ew')
                if variable == 'txt_hr_variable':
                    data['examination']['anthro'][variable].set(render_data.get('hr'))
                elif variable == 'txt_br_variable':
                    data['examination']['anthro'][variable].set(render_data.get('br'))
                elif variable == 'txt_temp_variable':
                    data['examination']['anthro'][variable].set(random.choice(['36,6', '36,7', '36,5']))


                row += 1

            frame.columnconfigure(index='all', minsize=40, weight=1)
            frame.rowconfigure(index='all', minsize=20)
            frame.grid(column=counter_col, row=0, sticky='nwse')
            if child_marker and mark == 'weight':
                frame.grid_configure(rowspan=2)
            counter_col += 1
            # frame.pack(fill='both', expand=True, side="left")


        lbl = Label(master=frame_patient_anthro,
                    textvariable=data['examination']['anthro'].get('patient_physical_anthro'),
                    font=('Comic Sans MS', user.get('text_size')),
                    bg='white')
        if child_marker:
            lbl.grid(column=1, row=1, sticky='nwse', columnspan=3)
        else:
            lbl.grid(column=0, row=1, sticky='nwse', columnspan=4)


        frame_patient_anthro.columnconfigure(index='all', minsize=40, weight=1)
        frame_patient_anthro.rowconfigure(index='all', minsize=20)
        frame_patient_anthro.pack(fill='both', expand=True)
        frame_patient_anthro_main.pack(fill='both', expand=True, padx=2, pady=2)

        if child_marker:
            paste_npr_root()


    local_data_anthro = {
        "weight":
            (("Вес: _ кг.", "txt_weight_variable"),
             ("Рост: _ см.", "txt_height_variable")),
        "hr_br":
            (("ЧД: _ /мин.", "txt_br_variable"),
             ("ЧСС: _ /мин.", "txt_hr_variable")),
        "temp":
            (("Температура: _ ℃.", "txt_temp_variable"),
             ("sp O₂: _ %.", "txt_sp02_variable")),
        "bp":
            (("АД: _ мм.рт.ст.", "txt_bp_variable"),
             ("ИМТ: _ кг/м²", "txt_imt_variable"))

    }

    if child_marker:
        local_data_anthro = {
        "weight":
            (("Фактическиий вес: _ гр.", "txt_weight_variable"),
             ("Вес при рождении: _ гр.", "txt_weight_bir_variable"),
             ("Должный вес: _ гр.", "txt_weight_must_variable"),
             ("Прибавка: _ гр.", "txt_weight_delta_variable")),
        "height":
            (("Длинна тела: _ см.", "txt_height_variable"),
             ("Окр. головы: _ см.", "txt_head_variable"),
             ("Окр. груди: _  см.", "txt_chest_variable")),
        "other":
            (("Родничок: _ ", "txt_hole_head_variable"),
             ("Зубы: _ ", "txt_teeth_variable"),
             ("БЦЖ _ ", "txt_tubic_variable")),
        "hr_br":
            (("ЧД: _ /мин.", "txt_br_variable"),
             ("ЧСС: _ /мин.", "txt_hr_variable"),
             ("Температура: _ ℃.", "txt_temp_variable")),
        "anal":
            (("Аз: _ ", "txt_anal_1_variable"),
             ("Ас: _ ", "txt_anal_2_variable"),
             ("Э: _ ", "txt_anal_3_variable"),
             ("ДР: _ ", "txt_anal_4_variable"),
             ("ДО: _ ", "txt_anal_5_variable"),
             ("ПР: _ ", "txt_anal_6_variable"),
             ("PA: _ ", "txt_anal_7_variable"),
             ("Н: _ ", "txt_anal_8_variable")),

        }


    def edit_drugs_weight(weight):

        for drug_category in ['Антибиотики', 'ОРИ']:
            if data['examination'].get('selected_drugs', dict()).get(drug_category):
                for drug_name in data['examination']['selected_drugs'].get(drug_category):
                    drug_form = data['examination']['selected_drugs'][drug_category][drug_name].get('Форма')
                    if drug_form:
                        select_drugs_item(weight=weight,
                                          drug_name=f"{drug_category}__{drug_name}__Форма__{drug_form}")

    paste_patient_anthro_data()


    def paste_frame_examination():

        label_examination = Label(master=frame_examination_main,
                                  text=f"Осмотр:",
                                  font=('Comic Sans MS', user.get('text_size')), bg='white')
        label_examination.grid(row=0, column=0, sticky='ew')


        label_examination = Label(master=frame_examination_main,
                                  textvariable=data['examination']['anthro']['patient_anthro_data'],
                                  font=('Comic Sans MS', user.get('text_size')), bg='white')
        label_examination.grid(column=0, row=1, sticky='ew', columnspan=2)


        txt_examination.grid(column=0, row=2, sticky='ew', columnspan=2)


        change_examination_kb_button.grid(column=1, row=0, sticky='ew')

        frame_examination_main.columnconfigure(index='all', minsize=40, weight=1)
        frame_examination_main.rowconfigure(index='all', minsize=20)
        frame_examination_main.pack(fill='both', expand=True, side=tk.LEFT)

        paste_examination_kb()
        frame_examination.columnconfigure(index='all', minsize=40, weight=1)
        frame_examination.rowconfigure(index='all', minsize=20)
        frame_examination.pack(fill='both', expand=True, padx=2, pady=2)

    def select_examination_frame():

        if data['examination']['examination_frame'].get('open_frame'):
            data['examination']['examination_frame'].get('open_frame').pack_forget()

        frame_loc = data['examination']['examination_frame'].get(selected_examination_frame.get())
        data['examination']['examination_frame']['open_frame'] = frame_loc
        frame_loc.pack(fill='both', expand=True)

    def change_examination_kb_status():
        if data['examination'].get('open_examination_kb') == 'open':
            data['examination']['open_examination_kb'] = 'closed'
            frame_examination_buttons.pack_forget()
            change_examination_kb_button['text'] = 'открыть клавиатуру осмотра'
            txt_examination['height'] = 8
            txt_examination['width'] = 100

        else:
            data['examination']['open_examination_kb'] = 'open'
            frame_examination_buttons.pack(fill='both', expand=True, padx=2, pady=2)
            change_examination_kb_button['text'] = 'скрыть клавиатуру осмотра'
            txt_examination['height'] = 30
            txt_examination['width'] = 20
            edit_examination_kb_text()

    def select_examination():

        local_examination = dict()


        text = txt_examination.get(1.0, 'end').strip()
        if text and text[-1] == '.':
            text = text[:-1] + ', '

        loc_examination = all_data_diagnosis.get('examination')
        if child_marker:
            loc_examination = all_data_diagnosis.get('examination_child')

        for mark in loc_examination:
            if isinstance(mark, tuple):
                text = text.replace(mark[0], f"\n__!__{mark[0]}")
                local_examination[mark[0]] = ""
        for string in text.split('\n__!__'):
            for i in local_examination.keys():
                if i in string:
                    local_examination[i] = string
                    break

        examination_button = selected_button.get()
        selected_button.set('')
        if examination_button:
            if data['examination']['examination_but'].get(examination_button):
                if data['examination']['examination_but'].get(examination_button).get() == 1:
                    data['examination']['examination_but'].get(examination_button).set(0)
                else:
                    data['examination']['examination_but'].get(examination_button).set(1)

        if len(examination_button.split('_')) == 3:
            mark_1, side, mark_2 = examination_button.split('_')
        else:
            mark_1, mark_2 = examination_button.split('_')

        if (data['examination']['examination_but'].get(examination_button).get() == 1
                and not local_examination.get(mark_1)):
            text += '\n'
            if mark_1 in ('Глаза', 'Отоскопия'):
                text += f"{mark_1}: {side} - {mark_2}, "
            else:
                if mark_2[-1] != '-':
                    text += f"{mark_1}: {mark_2}, "
                else:
                    text += f"{mark_1}: {mark_2} "
        else:
            if mark_1 in ('Глаза', 'Отоскопия'):
                loc_data = {
                    'Глаза': ("OD", "OS", "OU"),
                    'Отоскопия': ("AD", "AS", "AU")}
                for i in loc_data.get(mark_1):
                    if i in local_examination.get(mark_1):
                        local_examination[mark_1] = local_examination.get(mark_1).replace(i, f"__!!__{i}")
                loc_data_side = dict()
                for side_str in local_examination.get(mark_1).split('__!!__'):
                    for i in loc_data.get(mark_1):
                        if i in side_str:
                            loc_data_side[i] = side_str
                edited_text = ''
                for examination_but in data['examination'].get('examination_but'):
                    if (examination_but.startswith(f"{mark_1}_{side}")
                            and data['examination']['examination_but'].get(examination_but).get() == 1):
                        edited_text += f"{examination_but.split('_')[-1]}, "
                if edited_text:
                    edited_text = f"{side} - " + edited_text

                    if loc_data_side.get(side):
                        text = text.replace(loc_data_side.get(side), edited_text)
                    else:
                        local_examination[mark_1] = local_examination.get(mark_1).replace("__!!__", '')
                        text = text.replace(local_examination.get(mark_1), f"{local_examination.get(mark_1)}, "
                                                                           f"{edited_text}")

            else:
                edited_text = ''
                for examination_but in data['examination'].get('examination_but'):
                    if (examination_but.startswith(f"{mark_1}")
                            and data['examination']['examination_but'].get(examination_but).get() == 1):
                        if examination_but[-1] != '-':
                            edited_text += f"{examination_but.split('_')[-1]}, "
                        else:
                            edited_text += f"{examination_but.split('_')[-1]} "

                if edited_text:
                    edited_text = f"{mark_1}: " + edited_text

                text = text.replace(local_examination.get(mark_1), edited_text)


        if data['examination'].get('open_complaints_kb'):
            for but in data['examination'].get('complaints_buttons'):
                if data['examination']['complaints_but'].get(but).get() == 1:
                    data['examination']['complaints_buttons'][but]['bg'] = '#77f1ff'
                else:
                    data['examination']['complaints_buttons'][but]['bg'] = '#cdcdcd'


        text = text.replace('__!__', '').replace('  ', ' ').replace(' .', '.').replace(' ,', ',').replace(
            ',,', ',').replace('\n\n', '\n').replace(',.', ',').strip()
        if text[-1] == ',':
            text = text[:-1] + '.'

        txt_examination.delete(1.0, 'end')
        txt_examination.insert(1.0, text)
        edit_examination_kb_text()

    def edit_examination_kb_text():
        for button_name in data['examination'].get('examination_buttons'):
            text = f"{button_name}: "
            if button_name in ('Глаза', 'Отоскопия'):
                loc_data = dict()
                for examination_but in data['examination'].get('examination_but'):
                    if (examination_but.startswith(button_name)
                            and data['examination']['examination_but'].get(examination_but).get() == 1):
                        mark_1, side, mark_2 = examination_but.split('_')
                        if not loc_data.get(side):
                            loc_data[side] = f"{side} - "

                        if len(loc_data.get(side, '').split('\n')[-1]) > 70:
                            loc_data[side] += "\n"
                        loc_data[side] += f"{mark_2}, "

                for side in loc_data.keys():
                    text += loc_data.get(side, '') + '\n'
            else:
                for examination_but in data['examination'].get('examination_but'):
                    if (examination_but.startswith(button_name)
                            and data['examination']['examination_but'].get(examination_but).get() == 1):
                        if len(text.split('\n')[-1]) > 80:
                            text += "\n"

                        text += f"{examination_but.split('_')[-1]}, "
            text = text[:-2]
            btn = data['examination']['examination_buttons'].get(button_name)
            btn['text'] = text.strip()

        for button_name in data['examination'].get('examination_buttons_2_color'):
            if data['examination']['examination_but'].get(button_name):
                if data['examination']['examination_but'].get(button_name).get() == 1:
                    data['examination']['examination_buttons_2_color'][button_name]['bg'] = '#77f1ff'
                else:
                    data['examination']['examination_buttons_2_color'][button_name]['bg'] = '#cdcdcd'

    def paste_examination_kb():
        data['examination']['open_examination_kb'] = 'open'
        data['examination']['examination_frame'] = dict()
        data['examination']['examination_buttons'] = dict()
        data['examination']['examination_buttons_2_color'] = dict()

        data['examination']['examination_but'] = dict()
        local_examination = all_data_diagnosis.get('examination')
        if child_marker:
            local_examination = all_data_diagnosis.get('examination_child')

        for mark_ in local_examination:
            if isinstance(mark_, tuple):

                if mark_[0] in ('Глаза', 'Отоскопия'):
                    loc_data = {
                        'Глаза': ("OD", "OS", "OU"),
                        'Отоскопия': ("AD", "AS", "AU")}
                    for mark_2_ in mark_[1:]:
                        for mark_3_ in loc_data.get(mark_[0], []):
                            data['examination']['examination_but'][f"{mark_[0]}_{mark_3_}_{mark_2_}"] = IntVar()
                else:

                    for mark_2_ in mark_[1:]:
                        data['examination']['examination_but'][f"{mark_[0]}_{mark_2_}"] = IntVar()


        for mark in local_examination:
            if isinstance(mark, tuple):
                frame_loc = Frame(frame_examination_buttons, borderwidth=1)

                btn = Radiobutton(frame_loc, text=f"{mark[0]}",
                                  font=('Comic Sans MS', user.get('text_size')),
                                  value=f"{mark[0]}", variable=selected_examination_frame,
                                  command=select_examination_frame,
                                  indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff',
                                  justify='left', anchor='w', padx=10)
                btn.pack(fill='both', expand=True)
                data['examination']['examination_buttons'][mark[0]] = btn

                row, col = 0, 0

                frame_loc_but = Frame(frame_loc, borderwidth=1)

                data['examination']['examination_frame'][mark[0]] = frame_loc_but
                if mark[0] in ('Глаза', 'Отоскопия'):
                    loc_data = {
                        'Глаза': ("OD", "OS", "OU"),
                        'Отоскопия': ("AD", "AS", "AU")}
                    for mark_3 in loc_data.get(mark[0], []):

                        frame_loc_but_side = Frame(frame_loc_but, borderwidth=1)
                        row_counter, col = 1, 0
                        loc_lbl = Label(master=frame_loc_but_side, text=f"{mark_3}",
                              font=('Comic Sans MS', user.get('text_size')),
                              bg='white')
                        loc_lbl.grid(row=row, column=col, sticky='nwse', pady=2, padx=2)
                        col += 1

                        for mark_2 in mark[1:]:
                            if col == 5:
                                row_counter += 1
                                col = 1
                                row += 1
                                loc_lbl.grid_configure(rowspan=row_counter)

                            btn = Radiobutton(frame_loc_but_side, text=f"{mark_2}",
                                              font=('Comic Sans MS', user.get('text_size')),
                                              value=f"{mark[0]}_{mark_3}_{mark_2}",
                                              variable=selected_button,
                                              command=select_examination,
                                              indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
                            btn.grid(row=row, column=col, sticky='ew')
                            data['examination']['examination_buttons_2_color'][f"{mark[0]}_{mark_3}_{mark_2}"] = btn

                            col += 1

                        frame_loc_but_side.columnconfigure(index='all', minsize=40, weight=1)
                        frame_loc_but_side.rowconfigure(index='all', minsize=20)
                        frame_loc_but_side.pack(fill='both', expand=True, padx=2, pady=3)


                else:
                    frame_loc_but_string = Frame(frame_loc_but)
                    for mark_2 in mark[1:]:
                        if mark_2 != '\n':
                            btn = Radiobutton(frame_loc_but_string, text=f"{mark_2}",
                                              font=('Comic Sans MS', user.get('text_size')),
                                              value=f"{mark[0]}_{mark_2}",
                                              variable=selected_button,
                                              command=select_examination,
                                              indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
                            btn.pack(fill='both', expand=True, side='left')
                            data['examination']['examination_buttons_2_color'][f"{mark[0]}_{mark_2}"] = btn

                            col += 1

                        if mark_2 == '\n' or col == 5:

                            col = 0

                            frame_loc_but_string.columnconfigure(index='all', minsize=40, weight=1)
                            frame_loc_but_string.rowconfigure(index='all', minsize=20)
                            frame_loc_but_string.pack(fill='both', expand=True)
                            frame_loc_but_string = Frame(frame_loc_but)


                    frame_loc_but_string.columnconfigure(index='all', minsize=40, weight=1)
                    frame_loc_but_string.rowconfigure(index='all', minsize=20)
                    frame_loc_but_string.pack(fill='both', expand=True)

                frame_loc_but.columnconfigure(index='all', minsize=40, weight=1)
                frame_loc_but.rowconfigure(index='all', minsize=20)

                frame_loc.columnconfigure(index='all', minsize=40, weight=1)
                frame_loc.rowconfigure(index='all', minsize=20)
                frame_loc.pack(fill='both', expand=True)

        frame_examination_buttons.columnconfigure(index='all', minsize=40, weight=1)
        frame_examination_buttons.rowconfigure(index='all', minsize=20)
        frame_examination_buttons.pack(fill='both', expand=True, padx=2, pady=2)

    frame_examination = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
    frame_examination_main = Frame(frame_examination, borderwidth=1)
    frame_examination_buttons = Frame(frame_examination, borderwidth=1)

    txt_examination = ScrolledText(frame_examination_main, width=20, height=30,
                                   font=('Comic Sans MS', user.get('text_size')),
                                   wrap="word")
    change_examination_kb_button = Button(frame_examination_main, text='скрыть клавиатуру осмотра',
                                          command=change_examination_kb_status,
                                          font=('Comic Sans MS', user.get('text_size')))

    paste_frame_examination()

    def open_mkb_10_root():
        if not data['examination'].get('is_mkb_10_root_open'):
            data['examination']['is_mkb_10_root_open'] = True
            mkb_10_root_main.grid()
        else:
            data['examination']['is_mkb_10_root_open'] = False
            mkb_10_root_main.grid_remove()

    def create_mkb_10_root():
        def celect_code():
            txt_diagnosis.insert('end', f"\n{celected_code.get()}")

        def search_mkb(event=None):
            def resize(event=None):
                region = canvas.bbox(tk.ALL)
                canvas.configure(scrollregion=region)

            def on_binds(event):
                canvas.idbind = canvas.bind_all("<MouseWheel>", on_mousewheel)

            def off_binds(event=None):
                canvas.unbind_all("<MouseWheel>")

            def on_mousewheel(event):

                region = canvas.bbox(tk.ALL)
                canvas.configure(scrollregion=region)

                if os.name == 'posix':
                    canvas.yview_scroll(int(-1 * event.delta), "units")
                else:
                    canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")


            if data['examination'].get('frame_found_data_mkb'):
                frame_found_data_mkb = data['examination'].get('frame_found_data_mkb')
                frame_found_data_mkb.destroy()
            master_frame = Frame(mkb_frame_scrolled)
            data['examination']['frame_found_data_mkb'] = master_frame
            master_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)


            found_data = list()
            mkb_code_edit = ''
            mkb_name_edit = mkb_name.get()

            if mkb_code.get():
                word_list = ["qwertyuiopasdfghjkl;'zxcvbnm,.", "йцукенгшщзфывапролджэячсмитьбю"]

                for word in mkb_code.get().lower():
                    if word in word_list[1]:
                        mkb_code_edit += word_list[0][word_list[1].index(word)]
                    elif word == ',':
                        mkb_code_edit += '.'
                    else:
                        mkb_code_edit += word
                mkb_code_edit = mkb_code_edit.upper()

            if mkb_code_edit and mkb_name_edit:
                for key, value in mkb_10.items():
                    if mkb_code_edit in key and mkb_name_edit.lower() in value.lower():
                        found_data.append(f"{key} - {value}")
            elif mkb_code_edit:
                for key, value in mkb_10.items():
                    if mkb_code_edit in key:
                        found_data.append(f"{key} - {value}")
            elif mkb_name_edit:
                for key, value in mkb_10.items():
                    if mkb_name_edit.lower() in value.lower():
                        found_data.append(f"{key} - {value}")


            if found_data:

                scroll_x = tk.Scrollbar(master_frame, orient=tk.HORIZONTAL)
                scroll_y = tk.Scrollbar(master_frame, orient=tk.VERTICAL)

                canvas = tk.Canvas(master_frame,
                                   xscrollcommand=scroll_x.set,
                                   yscrollcommand=scroll_y.set)
                scroll_x.config(command=canvas.xview)
                scroll_y.config(command=canvas.yview)

                canvas_frame = Frame(canvas)

                for mkb_data in found_data:
                    but_text = ''
                    for i in mkb_data.split():
                        if len(but_text.split('\n')[-1]) > 40:
                            but_text += '\n'
                        but_text += i + ' '
                    Radiobutton(canvas_frame, text=but_text,
                                font=('Comic Sans MS', user.get('text_size')),
                                value=f"{mkb_data}",
                                variable=celected_code,
                                command=celect_code,
                                indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
                                ).pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)


                # canvas_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)


                canvas['width'] = int(canvas.winfo_geometry().split('x')[0])
                canvas_frame['width'] = int(canvas.winfo_geometry().split('x')[0])
                canvas.grid(row=0, column=0, sticky="nsew")
                scroll_x.grid(row=1, column=0, sticky="we")
                scroll_y.grid(row=0, column=1, sticky="ns")

                master_frame.rowconfigure(0, weight=1)
                master_frame.columnconfigure(0, weight=1)

                master_frame.bind("<Configure>", resize)
                master_frame.update_idletasks()
                canvas_frame['height'] = int(mkb_10_root_main.winfo_height() - frame_main_mkb_10.winfo_height())



                canvas.bind("<Enter>", on_binds)
                canvas.bind("<Leave>", off_binds)

                canvas.create_window((0, 0), window=canvas_frame, anchor="nw",
                                     width=canvas.winfo_width())

            else:
                Label(master_frame, text="Поиск не дал результатов!",
                      font=('Comic Sans MS', user.get('text_size')),
                      bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')

        mkb_code = StringVar()
        mkb_name = StringVar()
        celected_code = StringVar()

        frame_main_mkb_10 = Frame(mkb_10_root_main, bg="#36566d")
        Label(frame_main_mkb_10, text="Поиск по МКБ-10",
              font=('Comic Sans MS', user.get('text_size')),
              bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
        Button(frame_main_mkb_10, text=f"Закрыть окно",
               font=('Comic Sans MS', user.get('text_size')),
               command=open_mkb_10_root,
               bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')


        mkb_title_frame = Frame(frame_main_mkb_10, bg="#36566d")
        Label(mkb_title_frame, text="Код: ",
              font=('Comic Sans MS', user.get('text_size')),
              bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, side='left')
        txt_mkb = Entry(mkb_title_frame, width=10,
              font=('Comic Sans MS', user.get('text_size')),
              justify="center",
              textvariable=mkb_code)
        txt_mkb.pack(fill='x', expand=True, pady=3, padx=3, side='left')
        txt_mkb.bind('<Return>', search_mkb)

        Label(mkb_title_frame, text="Нозология: ",
              font=('Comic Sans MS', user.get('text_size')),
              bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, side='left')
        txt_mkb = Entry(mkb_title_frame, width=30,
              font=('Comic Sans MS', user.get('text_size')),
              textvariable=mkb_name)
        txt_mkb.pack(fill='x', expand=True, pady=3, padx=3, side='left')
        txt_mkb.bind('<Return>', search_mkb)


        mkb_title_frame.pack(fill='x', anchor='n')
        frame_main_mkb_10.pack(fill='x', anchor='n')

        mkb_frame_scrolled = Frame(mkb_10_root_main)
        mkb_frame_scrolled.pack(fill='both', expand=True)

        data['examination']['is_mkb_10_root_open'] = False
        mkb_10_root_main.grid(row=0, column=3, sticky="nwse", rowspan=3)

        mkb_10_root_main.grid_remove()

    mkb_10_root_main = Frame(master=root_examination, padx=3, pady=3, bg="#36566d")
    mkb_10_root_main.update_idletasks()
    create_mkb_10_root()

    def paste_diagnosis_kb():

        def edti__txt_diagnosis(event=None):
            txt_diagnosis_info = txt_diagnosis.get(1.0, 'end').strip()
            txt_diagnosis_info = txt_diagnosis_info.replace('  ', ' ')
            txt_diagnosis.delete(1.0, 'end')
            txt_diagnosis.insert(1.0, txt_diagnosis_info)


        def select_diagnosis_kb():
            diagnosis_button = selected_button.get()
            selected_button.set('')
            txt_diagnosis.insert("insert", f" {diagnosis_button} ")


        txt_diagnosis['width'] = 30
        txt_diagnosis['height'] = 5
        txt_diagnosis.bind("<FocusOut>", edti__txt_diagnosis)

        frame_diagnosis_kb = Frame(frame_diagnosis_txt, borderwidth=1, relief="solid")
        destroy_elements['frame_diagnosis_kb'] = frame_diagnosis_kb

        row, col = 0, 0
        local_diagnosis_kb = all_data_diagnosis.get('diagnosis_ori')
        if child_marker:
            local_diagnosis_kb = all_data_diagnosis.get('diagnosis_key_child')

        for mark_group in local_diagnosis_kb:
            mark_group_frame = Frame(frame_diagnosis_kb)
            for mark in mark_group:
                btn = Radiobutton(mark_group_frame, text=mark,
                                  font=('Comic Sans MS', user.get('text_size')),
                                  value=f"{mark}",
                                  variable=selected_button,
                                  command=select_diagnosis_kb,
                                  indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')

                btn.grid(row=row, column=col, sticky='ew')
                col += 1
                # if col == 4:
                #     col = 0
                #     row += 1
            mark_group_frame.columnconfigure(index='all', minsize=40, weight=1)
            mark_group_frame.rowconfigure(index='all', minsize=20)

            mark_group_frame.pack(fill='both', expand=True)

        Button(frame_diagnosis_kb, text='MKБ-10',
               command=open_mkb_10_root,
               font=('Comic Sans MS', user.get('text_size'))).pack(fill='both', expand=True)

        frame_diagnosis_kb.columnconfigure(index='all', minsize=40, weight=1)
        frame_diagnosis_kb.rowconfigure(index='all', minsize=20)
        frame_diagnosis_kb.pack(fill='both', expand=True, side=tk.LEFT)


    frame_diagnosis_txt = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
    Label(master=frame_diagnosis_txt, text="Диагноз",
          font=('Comic Sans MS', user.get('text_size')), bg='white'
          ).pack(fill='both', expand=True, padx=2, pady=2)

    txt_diagnosis = ScrolledText(frame_diagnosis_txt, width=70, height=3,
                                 font=('Comic Sans MS', user.get('text_size')),
                                 wrap="word")
    txt_diagnosis.pack(fill='both', expand=True, side=tk.LEFT)
    txt_diagnosis.insert(1.0, 'Диагноз: ')
    frame_diagnosis_txt.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)

    paste_diagnosis_kb()

    def paste_diagnosis_add_but():
        def select_button_risk():
            if data['examination']['diagnosis_add_but'].get('Группа риска__нет').get():
                for but_name in data['examination'].get('diagnosis_add_but'):
                    if (but_name.startswith('Группа риска')
                            and data['examination']['diagnosis_add_but'].get(but_name).get()
                            and but_name.split('__')[-1] != 'нет'):

                        data['examination']['diagnosis_add_but'].get(but_name).set(0)

            select_button()
            risk_data = {
                "нет": {},
                "реализации ВУИ": {
                    1: ("ОАК + ОАМ (даны направления)", ),
                    3: ("ОАК + ОАМ (даны направления)", )},
                "патологии ЦНС": {
                    1: ('Консультация невролога + УЗИ ГМ', ),
                    3: ("Консультация невролога", ),
                    6: ("Консультация невролога", )},
                "Анемии": {
                    1: ('ОАК + ретикулоциты', ),
                    3: ("ОАК + ретикулоциты", ),
                    6: ("ОАК + ретикулоциты", )},

                "Внезапной смерти": {
                    1: ('ЭКГ', ),
                    12: ("ЭКГ", )},

                "Диспансеризация": {
                    1: ("ОАК + ОАМ (даны направления)", "ОАЭ и ЭКГ при отсутствии данных о проведении",
                        "Консультация невролога (запись через справку)", "Консультация хирурга (ортопеда)"),
                    6: ("Консультация офтальмолога и оториноларинголога (запись через справку)", ),

                    11: ("ОАК + ОАМ (даны направления)", "Консультация стоматолога в 12 мес")
                }
            }

            if patient_age.get('year') == 0:
                age_month = patient_age.get('month')
                if age_month == 0 and patient_age.get('day') > 20:
                    age_month = 1
                elif age_month == 1 and patient_age.get('day') > 20:
                    age_month = 2

                text = txt_prescription.get(1.0, 'end').strip()
                edited_string_risk = ''
                edited_string_disp = ''

                new_string_risk = ''
                new_string_disp = ''

                for string in text.split('\n'):
                    if string.startswith('На основании групп риска:'):
                        edited_string_risk = string
                    elif string.startswith('На основании диспансеризации:'):
                        edited_string_disp = string

                for but_name in data['examination'].get('diagnosis_add_but'):
                    if (but_name.startswith('Группа риска')
                            and data['examination']['diagnosis_add_but'].get(but_name).get()):
                        risk_name = but_name.split('__')[-1]
                        if risk_data[risk_name].get(age_month):
                            if risk_name == 'Анемии' and 'ОАК' in new_string_risk:
                                new_string_risk = new_string_risk.replace('ОАК', "ОАК с ретикулоцитами")
                            elif risk_name in risk_data:
                                for mark in risk_data[risk_name].get(age_month):
                                    new_string_risk += f"{mark}, "

                if risk_data["Диспансеризация"].get(age_month):
                    for mark in risk_data["Диспансеризация"].get(age_month):
                        if mark not in new_string_risk:
                            new_string_disp += f"{mark}, "


                for mark, old_string, new_string in (("На основании групп риска:", edited_string_risk, new_string_risk),
                                                     ("На основании диспансеризации:", edited_string_disp, new_string_disp)):
                    if not old_string:
                        if new_string:
                            text += f"\n{mark} {new_string}"
                    else:
                        if new_string:
                            text = text.replace(old_string, f"{mark} {new_string}")
                        else:
                            text = text.replace(old_string, "")

                txt_prescription.delete(1.0, 'end')
                txt_prescription.insert(1.0, text)

        def select_button():
            text = txt_diagnosis.get(1.0, 'end').strip()
            edited_string = ''
            for string in text.split('\n'):
                for but_category in local_but_name:
                    if string.startswith(but_category):
                        edited_string = string

            new_string = ''
            for but_name in data['examination'].get('diagnosis_add_but'):
                if but_name.startswith('Группа риска'):
                    if data['examination']['diagnosis_add_but'].get(but_name).get():
                        if 'Группа риска' not in new_string:
                            new_string += "  Группа риска: "
                        new_string += f"{but_name.split('__')[-1]}"
                        if ((but_name.split('__')[-1] ==  'реализации ВУИ' and patient_age.get('month') > 3)
                            or (but_name.split('__')[-1] !=  'нет' and patient_age.get('year') > 0)):
                            new_string += " - риск не реализовался, "
                        else:
                            new_string += ", "


                else:
                    if data['examination']['diagnosis_add_but'].get(but_name).get():
                        new_string += f"  {but_name}: {data['examination']['diagnosis_add_but'].get(but_name).get()}"

            if edited_string:
                text = text.replace(edited_string, new_string.strip())
            else:
                text += f"\n{new_string.strip()}"

            txt_diagnosis.delete(1.0, 'end')
            txt_diagnosis.insert(1.0, text)


        frame_diagnosis_add_but = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
        data['examination']['diagnosis_add_but'] = dict()
        local_but_name = {
            'Группа здоровья': ("1", "2", "3", "4"),
            'Группа риска': ("нет", "реализации ВУИ", "патологии ЦНС", "Анемии", "Внезапной смерти"),
            'НПР': ("1-я группа", "2-я группа", "3-я группа", "4-я группа"),
            'Режим дня №': ("1", "2", "3", "4", "5"),
        }

        for but_category in local_but_name:
            frame = Frame(frame_diagnosis_add_but)

            Label(master=frame,
                  text=but_category,
                  font=('Comic Sans MS', user.get('text_size')), bg='white'
                  ).pack(fill='both', expand=True, side='left', pady=2, padx=2)


            if but_category == 'Группа риска':

                for but_name in local_but_name.get(but_category):
                    data['examination']['diagnosis_add_but'][f"{but_category}__{but_name}"] = IntVar()

                    Checkbutton(frame, text=but_name,
                                font=('Comic Sans MS', user.get('text_size')),
                                variable=data['examination']['diagnosis_add_but'].get(f"{but_category}__{but_name}"),
                                command=select_button_risk,
                                onvalue=1, offvalue=0, indicatoron=False, selectcolor='#77f1ff'
                                ).pack(fill='both', expand=True, side='left')

            else:
                data['examination']['diagnosis_add_but'][but_category] = StringVar()
                for but_name in local_but_name.get(but_category):
                    Radiobutton(frame, text=but_name,
                                font=('Comic Sans MS', user.get('text_size')),
                                value=but_name,
                                variable=data['examination']['diagnosis_add_but'].get(but_category),
                                command=select_button,
                                indicatoron=False, selectcolor='#77f1ff'
                                ).pack(fill='both', expand=True, side='left')

            frame.columnconfigure(index='all', minsize=40, weight=1)
            frame.rowconfigure(index='all', minsize=20)
            frame.pack(fill='both', expand=True)

        data['examination']['diagnosis_add_but']['Группа здоровья'].set('2')
        if patient_age.get('month') > 0:
            data['examination']['diagnosis_add_but']['НПР'].set('1-я группа')
        if patient_age.get('month') < 3:
            data['examination']['diagnosis_add_but']['Режим дня №'].set('1')
        elif patient_age.get('month') < 6:
            data['examination']['diagnosis_add_but']['Режим дня №'].set('2')
        elif patient_age.get('month') < 9:
            data['examination']['diagnosis_add_but']['Режим дня №'].set('3')
        elif patient_age.get('year') == 0:
            data['examination']['diagnosis_add_but']['Режим дня №'].set('4')
        else:
            data['examination']['diagnosis_add_but']['Режим дня №'].set('4')
        select_button()



        frame_diagnosis_add_but.columnconfigure(index='all', minsize=40, weight=1)
        frame_diagnosis_add_but.rowconfigure(index='all', minsize=20)
        frame_diagnosis_add_but.pack(fill='both', expand=True)

    if child_marker:
        paste_diagnosis_add_but()

    def open_analyzes_root():
        if not data['examination']['analyzes'].get('is_analyzes_root_open'):
            data['examination']['analyzes']['is_analyzes_root_open'] = True
            analyzes_root_main.grid()
        else:
            data['examination']['analyzes']['is_analyzes_root_open'] = False
            analyzes_root_main.grid_remove()

    def create_analyzes_root():
        def create_anal_doc():
            if not data['examination']['analyzes'].get('patient_anal'):
                messagebox.showerror('Ошибка!', "Выберите хотя бы один анализ!")
            else:
                render_data.clear()

                render_data['ped_div'] = user.get('ped_div')
                render_data['doc_name'] = user.get('doctor_name')
                render_data['district'] = patient.get('patient_district')
                render_data['name'] = patient.get('name')
                render_data['birth_date'] = patient.get('birth_date')
                render_data['address'] = patient.get('address')
                render_data['gender'] = patient.get('gender')
                render_data['date'] = datetime.now().strftime("%d.%m.%Y")
                render_data['amb_cart'] = patient.get('amb_cart')
                render_data['diagnosis'] = txt_diagnosis.get(1.0, 'end').strip().replace('Диагноз:', "")

                if 'blood-inf__ГЕПАТИТ' in data['examination']['analyzes'].get('patient_anal'):
                    with sq.connect(f".{os.sep}data_base{os.sep}patient_data_base.db") as conn:
                        cur = conn.cursor()
                        cur.execute(f"SELECT Прививки FROM patient_data WHERE amb_cart LIKE '{patient.get('amb_cart')}'")
                        vaccination = cur.fetchone()[0]
                    if vaccination:
                        vaccination = vaccination.split('\n')
                        start = vaccination.index('Прививки против гепатита В')
                        stop = vaccination.index('Прививки против кори, эпидемического паротита и краснухи')
                        text = ''
                        counter = 0
                        for index in range(start + 1, stop):
                            counter += 1
                            if counter % 2 == 0:
                                end = '\n'
                            else:
                                end = '\t\t'

                            index_str = vaccination[index].split('__')
                            text += f"V_{counter}: {index_str[1]} --- {index_str[3]} --- {index_str[6]}{end}"
                        if not text:
                            text = 'Нет данных о вакцинации\n'

                    else:
                        text = 'Нет данных о вакцинации\n'

                    render_data['VGB_vaccination'] = text

                all_links = list()
                for anal_name in data['examination']['analyzes'].get('patient_anal'):
                    category, anal_name = anal_name.split('__')

                    doc = DocxTemplate(f".{os.sep}example{os.sep}{category}{os.sep}{anal_name}.docx")
                    doc.render(render_data)
                    doc.save(f".{os.sep}generated{os.sep}{anal_name}.docx")
                    all_links.append(f".{os.sep}generated{os.sep}{anal_name}.docx")

                master = Document(all_links.pop(0))
                composer = Composer(master)
                for link in all_links:
                    master.add_page_break()
                    doc_temp = Document(link)
                    composer.append(doc_temp)
                doc_name = f".{os.sep}generated{os.sep}Анализы.docx"
                doc_name = save_document(doc=composer, doc_name=doc_name)
                data['examination']['analyzes']['patient_anal'].clear()
                for btn_name in data['examination']['analyzes'].get('anal_name_buttons'):
                    active_btn = data['examination']['analyzes']['anal_name_buttons'].get(btn_name)
                    active_btn['bg'] = '#cdcdcd'
                    active_btn['text'] = f"{btn_name.split('__')[-1]}"

                selected_anal.set('')
                render_data.clear()
                open_analyzes_root()

                run_document(doc_name)

                data_base(command="statistic_write",
                          insert_data="Анализы")


        def select_anal_name():

            category, anal_name = selected_button.get().split('__')
            if category == 'add':
                if anal_name == 'ОАК  +  ФОРМУЛА':
                    anal_name = 'blood__ОАК + ФОРМУЛА'
                    if anal_name not in data['examination']['analyzes'].get('patient_anal'):
                        data['examination']['analyzes']['patient_anal'].append("blood__ОАК + ФОРМУЛА")
                        active_btn = data['examination']['analyzes']['anal_name_buttons'].get("blood__ОАК + ФОРМУЛА")
                        active_btn['bg'] = '#77f1ff'
                        active_btn['text'] = f"✔{anal_name}"
                else:
                    for marker in anal_name.split(' + '):
                        for btn_name in data['examination']['analyzes'].get('anal_name_buttons'):
                            if (marker in btn_name
                                    and 'add' not in btn_name
                                    and btn_name not in data['examination']['analyzes'].get('patient_anal')):
                                data['examination']['analyzes']['patient_anal'].append(btn_name)
                                active_btn = data['examination']['analyzes']['anal_name_buttons'].get(btn_name)
                                active_btn['bg'] = '#77f1ff'
                                active_btn['text'] = f"✔{marker}"
                                break
            else:
                btn_name = f"{category}__{anal_name}"
                active_btn = data['examination']['analyzes']['anal_name_buttons'].get(btn_name)

                if btn_name in data['examination']['analyzes'].get('patient_anal'):
                    data['examination']['analyzes']['patient_anal'].remove(btn_name)
                    active_btn['bg'] = '#cdcdcd'
                    active_btn['text'] = f"{anal_name}"
                else:
                    data['examination']['analyzes']['patient_anal'].append(btn_name)
                    active_btn['bg'] = '#77f1ff'
                    active_btn['text'] = f"✔{anal_name}"



            if 'blood__ОАК' in data['examination']['analyzes'].get('patient_anal') and \
                ('blood__ОАК + ФОРМУЛА' in data['examination']['analyzes'].get('patient_anal')
                 or 'blood__ОАК + СВЕРТЫВАЕМОСТЬ' in data['examination']['analyzes'].get('patient_anal')):
                data['examination']['analyzes']['patient_anal'].remove("blood__ОАК")
                data['examination']['analyzes']['anal_name_buttons'][f"blood__ОАК"]['bg'] = '#cdcdcd'
                data['examination']['analyzes']['anal_name_buttons'][f"blood__ОАК"]['text'] = "ОАК"

            lbl_text = "Анализы: "
            for anal_name in data['examination']['analyzes'].get('patient_anal'):
                category, anal_name = anal_name.split('__')
                lbl_text += f"{anal_name}, "
                if len(lbl_text.split('\n')[-1]) > 40:
                    lbl_text += '\n'


            lbl_text = lbl_text.strip()[:-1]
            selected_anal.set(lbl_text)
            lbl_text = lbl_text.replace('\n', '').lower().replace('анализы', 'Анализы')

            prescription_text = txt_prescription.get(1.0, 'end').strip()
            for string in prescription_text.split('\n'):
                if string.startswith("Анализы:"):
                    prescription_text = prescription_text.replace(string, lbl_text)
                    break
            else:
                prescription_text = f"{lbl_text}\n{prescription_text}"
            txt_prescription.delete(1.0, 'end')
            txt_prescription.insert(1.0, prescription_text)

        def select_anal_category():
            if data['examination']['analyzes'].get('frame_anal_active'):
                frame_anal_active = data['examination']['analyzes'].get('frame_anal_active')
                frame_anal_active.pack_forget()
            master_frame = data['examination']['analyzes']['anal_category_frames'].get(selected_button.get())
            data['examination']['analyzes']['frame_anal_active'] = master_frame
            master_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)

        data['examination']['analyzes'] = {
            'is_analyzes_root_open': False,
            'frame_anal_active': None,
            'anal_name_buttons': dict(),
            'anal_category_frames': dict(),
            'patient_anal': list()}

        frame_main_analyzes = Frame(analyzes_root_main, bg="#36566d")
        anal_frame_category = Frame(analyzes_root_main)

        selected_anal = StringVar()

        Label(frame_main_analyzes, textvariable=selected_anal,
              font=('Comic Sans MS', user.get('text_size')),
              bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')

        Button(frame_main_analyzes, text=f"Закрыть окно",
               font=('Comic Sans MS', user.get('text_size')),
               command=open_analyzes_root,
               bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
        Button(frame_main_analyzes, text=f"Создать документ",
               font=('Comic Sans MS', user.get('text_size')),
               command=create_anal_doc,
               bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')

        Label(frame_main_analyzes, text=f"Категории анализов:\n{'_'*50}",
              font=('Comic Sans MS', user.get('text_size')),
              bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')


        for category in all_blanks_anal:
            Radiobutton(frame_main_analyzes, text=all_blanks_anal.get(category)[0],
                        font=('Comic Sans MS', user.get('text_size')),
                        value=category, variable=selected_button,
                        command=select_anal_category,
                        indicatoron=False, selectcolor='#77f1ff',
                        bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3)

            master_frame = Frame(anal_frame_category)
            for anal_name in all_blanks_anal.get(category)[1:]:
                btn = Radiobutton(master_frame, text=f'{anal_name}',
                                    font=('Comic Sans MS', user.get('text_size')),
                                    value=f"{category}__{anal_name}", variable=selected_button,
                                    command=select_anal_name,
                                    indicatoron=False, selectcolor='#77f1ff',
                                    bg='#cdcdcd')
                btn.pack(fill='both', expand=True, anchor='n')
                data['examination']['analyzes']['anal_name_buttons'][f"{category}__{anal_name}"] = btn
            data['examination']['analyzes']['anal_category_frames'][category] = master_frame



        frame_main_analyzes.pack(fill='x', anchor='n')
        anal_frame_category.pack(fill='both', expand=True)
        analyzes_root_main.grid(row=0, column=3, sticky="nwse", rowspan=3)
        analyzes_root_main.grid_remove()

    analyzes_root_main = Frame(master=root_examination, padx=3, pady=3, bg="#36566d")
    analyzes_root_main.update_idletasks()
    create_analyzes_root()

    def open_consultation_root():
        if not data['examination']['consultation'].get('is_consultation_root_open'):
            data['examination']['consultation']['is_consultation_root_open'] = True
            consultation_root_main.grid()
        else:
            data['examination']['consultation']['is_consultation_root_open'] = False
            consultation_root_main.grid_remove()

    def create_consultation_root():
        cons_doc = ("офтальмолога", "хирурга", "оториноларинголога",
                    "гастроэнтеролога", "пульмонолога", "невролога",
                    "R-грамма ОГК", "R-грамма ППН", "ЭКГ")

        def create_consult_doc():
            if not data['examination']['consultation'].get('patient_consult'):
                messagebox.showerror('Ошибка!', "Выберите хотя бы одного специалиста!")
            else:

                render_data['address_hospital'] = ' '
                render_data['hospital'] = 'УЗ 19-я Городская детская поликлиника'
                render_data['diagnosis'] = txt_diagnosis.get(1.0, 'end').strip().replace('Диагноз:', "")

                render_data['ped_div'] = user.get('ped_div')
                render_data['doc_name'] = user.get('doctor_name')
                render_data['district'] = patient.get('patient_district')
                render_data['name'] = patient.get('name')
                render_data['birth_date'] = patient.get('birth_date')
                render_data['address'] = patient.get('address')
                render_data['gender'] = patient.get('gender')
                render_data['date'] = datetime.now().strftime("%d.%m.%Y")
                render_data['amb_cart'] = patient.get('amb_cart')


                all_links = list()
                for consult_name in data['examination']['consultation'].get('patient_consult'):
                    render_data['doctor'] = consult_name

                    doc = DocxTemplate(f".{os.sep}example{os.sep}direction{os.sep}НА КОНСУЛЬТАЦИЮ.docx")
                    doc.render(render_data)
                    doc.save(f".{os.sep}generated{os.sep}напр_{consult_name}.docx")
                    all_links.append(f".{os.sep}generated{os.sep}напр_{consult_name}.docx")

                master = Document(all_links.pop(0))
                composer = Composer(master)
                for link in all_links:
                    master.add_page_break()
                    doc_temp = Document(link)
                    composer.append(doc_temp)
                doc_name = f".{os.sep}generated{os.sep}Направление.docx"
                doc_name = save_document(doc=composer, doc_name=doc_name)
                data['examination']['consultation']['patient_consult'].clear()
                for btn_name in data['examination']['consultation'].get('consult_name_buttons'):
                    active_btn = data['examination']['consultation']['consult_name_buttons'].get(btn_name)
                    active_btn['bg'] = '#cdcdcd'
                    active_btn['text'] = f"{btn_name.split('__')[-1]}"

                selected_consult.set('')
                render_data.clear()
                open_consultation_root()
                run_document(doc_name)

                data_base(command="statistic_write",
                          insert_data="Направление")

        def select_consult_name():

            consult_name = selected_button.get()
            active_btn = data['examination']['consultation']['consult_name_buttons'].get(consult_name)

            if consult_name in data['examination']['consultation'].get('patient_consult'):
                data['examination']['consultation']['patient_consult'].remove(consult_name)
                active_btn['bg'] = '#cdcdcd'
                active_btn['text'] = f"{consult_name}"
            else:
                data['examination']['consultation']['patient_consult'].append(consult_name)
                active_btn['bg'] = '#77f1ff'
                active_btn['text'] = f"✔{consult_name}"


            lbl_text = "Консультация: "
            for consult_name in data['examination']['consultation'].get('patient_consult'):
                lbl_text += f"{consult_name}, "
                if len(lbl_text.split('\n')[-1]) > 40:
                    lbl_text += '\n'

            lbl_text = lbl_text.strip()[:-1]
            selected_consult.set(lbl_text)
            lbl_text = lbl_text.replace('\n', '')
            prescription_text = txt_prescription.get(1.0, 'end').strip()
            for string in prescription_text.split('\n'):
                if string.startswith("Консультация:"):
                    prescription_text = prescription_text.replace(string, lbl_text)
                    break
            else:
                prescription_text = f"{lbl_text}\n{prescription_text}"
            txt_prescription.delete(1.0, 'end')
            txt_prescription.insert(1.0, prescription_text)

        data['examination']['consultation'] = {
            'is_consultation_root_open': False,
            'consult_name_buttons': dict(),
            'patient_consult': list()}

        frame_main_consultation = Frame(consultation_root_main, bg="#36566d")
        consult_frame_category = Frame(consultation_root_main)

        selected_consult = StringVar()

        Label(frame_main_consultation, textvariable=selected_consult,
              font=('Comic Sans MS', user.get('text_size')),
              bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')

        Button(frame_main_consultation, text=f"Закрыть окно",
               font=('Comic Sans MS', user.get('text_size')),
               command=open_consultation_root,
               bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
        Button(frame_main_consultation, text=f"Создать документ",
               font=('Comic Sans MS', user.get('text_size')),
               command=create_consult_doc,
               bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')

        Label(frame_main_consultation, text=f"Специалисты:\n{'_' * 50}",
              font=('Comic Sans MS', user.get('text_size')),
              bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')

        for consult_name in cons_doc:
            btn = Radiobutton(consult_frame_category, text=consult_name,
                              font=('Comic Sans MS', user.get('text_size')),
                              value=consult_name, variable=selected_button,
                              command=select_consult_name,
                              indicatoron=False, selectcolor='#77f1ff',
                              bg='#cdcdcd')
            btn.pack(fill='both', expand=True, anchor='n')
            data['examination']['consultation']['consult_name_buttons'][consult_name] = btn

        frame_main_consultation.pack(fill='x', anchor='n')
        consult_frame_category.pack(fill='both', expand=True)
        consultation_root_main.grid(row=0, column=3, sticky="nwse", rowspan=3)
        consultation_root_main.grid_remove()

    consultation_root_main = Frame(master=root_examination, padx=3, pady=3, bg="#36566d")
    consultation_root_main.update_idletasks()
    create_consultation_root()

    def paste_frame_prescription():
        label_prescription = Label(master=frame_prescription_main,
                                   text="Рекомендации",
                                   font=('Comic Sans MS', user.get('text_size')), bg='white')
        label_prescription.grid(row=0, column=0, sticky='ew')

        txt_prescription.grid(column=0, row=1, sticky='nwse', columnspan=2)

        data['examination']['prescription_but'] = dict()
        for mark_ in all_data_diagnosis.get('prescription'):
            for mark_2_ in mark_[1:]:
                data['examination']['prescription_but'][f"{mark_[0]}_{mark_2_}"] = IntVar()

        change_prescription_kb_button.grid(column=1, row=0, sticky='ew')

        frame_prescription_main.columnconfigure(index='all', minsize=40, weight=1)
        frame_prescription_main.rowconfigure(index='all', minsize=20)
        frame_prescription_main.pack(fill='both', expand=True, side=tk.LEFT)

        paste_prescription_kb()
        frame_prescription.columnconfigure(index='all', minsize=40, weight=1)
        frame_prescription.rowconfigure(index='all', minsize=20)
        frame_prescription.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)

    def select_prescription_frame():
        if data['examination']['prescription_frame'].get('last_open_frame', '') == selected_prescription_frame.get():
            data['examination']['prescription_frame'].get('open_frame').pack_forget()
            data['examination']['prescription_frame']['last_open_frame'] = ''
        else:

            if data['examination']['prescription_frame'].get('open_frame'):
                data['examination']['prescription_frame'].get('open_frame').pack_forget()

            frame_loc = data['examination']['prescription_frame'].get(selected_prescription_frame.get())
            data['examination']['prescription_frame']['open_frame'] = frame_loc
            frame_loc.pack(fill='both', expand=True)
            data['examination']['prescription_frame']['last_open_frame'] = selected_prescription_frame.get()

    def select_prescription():
        prescription_text = txt_prescription.get(1.0, 'end').strip()
        prescription_button = selected_button.get()
        selected_button.set('')
        mark_1, mark_2 = prescription_button.split('_')


        edited_string = ''
        if mark_1 == 'Разрешена вакцинация':
            if 'Информирован(а)' in mark_2 and mark_2 in prescription_text:
                prescription_text = prescription_text.replace(mark_2, '')
            if 'Медотвод от проф' in mark_2 and mark_2 in prescription_text:
                prescription_text = prescription_text.replace(mark_2, '')

            else:
                if mark_2[-1] != '-':
                    mark_2 = f"{mark_2},"
                for string in prescription_text.split('\n'):
                    if string.startswith(mark_1):
                        edited_string = string
                        if edited_string[-1] in (',', '-'):
                            edited_string += ' '
                        edited_string += f"{mark_2} "
                        prescription_text = prescription_text.replace(string, edited_string)

                        break
                else:
                    prescription_text = f"{mark_1}: {mark_2} " \
                                        f"\nИнформирован(а) о проводимой прививке. " \
                                        f"\nС особенностями течения периода после иммунизации ОЗНАКОМЛЕН(А) _________" \
                                        f"\n{prescription_text}"




        elif data['examination']['prescription_but'].get(prescription_button):
            if data['examination']['prescription_but'][prescription_button].get():
                data['examination']['prescription_but'][prescription_button].set(0)

                for string in prescription_text.split('\n'):
                    if string.startswith(mark_1):
                        edited_string = string
                        if mark_2 in edited_string:
                            for i in (f"{mark_2}, ", f"{mark_2},", f", {mark_2}",
                                      f"{mark_2} ", f"{mark_2}"):
                                if i in edited_string:
                                    edited_string = edited_string.replace(i, '')
                                    prescription_text = prescription_text.replace(string, edited_string)

                            for btn in data['examination'].get('prescription_but'):
                                if btn.startswith(mark_1) and data['examination']['prescription_but'][btn].get():
                                    break
                            else:
                                prescription_text = prescription_text.replace(edited_string, '')

            else:
                data['examination']['prescription_but'][prescription_button].set(1)

                for string in prescription_text.split('\n'):
                    if string.startswith(mark_1):
                        edited_string = string
                        if edited_string[-1] == ',':
                            edited_string += ' '
                        edited_string += f"{mark_2}, "
                        prescription_text = prescription_text.replace(string, edited_string)

                        break
                else:
                    prescription_text = f"{mark_1}: {mark_2}, \n" + prescription_text

        for button_name in data['examination'].get('prescription_buttons_color'):
            if data['examination']['prescription_but'].get(button_name):
                if data['examination']['prescription_but'].get(button_name).get() == 1:
                    data['examination']['prescription_buttons_color'][button_name]['bg'] = '#77f1ff'
                else:
                    data['examination']['prescription_buttons_color'][button_name]['bg'] = '#cdcdcd'




        txt_prescription.delete(1.0, 'end')
        txt_prescription.insert(1.0, prescription_text.strip().replace('\n\n', '\n'))

        frame_prescription_main.columnconfigure(index='all', minsize=40, weight=1)
        frame_prescription_main.rowconfigure(index='all', minsize=20)

        frame_prescription.columnconfigure(index='all', minsize=40, weight=1)
        frame_prescription.rowconfigure(index='all', minsize=20)

    def select_drugs_item(drug_name=None, weight=None):
        if drug_name:
            drug_category, drug_name, mark_flag, mark = drug_name.split('__')
        else:
            drug_category, drug_name, mark_flag, mark = selected_button.get().split('__')
            selected_button.set('')


        if not data['examination'].get('selected_drugs'):
            data['examination']['selected_drugs'] = dict()

        if not data['examination']['selected_drugs'].get(drug_category):
            data['examination']['selected_drugs'][drug_category] = dict()
        if not data['examination']['selected_drugs'][drug_category].get(drug_name):
            data['examination']['selected_drugs'][drug_category][drug_name] = dict()

        if mark_flag == "Способ применения":
            if not data['examination']['selected_drugs'][drug_category][drug_name].get(mark_flag):
                data['examination']['selected_drugs'][drug_category][drug_name][mark_flag] = list()
            if mark in data['examination']['selected_drugs'][drug_category][drug_name].get(mark_flag):
                data['examination']['selected_drugs'][drug_category][drug_name][mark_flag].remove(mark)
            else:
                data['examination']['selected_drugs'][drug_category][drug_name][mark_flag].append(mark)

        else:
            data['examination']['selected_drugs'][drug_category][drug_name][mark_flag] = mark

        prescription_text = txt_prescription.get(1.0, 'end').strip()
        edited_string = ''

        if not weight:
            weight = data['examination']['anthro']['txt_weight_variable'].get()
            if child_marker:
                if weight:
                    weight = float(weight.replace(',', '.')) / 1000
                else:
                    weight = "None"

        if weight:
            if weight == "None":
                weight = None
            else:
                if isinstance(weight, str):
                    weight = float(weight.replace(',', '.'))
                if weight > 40:
                    weight = 40

        if drug_category == 'Антибиотики':
            if drug_name == "Амоксициллин":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    if age < 7:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 250/5'
                    elif age < 10:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 250 мг'
                    elif age < 15:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 500 мг'
                    else:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 1000 мг'

                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '50 мг/кг/сут'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'

            elif drug_name == "Амоксициллин + клавулановая кислота":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    if age < 4:
                        data['examination']['selected_drugs'][drug_category][drug_name][
                            'Форма'] = 'суспензия 200/28.5/5'
                    elif age < 8:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 400/57/5'
                    elif age < 15:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 500/125 мг'
                    else:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 875/125 мг'

                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '50 мг/кг/сут'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'

            elif drug_name == "Цефуроксим":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    if age < 7:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 125/5'
                    elif age < 14:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 125'
                    else:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 250'

                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '20 мг/кг/сут'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'

            elif drug_name == "Кларитромицин":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    if age < 4:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 125/5'
                    elif age < 13:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 250/5'
                    else:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 250'

                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '15 мг/кг/сут'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'

            elif drug_name == "Азитромицин":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    if age < 12:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 200/5'
                    else:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 250'

                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '10 мг/кг/сут'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут'

            elif drug_name == "Цефдинир":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    if age < 4:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 125/5'
                    elif age < 13:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 250/5'
                    else:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 300'

                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '14 мг/кг/сут'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'

        elif drug_category == 'ОРИ':

            if drug_name == "Парацетамол":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'автоматически'

                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '15 мг/кг'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Способ применения'):
                    if mark_flag != 'Способ применения':

                        data['examination']['selected_drugs'][drug_category][drug_name]['Способ применения'] = \
                            ['принимать при температуре 38.5 и выше', 'с интервалом не меньше 6 часов']

            elif drug_name == "Ибупрофен":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'автоматически'

                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '10 мг/кг'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Способ применения'):
                    if mark_flag != 'Способ применения':
                        data['examination']['selected_drugs'][drug_category][drug_name]['Способ применения'] = \
                            ['принимать при температуре 38.5 и выше', 'с интервалом не меньше 8 часов']

            elif drug_name == "Оксиметазолин - капли в нос":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    if age < 1:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = '0.01%'
                    else:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = '0.025%'

                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Длительность'):
                    data['examination']['selected_drugs'][drug_category][drug_name][
                        'Длительность'] = 'не дольше 5 дней'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Способ применения'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Способ применения'] = \
                        ['при заложенности носа']

            elif drug_name == "Ксилометазолин - капли в нос":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    if age < 13:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = '0.05%'
                    else:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = '0.1%'

                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '3 р/сут'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Длительность'):
                    data['examination']['selected_drugs'][drug_category][drug_name][
                        'Длительность'] = 'не дольше 5 дней'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Способ применения'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Способ применения'] = \
                        ['при заложенности носа']

            elif drug_name == "Феназон+Лидокаин (отисфен) - капли ушные":

                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = 'по 1-2 капли'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '3 р/сут'

            elif drug_name == "Рифамицин (отофа) - капли ушные":

                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = 'по 1-2 капли'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '3 р/сут'

        elif drug_category == 'Бронхолитики':

            if drug_name == "Монтелукаст":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    if age < 7:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 4мг'
                    elif age < 17:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 5мг'
                    else:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 10мг'

                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1 таб'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут на ночь'

        elif drug_category == 'Глазные капли':

            if drug_name == "Нитрофурал (фурацилин)":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = \
                        'раствор для наружного применения 0.02%'

                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = \
                        'промывать глаза по мере загноения'

            elif drug_name in ("Тобрамицин - капли глазные 0.3%", "Дексаметазон+Тобрамицин - капли глазные",
                               "Дексаметазон - капли глазные 0.1%", "Диклофенак - капли глазные 0.1%"):

                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = 'по 1-2 капли'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '3 р/сут'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Длительность'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Длительность'] = '5 дней'


        elif drug_category == 'Антигистаминные':

            if drug_name == "Цетиризин":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    if age < 7:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'кап. 10мг/мл-20мл'
                    else:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 10мг'

                if not (data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка') and
                        data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность')):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут'
                    if data['examination']['selected_drugs'][drug_category][drug_name].get('Форма') == 'кап. 10мг/мл-20мл':
                        if age < 3:
                            data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '5 капель'
                        elif age < 12:
                            data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '10 капель'
                        else:
                            data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '20 капель'

                    if data['examination']['selected_drugs'][drug_category][drug_name].get('Форма') == 'таб. 10мг':
                        if age < 12:
                            data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1/2 таб'
                        else:
                            data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1 таб'


            elif drug_name == "Лоратадин":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    if age < 7:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 5мг/5мл'
                    else:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 10мг'

                if not (data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка') and
                        data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность')):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут'
                    if data['examination']['selected_drugs'][drug_category][drug_name].get(
                            'Форма') == 'суспензия 5мг/5мл':
                        if age < 12:
                            data['examination']['selected_drugs'][drug_category][drug_name][
                                'Дозировка'] = '5 миллилитров'
                        else:
                            data['examination']['selected_drugs'][drug_category][drug_name][
                                'Дозировка'] = '10 миллилитров'

                    if data['examination']['selected_drugs'][drug_category][drug_name].get('Форма') == 'таб. 10мг':
                        if age < 12:
                            data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1/2 таб'
                        else:
                            data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1 таб'


            elif drug_name == "Дезлоратадин":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    if age < 12:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 0.5мг/мл'
                    else:
                        data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 5мг'

                if not (data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка') and
                        data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность')):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут'
                    if data['examination']['selected_drugs'][drug_category][drug_name].get(
                            'Форма') == 'суспензия 0.5мг/мл':
                        if age < 6:
                            data['examination']['selected_drugs'][drug_category][drug_name][
                                'Дозировка'] = '2.5 миллилитра'
                        elif age < 12:
                            data['examination']['selected_drugs'][drug_category][drug_name][
                                'Дозировка'] = '5 миллилитров'
                        else:
                            data['examination']['selected_drugs'][drug_category][drug_name][
                                'Дозировка'] = '10 миллилитров'

                    if data['examination']['selected_drugs'][drug_category][drug_name].get('Форма') == 'таб. 5мг':
                        if age < 12:
                            data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1/2 таб'
                        else:
                            data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1 таб'

        elif drug_category == 'Льготные':
            if drug_name == "Холекальциферол":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = \
                        'масляный раствор для приема внутрь 0.5мг/мл 10мл'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = 'по 1 капле'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут'

            elif drug_name == "Бифидумбактерин":
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = \
                        'порошок для приг. раствора внутр. 5доз N10'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '5 доз (1 флакон)'
                if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
                    data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '3 р/сут'




        all_but_names = list()
        for marker in data['examination']['selected_drugs'][drug_category].get(drug_name):
            if data['examination']['selected_drugs'][drug_category][drug_name].get(marker):
                if marker == "Способ применения":
                    for marker_2 in data['examination']['selected_drugs'][drug_category][drug_name].get(marker):
                        all_but_names.append(f"{drug_category}__{drug_name}__{marker}__{marker_2}")
                else:
                    marker_2 = data['examination']['selected_drugs'][drug_category][drug_name].get(marker)
                    all_but_names.append(f"{drug_category}__{drug_name}__{marker}__{marker_2}")

        for button_name in data['examination'].get('all_drug_buttons'):
            if button_name.startswith(f"{drug_category}__{drug_name}"):
                if button_name in all_but_names:
                    data['examination']['all_drug_buttons'][button_name]['bg'] = '#77f1ff'
                else:
                    data['examination']['all_drug_buttons'][button_name]['bg'] = '#cdcdcd'

        if drug_category == 'Антибиотики':
            ab_weight = []

            if weight and drug_name not in ('Фосфомицин', 'Фуразидин (Фурагин)'):

                ab_key_dosa = data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка')
                ab_key_form = data['examination']['selected_drugs'][drug_category][drug_name].get('Форма')
                ab_key_count = data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность', '')

                edited_string = f"{drug_name}: {ab_key_form}  -- "

                ab_weight = ab_key_form.split('/')[0].split(' ')[-1].strip()

                ab_dosage = int(ab_key_dosa.split()[0])
                ab_dosage_day = weight * ab_dosage
                ab_volume_day = ab_dosage_day / int(ab_weight)

                ab_key_count_loc = None
                if ab_key_count:
                    if ab_key_count == '1-й день - 2 р/сут, далее - 1 р/сут':
                        ab_key_count_loc = 1
                    else:
                        ab_key_count_loc = int(ab_key_count.replace(' р/сут', ''))
                if not ab_key_count_loc:
                    ab_key_count_loc = 2
                    if drug_name == 'Азитромицин':
                        ab_key_count_loc = 1

                ab_volume_single = ab_volume_day / ab_key_count_loc
                if 'суспензия' in ab_key_form:
                    ab_volume_single = ab_volume_single * 5
                    edited_string += f" по {round(ab_volume_single, 1)} мл. "
                    if ab_key_count:
                        edited_string += f"{ab_key_count} "
                    else:
                        edited_string += f"{ab_key_count_loc} р/сут "
                    edited_string += f"({round(ab_dosage_day / weight)}мг/кг/сут)  "


                else:
                    if str(ab_volume_single).split('.')[-1][0] in ('4', '5', '6'):
                        ab_volume_single = float(f"{str(ab_volume_single).split('.')[0]}.5")
                    else:
                        ab_volume_single = round(ab_volume_single)
                    edited_string += f" по {round(ab_volume_single, 1)} таб. "

                    if ab_key_count:
                        edited_string += f"{ab_key_count} "
                    else:
                        edited_string += f"{ab_key_count_loc} р/сут "
                    edited_string += f"({round((ab_volume_single * ab_key_count_loc * int(ab_weight)) / weight)}" \
                                     f"мг/кг/сут) "

                edited_string += \
                    data['examination']['selected_drugs'][drug_category][drug_name].get('Длительность', '') + ' -- '
                for marker in data['examination']['selected_drugs'][drug_category][drug_name].get('Способ применения',
                                                                                                  []):
                    edited_string += marker + ', '


            else:
                edited_string = f"{drug_name}: "
                for marker in ("Форма", "Дозировка", "Кратность", "Длительность"):
                    if data['examination']['selected_drugs'][drug_category][drug_name].get(marker, ''):
                        edited_string += \
                            data['examination']['selected_drugs'][drug_category][drug_name].get(marker, '') + ' -- '
                for marker in data['examination']['selected_drugs'][drug_category][drug_name].get('Способ применения',
                                                                                                  []):
                    edited_string += marker + ', '

        elif drug_category == 'ОРИ':
            if drug_name in ('Парацетамол', 'Ибупрофен'):
                drug__form = data['examination']['selected_drugs'][drug_category][drug_name].get('Форма', "")
                drug__dosa = data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка', "")

                if weight:

                    if drug_name == 'Парацетамол' and drug__form:
                        text_paracetamol = f"{drug_name}: "
                        if drug__dosa:
                            drug__dosa = float(drug__dosa.replace(' мг/кг', ''))
                        else:
                            drug__dosa = 12.5
                        paracetamol_min, paracetamol_max = (weight * 10, weight * 15)

                        if drug__form == 'суппозитории' or (drug__form == 'автоматически' and age <= 5):

                            supp = []
                            for i in (50, 80, 100, 125, 150, 170, 250, 300, 330):
                                if paracetamol_min < i <= paracetamol_max:
                                    supp.append(i)
                            if supp:
                                supp_text = 'суппозитории '
                                for i in supp:
                                    supp_text += str(i) + 'мг., '
                                text_paracetamol += supp_text

                        if "суспензия" in drug__form or "раствор" in drug__form or (drug__form == 'автоматически' and age <= 12):
                            if drug__form == 'автоматически':
                                text_paracetamol += f'Раствор 30мг/мл -- ' \
                                                    f'по {round(weight * drug__dosa / 30, 1)} мл; '

                            else:
                                if '30' in drug__form:
                                    text_paracetamol += f'Раствор 30мг/мл -- ' \
                                                        f'по {round(weight * drug__dosa / 30, 1)} мл; '
                                else:
                                    text_paracetamol += f'Cуспензия 120 мг/5мл -- ' \
                                                        f'по {round(weight * drug__dosa / 24, 1)} мл; '

                        if "таб." in drug__form or age > 5 and drug__form == 'автоматически':
                            if '200' in drug__form or (drug__form == 'автоматически' and weight < 35):

                                if paracetamol_max < 100:
                                    text_paracetamol += ""
                                elif paracetamol_max < 200:
                                    text_paracetamol += "Таб. 200 мг -- по 1/2 таб; "
                                elif paracetamol_max < 300:
                                    text_paracetamol += "Таб. 200 мг -- по 1 таб; "
                                elif paracetamol_max < 400:
                                    text_paracetamol += "Таб. 200 мг -- по 1.5 таб; "
                                elif 400 <= paracetamol_max:
                                    text_paracetamol += "Таб. 200 мг -- по 2 таб; "

                            if '500' in drug__form or drug__form == 'автоматически':

                                if paracetamol_min < 250 <= paracetamol_max:
                                    text_paracetamol += "Таб. 500 мг -- по 1/2 т.; "
                                elif 500 <= paracetamol_max:
                                    text_paracetamol += "Таб. 500 мг -- по 1 т.; "
                        edited_string = text_paracetamol.strip() + ' '

                    elif drug_name == 'Ибупрофен':
                        if drug__dosa:
                            drug__dosa = float(drug__dosa.replace(' мг/кг', ''))
                        else:
                            drug__dosa = 7.5
                        text_ibuprofen = f"{drug_name}: "
                        ibuprofen_min, ibuprofen_max = (weight * 5, weight * 10)
                        if drug__form in ('автоматически', 'суппозитории'):
                            if ibuprofen_min < 60 <= ibuprofen_max:
                                text_ibuprofen += f'Супп. 60 мг.; '
                        if drug__form == 'суспензия 100 мг/5мл' or (drug__form == 'автоматически' and age < 3):
                            text_ibuprofen += f"суспензия 100мг/5мл -- по {round(drug__dosa * weight / 20, 1)}мл; "

                        if drug__form == 'суспензия 200 мг/5мл' or (drug__form == 'автоматически' and age >= 3):
                            text_ibuprofen += f"Cуспензия 200мг/5мл -- по {round(drug__dosa * weight / 40, 1)}мл; "

                        if drug__form == 'таб. 200 мг' or (drug__form == 'автоматически' and age > 5):
                            if ibuprofen_max < 100:
                                pass
                            elif ibuprofen_max < 200:
                                text_ibuprofen += "Таб. 200 мг -- по 1/2 таб; "
                            elif ibuprofen_max < 300:
                                text_ibuprofen += "Таб. 200 мг -- по 1 таб; "
                            elif ibuprofen_max < 400:
                                text_ibuprofen += "Таб. 200 мг -- по 1.5 таб; "
                            elif 400 <= ibuprofen_max:
                                text_ibuprofen += "Таб. 200 мг -- по 2 таб; "

                        if drug__form == 'таб. 400 мг':
                            if ibuprofen_max < 200:
                                pass
                            elif ibuprofen_max < 400:
                                text_ibuprofen += "Таб. 400 мг -- по 1/2 таб; "
                            elif 400 == ibuprofen_max:
                                text_ibuprofen += "Таб. 400 мг -- по 1 таб; "

                        edited_string = text_ibuprofen.strip() + ' '
                    edited_string += ' --  '
                    for marker in data['examination']['selected_drugs'][drug_category][drug_name].get(
                            'Способ применения', []):
                        edited_string += marker + ', '

                else:
                    edited_string = f"{drug_name}: "
                    if drug_name == 'Парацетамол' and drug__form == 'автоматически':
                        if age < 12:
                            edited_string += 'суспензия 30 мг/мл -- '
                        elif age < 15:
                            edited_string += 'таб. 200 мг -- '
                        else:
                            edited_string += 'таб. 500 мг -- '

                    elif drug_name == 'Ибупрофен' and drug__form == 'автоматически':
                        if age < 4:
                            edited_string += 'суспензия 100 мг/5мл -- '
                        elif age < 12:
                            edited_string += 'суспензия 200 мг/5мл -- '
                        else:
                            edited_string += 'таб. 200 мг -- '

                    else:
                        if drug__form:
                            edited_string += f'{drug__form} -- '

                    edited_string += f'{drug__dosa} -- '

                    for marker in data['examination']['selected_drugs'][drug_category][drug_name].get(
                            'Способ применения', []):
                        edited_string += marker + ', '

            else:
                edited_string = f"{drug_name}: "
                for marker in ("Форма", "Дозировка", "Кратность", "Длительность"):
                    if data['examination']['selected_drugs'][drug_category][drug_name].get(marker, ''):
                        edited_string += \
                            data['examination']['selected_drugs'][drug_category][drug_name].get(marker,
                                                                                                '') + ' -- '
                for marker in data['examination']['selected_drugs'][drug_category][drug_name].get(
                        'Способ применения', []):
                    edited_string += marker + ', '

        else:
            edited_string = f"{drug_name}: "
            for marker in ("Форма", "Дозировка", "Кратность", "Длительность"):
                if data['examination']['selected_drugs'][drug_category][drug_name].get(marker, ''):
                    edited_string += \
                        data['examination']['selected_drugs'][drug_category][drug_name].get(marker,
                                                                                            '') + ' -- '
            for marker in data['examination']['selected_drugs'][drug_category][drug_name].get(
                    'Способ применения', []):
                edited_string += marker + ', '

        edited_string = edited_string.strip()
        if edited_string[-1] == ',':
            edited_string = edited_string[:-1]
        elif edited_string[-1] == '-':
            edited_string = edited_string[:-2]

        deleted_string = ''
        for string in prescription_text.split('\n'):
            if string.startswith(drug_name):
                deleted_string = string
                break

        if deleted_string:
            prescription_text = prescription_text.replace(deleted_string, edited_string)
        else:
            prescription_text += f"\n{edited_string}"
        txt_prescription.delete(1.0, 'end')
        txt_prescription.insert(1.0, prescription_text.strip().replace('\n\n', '\n'))

    def open_drugs_root():
        if not data['examination'].get('is_drugs_root_open'):
            data['examination']['is_drugs_root_open'] = True
            drugs_root_main.grid()
        else:
            data['examination']['is_drugs_root_open'] = False
            drugs_root_main.grid_remove()

    def create_drugs_root():

        def create_recipe():
            drug_category, drug_name, marker_rp = selected_button.get().split('__')
            selected_button.set('')

            prescription_text = txt_prescription.get(1.0, 'end').strip().split('\n')
            edited_string = ''
            for string in prescription_text:
                if string.startswith(f"{drug_name}: "):
                    edited_string = string
            if not edited_string:
                messagebox.showerror("Ошибка!", "Перед созданием рецепта выберите препарат \n"
                                                "(форма/дозировка/способ применения)")
            elif (drug_category == 'ОРИ'
                  and drug_name in ('Парацетамол', 'Ибупрофен')
                  and data['examination']['selected_drugs'][drug_category][drug_name].get("Форма", '') == 'автоматически'):
                messagebox.showerror("Ошибка!", "Выберите определенную форму лекарства")

            else:

                d_t_d_n = '1 (одна упаковка)'
                drug_name_short = edited_string.split('--')[0].strip()


                if data['examination']['selected_drugs'][drug_category][drug_name].get("Форма", ''):
                    form = data['examination']['selected_drugs'][drug_category][drug_name].get("Форма", '')
                    if recipe_data.get(drug_category, dict()).get(drug_name, dict()).get(form):
                        d_t_d_n = recipe_data[drug_category][drug_name].get(form)

                signatura = edited_string.replace(drug_name_short, '').replace('--', '-').replace('  ', ' ')
                signatura = signatura.replace('выписан рецепт', '').replace('выписан льготный рецепт', '').strip()
                if signatura.startswith('-'):
                    signatura = signatura[1:]
                signatura = signatura.replace(' ,', '').strip()
                if 'суппозитории' in edited_string:
                    signatura = f"Ректально {signatura}"
                elif (drug_category != 'Бронхолитики'
                        and drug_category != 'Глазные капли'
                        and 'капли' not in drug_name
                        and 'спрей' not in drug_name
                        and 'Внутримышечно' not in signatura
                        and 'ингалляц' not in signatura):
                    signatura = f"Принимать внутрь {signatura}"

                render_data.clear()

                render_data['date'] = datetime.now().strftime("%d.%m.%Y")
                patient_name = ''
                for i in patient.get('name').strip().split():
                    if not patient_name:
                        patient_name += f"{i} "
                    else:
                        patient_name += f"{i[0]}."
                render_data['name_short'] = patient_name
                render_data['birth_date'] = patient.get('birth_date')
                render_data['doc_name'] = user.get('doctor_name')
                render_data['rp'] = f"{drug_name_short}\nD.t.d.n {d_t_d_n}\nS.: {signatura}"
                render_data['address'] = patient.get('address')
                render_data['drug_name'] = drug_name_short

                render_data['age'] = patient['age'].get('age_txt')

                doc = DocxTemplate(f".{os.sep}example{os.sep}certificate{os.sep}рецепт_{marker_rp}.docx")
                doc.render(render_data)
                doc_name = f".{os.sep}generated{os.sep}{patient.get('name').split()[0]}_рецепт.docx"
                doc_name = save_document(doc=doc, doc_name=doc_name)
                run_document(doc_name)

                render_data.clear()
                data_base(command="statistic_write",
                          insert_data="Рецепт")

        def select_drugs_category():
            for drug_category in data['examination'].get("all_drug_frame"):
                if '__' not in drug_category:
                    data['examination']['all_drug_frame'][drug_category].pack_forget()
            all_drug_frame = data['examination']['all_drug_frame'].get(selected_button.get())
            all_drug_frame.pack(fill='both', expand=True)
            all_drug_frame.update_idletasks()
            data['examination']['canvas_frame_scrolled'].yview_moveto(0)

        def select_drugs_name():
            if data['examination']['all_drug_frame'].get(selected_button.get()):
                edit_frame, marker = data['examination']['all_drug_frame'].get(selected_button.get())
                if marker:
                    edit_frame.pack_forget()
                    data['examination']['all_drug_frame'][selected_button.get()][1] = False
                    edit_frame = data['examination']['all_drug_frame'][selected_button.get().split("__")[0]]
                    edit_frame.columnconfigure(index='all', minsize=40, weight=1)
                    edit_frame.rowconfigure(index='all', minsize=20)
                    for drug_category in data['examination'].get("all_drug_frame"):
                        if '__' not in drug_category:
                            data['examination']['all_drug_frame'][drug_category].rowconfigure(index='all', minsize=20)
                        else:
                            data['examination']['all_drug_frame'][drug_category][0].rowconfigure(index='all',
                                                                                                 minsize=20)



                else:
                    data['examination']['all_drug_frame'][selected_button.get()][1] = True
                    edit_frame.columnconfigure(index='all', minsize=40, weight=1)
                    edit_frame.rowconfigure(index='all', minsize=20)

                    edit_frame.pack(fill='both', expand=True)

        def create_scroller_frame(master_frame, func):
            def resize(event):
                region = canvas.bbox(tk.ALL)
                canvas.configure(scrollregion=region)

            def on_binds(event):
                canvas.idbind = canvas.bind_all("<MouseWheel>", on_mousewheel)

            def off_binds(event=None):
                canvas.unbind_all("<MouseWheel>")

            def on_mousewheel(event):

                region = canvas.bbox(tk.ALL)
                canvas.configure(scrollregion=region)

                if os.name == 'posix':
                    canvas.yview_scroll(int(-1 * event.delta), "units")
                else:
                    canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

            scroll_x = tk.Scrollbar(master_frame, orient=tk.HORIZONTAL)
            scroll_y = tk.Scrollbar(master_frame, orient=tk.VERTICAL)

            canvas = tk.Canvas(master_frame,
                               xscrollcommand=scroll_x.set,
                               yscrollcommand=scroll_y.set)
            scroll_x.config(command=canvas.xview)
            scroll_y.config(command=canvas.yview)

            canvas_frame = Frame(canvas)

            data['examination']['canvas_frame_scrolled'] = canvas

            func(canvas_frame)
            #
            # canvas['width'] = int(canvas.winfo_geometry().split('x')[0])
            # canvas_frame['width'] = int(canvas.winfo_geometry().split('x')[0])

            canvas.grid(row=0, column=0, sticky="nsew")
            scroll_x.grid(row=1, column=0, sticky="we")
            scroll_y.grid(row=0, column=1, sticky="ns")

            master_frame.rowconfigure(0, weight=1)
            master_frame.columnconfigure(0, weight=1)

            master_frame.bind("<Configure>", resize)
            master_frame.update_idletasks()

            canvas.bind("<Enter>", on_binds)
            canvas.bind("<Leave>", off_binds)

            canvas.create_window((0, 0), window=canvas_frame, anchor="nw",
                                 width=canvas.winfo_width())

        def create_drugs_frame(frame):

            for drug_category in all_data_diagnosis.get("drugs"):
                all_drug_frame = Frame(frame, bg="#36566d")

                for drugs in all_data_diagnosis["drugs"].get(drug_category):
                    drug_name = drugs[0]
                    drug_frame = Frame(all_drug_frame)
                    drug_name_btn_text = drug_name
                    if drug_name == 'Амоксициллин + клавулановая кислота':
                        drug_name_btn_text = 'Амоксициллин\n+ клавулановая кислота'
                    elif drug_name == 'Бромгексин+Гвайфенезин+Сальбутамол+Ментол (Джосет)':
                        drug_name_btn_text = 'Бромгексин + Гвайфенезин \n+ Сальбутамол + Ментол \n(Джосет)'
                    elif '- капли' in drug_name_btn_text:
                        drug_name_btn_text = drug_name_btn_text.replace('- капли', '\n- капли')
                    elif '- мазь' in drug_name_btn_text:
                        drug_name_btn_text = drug_name_btn_text.replace('- мазь', '\n- мазь')


                    elif drug_name == 'Бромгексин+Гвайфенезин+Сальбутамол+Ментол (Джосет)':
                        drug_name_btn_text = 'Бромгексин + Гвайфенезин \n+ Сальбутамол + Ментол \n(Джосет)'

                    elif '(' in drug_name_btn_text:
                        drug_name_btn_text = drug_name_btn_text.replace('(', '\n(')

                    btn = Radiobutton(drug_frame, text=f'{drug_name_btn_text}',
                                      font=('Comic Sans MS', user.get('text_size')),
                                      value=f"{drug_category}__{drug_name}", variable=selected_button,
                                      command=select_drugs_name,
                                      indicatoron=False, selectcolor='#77f1ff')
                    btn.pack(fill='both', expand=True)

                    drug_frame_add = Frame(drug_frame)
                    mark_flag = ''
                    for mark in drugs[1:]:
                        if mark in ("Форма", "Дозировка", "Кратность", "Длительность", "Способ применения"):
                            mark_flag = mark
                            Label(drug_frame_add, text=f"{mark}",
                                  font=('Comic Sans MS', user.get('text_size')),
                                  bg="#36566d", fg='white').pack(fill='both', expand=True)
                        elif mark.startswith('Инструкция'):
                            Label(drug_frame_add, text=f"{mark}",
                                  font=('Comic Sans MS', user.get('text_size')),
                                  bg="#36566d", fg='white').pack(fill='both', expand=True, pady=2)


                        else:
                            btn_text = ''
                            for i in mark.split():
                                if len(btn_text.split('\n')[-1]) > 30:
                                    btn_text += '\n'
                                btn_text += f"{i} "
                            btn = Radiobutton(drug_frame_add, text=f'{btn_text}',
                                              font=('Comic Sans MS', user.get('text_size')),
                                              value=f"{drug_category}__{drug_name}__{mark_flag}__{mark}",
                                              variable=selected_button,
                                              command=select_drugs_item,
                                              indicatoron=False, selectcolor='#77f1ff',
                                              bg='#cdcdcd')
                            btn.pack(fill='both', expand=True)
                            data['examination']['all_drug_buttons'][f"{drug_category}__{drug_name}__{mark_flag}__" \
                                                                    f"{mark}"] = btn

                    Label(drug_frame_add, text="Рецепты:",
                          font=('Comic Sans MS', user.get('text_size')),
                          bg="#36566d", fg='white').pack(fill='both', expand=True)

                    Radiobutton(drug_frame_add, text=f'Выписать простой рецепт',
                                font=('Comic Sans MS', user.get('text_size')),
                                value=f"{drug_category}__{drug_name}__простой_а6",
                                variable=selected_button,
                                command=create_recipe,
                                indicatoron=False, selectcolor='#77f1ff',
                                bg='#cdcdcd').pack(fill='both', expand=True)

                    Radiobutton(drug_frame_add, text=f'Выписать льготный рецепт',
                                font=('Comic Sans MS', user.get('text_size')),
                                value=f"{drug_category}__{drug_name}__льготный_а6",
                                variable=selected_button,
                                command=create_recipe,
                                indicatoron=False, selectcolor='#77f1ff',
                                bg='#cdcdcd').pack(fill='both', expand=True)

                    data['examination']['all_drug_frame'][f"{drug_category}__{drug_name}"] = [drug_frame_add, False]

                    drug_frame_add.columnconfigure(index='all', minsize=40, weight=1)
                    drug_frame_add.rowconfigure(index='all', minsize=20)

                    drug_frame.columnconfigure(index='all', minsize=40, weight=1)
                    drug_frame.rowconfigure(index='all', minsize=20)

                    drug_frame.pack(fill='both', expand=True, pady=5)

                data['examination']['all_drug_frame'][drug_category] = all_drug_frame

                # if len(drugs[0]) > min_width:
                #     min_width = len(drugs[0])

                # all_drug_frame.pack(fill='both', expand=True)
            drug_category_frame.columnconfigure(index='all', minsize=40, weight=1)
            drug_category_frame.rowconfigure(index='all', minsize=20)

            drugs_root_main.columnconfigure(index='all', minsize=40, weight=1)
            drugs_root_main.rowconfigure(index='all', minsize=20)

        data['examination']['all_drug_frame'] = dict()

        drug_category_frame = Frame(drugs_root_main, bg="#36566d")
        all_drugs_frame_scrolled = Frame(drugs_root_main, bg="#36566d")

        Label(drug_category_frame, text="        Перечень лекарственных препаратов        ",
              font=('Comic Sans MS', user.get('text_size')),
              bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3)
        Button(drug_category_frame, text=f"Закрыть окно препаратов",
               font=('Comic Sans MS', user.get('text_size')),
               command=open_drugs_root,
               bg='#f0fffe').pack(fill='both', expand=True)

        drugs_list = [[]]
        for drug_category in all_data_diagnosis.get("drugs"):
            if len(drugs_list[-1]) == 3:
                drugs_list.append([])
            drugs_list[-1].append(drug_category)

        for drug_category_list in drugs_list:
            frame = Frame(drug_category_frame)
            for drug_category in drug_category_list:
                Radiobutton(frame, text=f'{drug_category}',
                            font=('Comic Sans MS', user.get('text_size')),
                            value=drug_category, variable=selected_button,
                            command=select_drugs_category,
                            indicatoron=False, selectcolor='#77f1ff',
                            bg="#36566d", fg='white').pack(fill='x', expand=True, side='left', ipady=4, ipadx=8)
            frame.pack(fill='x', expand=True)



        # for drug_category in all_data_diagnosis.get("drugs"):
        #     btn = Radiobutton(drug_category_frame, text=f'{drug_category}',
        #                       font=('Comic Sans MS', user.get('text_size')),
        #                       value=drug_category, variable=selected_button,
        #                       command=select_drugs_category,
        #                       indicatoron=False, selectcolor='#77f1ff',
        #                       bg="#36566d", fg='white')
        #
        #     btn.pack(fill='x', expand=True)

        drug_category_frame.pack(fill='x', anchor='nw')
        all_drugs_frame_scrolled.pack(fill='both', expand=True)
        data['examination']['is_drugs_root_open'] = False
        data['examination']['all_drug_buttons'] = dict()



        drugs_root_main.grid(row=0, column=3, sticky="nwse", rowspan=3)
        create_scroller_frame(master_frame=all_drugs_frame_scrolled, func=create_drugs_frame)

        drugs_root_main.grid_remove()

    drugs_root_main = Frame(master=root_examination, padx=3, pady=3)
    drugs_root_main.update_idletasks()
    create_drugs_root()


    def open_dispanser_root():
        if not data['examination'].get('is_dispanser_root_open'):
            data['examination']['is_dispanser_root_open'] = True
            dispanser_root_main.grid()
        else:
            data['examination']['is_dispanser_root_open'] = False
            dispanser_root_main.grid_remove()

    def create_dispanser_root():
        def celect_dispanser():
            txt_prescription.insert('end', f"\nОбсленование и наблюдение согласно постановлению МЗ РБ № 1201:"
                                           f"\n{celected_code.get()}")
            open_dispanser_root()

        def search_mkb(event=None):
            def resize(event=None):
                region = canvas.bbox(tk.ALL)
                canvas.configure(scrollregion=region)

            def on_binds(event):
                canvas.idbind = canvas.bind_all("<MouseWheel>", on_mousewheel)

            def off_binds(event=None):
                canvas.unbind_all("<MouseWheel>")

            def on_mousewheel(event):

                region = canvas.bbox(tk.ALL)
                canvas.configure(scrollregion=region)

                if os.name == 'posix':
                    canvas.yview_scroll(int(-1 * event.delta), "units")
                else:
                    canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

            if data['examination'].get('frame_found_data_dispanser'):
                frame_found_data_dispanser = data['examination'].get('frame_found_data_dispanser')
                frame_found_data_dispanser.destroy()
            master_frame = Frame(mkb_frame_scrolled)
            data['examination']['frame_found_data_dispanser'] = master_frame
            master_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)

            found_data = list()
            mkb_code_edit = ''
            mkb_name_edit = mkb_name.get()

            if mkb_code.get():
                word_list = ["qwertyuiopasdfghjkl;'zxcvbnm,.", "йцукенгшщзфывапролджэячсмитьбю"]

                for word in mkb_code.get().lower():
                    if word in word_list[1]:
                        mkb_code_edit += word_list[0][word_list[1].index(word)]
                    elif word == ',':
                        mkb_code_edit += '.'
                    else:
                        mkb_code_edit += word
                mkb_code_edit = mkb_code_edit.upper()

            if mkb_code_edit and mkb_name_edit:
                for dispanser_data in post_1201:
                    key = dispanser_data.get('mkb_key')
                    value = dispanser_data.get('Наименование заболевания')

                    if mkb_code_edit in key and mkb_name_edit.lower() in value.lower():
                        found_data.append(dispanser_data)
            elif mkb_code_edit:
                for dispanser_data in post_1201:
                    key = dispanser_data.get('mkb_key')
                    if mkb_code_edit in key:
                        found_data.append(dispanser_data)
            elif mkb_name_edit:
                for dispanser_data in post_1201:
                    value = dispanser_data.get('Наименование заболевания')
                    if mkb_name_edit.lower() in value.lower():
                        found_data.append(dispanser_data)

            if found_data:

                scroll_x = tk.Scrollbar(master_frame, orient=tk.HORIZONTAL)
                scroll_y = tk.Scrollbar(master_frame, orient=tk.VERTICAL)

                canvas = tk.Canvas(master_frame,
                                   xscrollcommand=scroll_x.set,
                                   yscrollcommand=scroll_y.set)
                scroll_x.config(command=canvas.xview)
                scroll_y.config(command=canvas.yview)

                canvas_frame = Frame(canvas)

                for dispanser_data in found_data:
                    dispanser_data = f"Наименование заболевания: " \
                                     f"{dispanser_data.get('Наименование заболевания')}\n" \
                                     f"Сроки и кратность медицинских обследований: " \
                                     f"{dispanser_data.get('Сроки и кратность медицинских обследований')}\n" \
                                     f"Сроки наблюдения за пациентом: " \
                                     f"{dispanser_data.get('Сроки наблюдения за пациентом')}"

                    but_text = ''
                    for i in dispanser_data.split(" "):
                        if len(but_text.split('\n')[-1]) > 60:
                            but_text += '\n'
                        but_text += i + ' '
                    Radiobutton(canvas_frame, text=but_text,
                                font=('Comic Sans MS', user.get('text_size')),
                                value=f"{dispanser_data}",
                                variable=celected_code,
                                command=celect_dispanser,
                                indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
                                ).pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)

                # canvas_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)

                canvas['width'] = int(canvas.winfo_geometry().split('x')[0])
                canvas_frame['width'] = int(canvas.winfo_geometry().split('x')[0])
                canvas.grid(row=0, column=0, sticky="nsew")
                scroll_x.grid(row=1, column=0, sticky="we")
                scroll_y.grid(row=0, column=1, sticky="ns")

                master_frame.rowconfigure(0, weight=1)
                master_frame.columnconfigure(0, weight=1)

                master_frame.bind("<Configure>", resize)
                master_frame.update_idletasks()
                canvas_frame['height'] = int(dispanser_root_main.winfo_height() - frame_main_dispanser.winfo_height())

                canvas.bind("<Enter>", on_binds)
                canvas.bind("<Leave>", off_binds)

                canvas.create_window((0, 0), window=canvas_frame, anchor="nw",
                                     width=canvas.winfo_width())

            else:
                Label(master_frame, text="Поиск не дал результатов!",
                      font=('Comic Sans MS', user.get('text_size')),
                      bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')

        mkb_code = StringVar()
        mkb_name = StringVar()
        celected_code = StringVar()

        frame_main_dispanser = Frame(dispanser_root_main, bg="#36566d")
        Label(frame_main_dispanser, text="Поиск по постановлению 1201",
              font=('Comic Sans MS', user.get('text_size')),
              bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
        Button(frame_main_dispanser, text=f"Закрыть окно",
               font=('Comic Sans MS', user.get('text_size')),
               command=open_dispanser_root,
               bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')

        mkb_title_frame = Frame(frame_main_dispanser, bg="#36566d")
        Label(mkb_title_frame, text="Код (МКБ-10): ",
              font=('Comic Sans MS', user.get('text_size')),
              bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, side='left')
        txt_mkb = Entry(mkb_title_frame, width=10,
                        font=('Comic Sans MS', user.get('text_size')),
                        justify="center",
                        textvariable=mkb_code)
        txt_mkb.pack(fill='x', expand=True, pady=3, padx=3, side='left')
        txt_mkb.bind('<Return>', search_mkb)

        Label(mkb_title_frame, text="Нозология: ",
              font=('Comic Sans MS', user.get('text_size')),
              bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, side='left')
        txt_mkb = Entry(mkb_title_frame, width=30,
                        font=('Comic Sans MS', user.get('text_size')),
                        textvariable=mkb_name)
        txt_mkb.pack(fill='x', expand=True, pady=3, padx=3, side='left')
        txt_mkb.bind('<Return>', search_mkb)

        mkb_title_frame.pack(fill='x', anchor='n')
        frame_main_dispanser.pack(fill='x', anchor='n')

        mkb_frame_scrolled = Frame(dispanser_root_main)
        mkb_frame_scrolled.pack(fill='both', expand=True)

        data['examination']['is_dispanser_root_open'] = False
        dispanser_root_main.grid(row=0, column=3, sticky="nwse", rowspan=3)

        dispanser_root_main.grid_remove()

    dispanser_root_main = Frame(master=root_examination, padx=3, pady=3, bg="#36566d")
    dispanser_root_main.update_idletasks()
    create_dispanser_root()

    def paste_prescription_kb():

        data['examination']['open_prescription_kb'] = 'open'
        data['examination']['prescription_frame'] = dict()
        data['examination']['prescription_buttons_color'] = dict()

        data['examination']['prescription_but_ab_value'] = dict()

        for mark_group_main in all_data_diagnosis.get('prescription'):
            frame_loc = Frame(frame_prescription_buttons, borderwidth=1)
            Radiobutton(frame_loc, text=f"{mark_group_main[0]}",
                        font=('Comic Sans MS', user.get('text_size')),
                        value=f"{mark_group_main[0]}",
                        variable=selected_prescription_frame,
                        command=select_prescription_frame,
                        indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
                        ).pack(fill='both', expand=True)
            row, col = 0, 0
            frame_loc_but = Frame(frame_loc, borderwidth=1)
            data['examination']['prescription_frame'][mark_group_main[0]] = frame_loc_but
            for mark_group in mark_group_main[1:]:
                frame = Frame(frame_loc_but)
                for mark_2 in mark_group:
                    data['examination']['prescription_but'][f"{mark_group_main[0]}_{mark_2}"] = IntVar()
                    btn = Radiobutton(frame, text=f"{mark_2}",
                                      font=('Comic Sans MS', user.get('text_size')),
                                      value=f"{mark_group_main[0]}_{mark_2}",
                                      variable=selected_button,
                                      command=select_prescription,
                                      indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
                    btn.pack(fill='both', expand=True, side='left')
                    data['examination']['prescription_buttons_color'][f"{mark_group_main[0]}_{mark_2}"] = btn
                frame.pack(fill='both', expand=True)

            # if mark[0] == 'Разрешена вакцинация':
            #     loc_vac_data_main = list()
            #     loc_vac_data = list()
            #     for mark_2 in mark[1:]:
            #         if mark_2 == '\n':
            #             loc_vac_data_main.append(loc_vac_data.copy())
            #             loc_vac_data.clear()
            #         else:
            #             loc_vac_data.append(mark_2)
            #     for mark_group in loc_vac_data_main:
            #         loc_vac_frame = Frame(frame_loc_but)
            #         for mark_2 in mark_group:
            #             btn = Radiobutton(loc_vac_frame, text=f"{mark_2}",
            #                               font=('Comic Sans MS', user.get('text_size')),
            #                               value=f"{mark[0]}_{mark_2}",
            #                               variable=selected_button,
            #                               command=select_prescription,
            #                               indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
            #
            #             btn.pack(fill='both', expand=True, side='left')
            #             data['examination']['prescription_buttons_color'][f"{mark[0]}_{mark_2}"] = btn
            #         loc_vac_frame.pack(fill='both', expand=True)
            # else:
            #     for mark_2 in mark[1:]:
            #         btn = Radiobutton(frame_loc_but, text=f"{mark_2}",
            #                           font=('Comic Sans MS', user.get('text_size')),
            #                           value=f"{mark[0]}_{mark_2}",
            #                           variable=selected_button,
            #                           command=select_prescription,
            #                           indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
            #
            #         btn.grid(row=row, column=col, sticky='ew')
            #         data['examination']['prescription_buttons_color'][f"{mark[0]}_{mark_2}"] = btn
            #
            #         col += 1
            #         if col == 6:
            #             col = 0
            #             row += 1

            frame_loc_but.columnconfigure(index='all', minsize=40, weight=1)
            frame_loc_but.rowconfigure(index='all', minsize=20)

            frame_loc.columnconfigure(index='all', minsize=40, weight=1)
            frame_loc.rowconfigure(index='all', minsize=20)
            frame_loc.pack(fill='both', expand=True)

        Button(frame_prescription_buttons, text=f"Анализы",
               font=('Comic Sans MS', user.get('text_size')),
               command=open_analyzes_root,
               bg='#f0fffe').pack(fill='both', expand=True)

        Button(frame_prescription_buttons, text=f"Консультация",
               font=('Comic Sans MS', user.get('text_size')),
               command=open_consultation_root,
               bg='#f0fffe').pack(fill='both', expand=True)

        Button(frame_prescription_buttons, text=f"Препараты",
               font=('Comic Sans MS', user.get('text_size')),
               command=open_drugs_root,
               bg='#f0fffe').pack(fill='both', expand=True)

        Button(frame_prescription_buttons, text=f"Диспансеризация \n(пост. 1201)",
               font=('Comic Sans MS', user.get('text_size')),
               command=open_dispanser_root,
               bg='#f0fffe').pack(fill='both', expand=True)

        Button(frame_prescription_buttons, text=f"Справка",
               font=('Comic Sans MS', user.get('text_size')),
               command=fast_certificate,
               bg='#f0fffe').pack(fill='both', expand=True)

        # data['examination']['prescription_frame']['Препараты'] = frame_prescription_buttons_drugs_buttons

        frame_prescription_buttons.columnconfigure(index='all', minsize=40, weight=1)
        frame_prescription_buttons.rowconfigure(index='all', minsize=20)
        frame_prescription_buttons.pack(fill='both', expand=True, padx=2, pady=2)

        # frame_prescription_buttons_drugs_main.columnconfigure(index='all', minsize=40, weight=1)
        # frame_prescription_buttons_drugs_main.rowconfigure(index='all', minsize=20)
        # frame_prescription_buttons_drugs_main.pack(fill='both', expand=True, padx=2, pady=2)

    # def paste_prescription_kb():
    #
    #     data['examination']['open_prescription_kb'] = 'open'
    #     data['examination']['prescription_frame'] = dict()
    #     data['examination']['prescription_buttons_color'] = dict()
    #
    #     data['examination']['prescription_but_ab_value'] = dict()
    #
    #     for mark in all_data_diagnosis.get('prescription'):
    #         frame_loc = Frame(frame_prescription_buttons, borderwidth=1)
    #         btn = Radiobutton(frame_loc, text=f"{mark[0]}",
    #                           font=('Comic Sans MS', user.get('text_size')),
    #                           value=f"{mark[0]}", variable=selected_prescription_frame,
    #                           command=select_prescription_frame,
    #                           indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
    #         btn.pack(fill='both', expand=True)
    #         row, col = 0, 0
    #         frame_loc_but = Frame(frame_loc, borderwidth=1)
    #         data['examination']['prescription_frame'][mark[0]] = frame_loc_but
    #         if mark[0] == 'Разрешена вакцинация':
    #             loc_vac_data_main = list()
    #             loc_vac_data = list()
    #             for mark_2 in mark[1:]:
    #                 if mark_2 == '\n':
    #                     loc_vac_data_main.append(loc_vac_data.copy())
    #                     loc_vac_data.clear()
    #                 else:
    #                     loc_vac_data.append(mark_2)
    #             for mark_group in loc_vac_data_main:
    #                 loc_vac_frame = Frame(frame_loc_but)
    #                 for mark_2 in mark_group:
    #                     btn = Radiobutton(loc_vac_frame, text=f"{mark_2}",
    #                                       font=('Comic Sans MS', user.get('text_size')),
    #                                       value=f"{mark[0]}_{mark_2}",
    #                                       variable=selected_button,
    #                                       command=select_prescription,
    #                                       indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
    #
    #                     btn.pack(fill='both', expand=True, side='left')
    #                     data['examination']['prescription_buttons_color'][f"{mark[0]}_{mark_2}"] = btn
    #                 loc_vac_frame.pack(fill='both', expand=True)
    #         else:
    #             for mark_2 in mark[1:]:
    #                 btn = Radiobutton(frame_loc_but, text=f"{mark_2}",
    #                                   font=('Comic Sans MS', user.get('text_size')),
    #                                   value=f"{mark[0]}_{mark_2}",
    #                                   variable=selected_button,
    #                                   command=select_prescription,
    #                                   indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
    #
    #                 btn.grid(row=row, column=col, sticky='ew')
    #                 data['examination']['prescription_buttons_color'][f"{mark[0]}_{mark_2}"] = btn
    #
    #                 col += 1
    #                 if col == 6:
    #                     col = 0
    #                     row += 1
    #
    #         frame_loc_but.columnconfigure(index='all', minsize=40, weight=1)
    #         frame_loc_but.rowconfigure(index='all', minsize=20)
    #
    #         frame_loc.columnconfigure(index='all', minsize=40, weight=1)
    #         frame_loc.rowconfigure(index='all', minsize=20)
    #         frame_loc.pack(fill='both', expand=True)
    #
    #     Button(frame_prescription_buttons, text=f"Анализы",
    #            font=('Comic Sans MS', user.get('text_size')),
    #            command=open_analyzes_root,
    #            bg='#f0fffe').pack(fill='both', expand=True)
    #
    #     Button(frame_prescription_buttons, text=f"Консультация",
    #            font=('Comic Sans MS', user.get('text_size')),
    #            command=open_consultation_root,
    #            bg='#f0fffe').pack(fill='both', expand=True)
    #
    #
    #     Button(frame_prescription_buttons, text=f"Препараты",
    #            font=('Comic Sans MS', user.get('text_size')),
    #            command=open_drugs_root,
    #            bg='#f0fffe').pack(fill='both', expand=True)
    #
    #     Button(frame_prescription_buttons, text=f"Диспансеризация \n(пост. 1201)",
    #            font=('Comic Sans MS', user.get('text_size')),
    #            command=open_dispanser_root,
    #            bg='#f0fffe').pack(fill='both', expand=True)
    #
    #     Button(frame_prescription_buttons, text=f"Справка",
    #            font=('Comic Sans MS', user.get('text_size')),
    #            command=fast_certificate,
    #            bg='#f0fffe').pack(fill='both', expand=True)
    #
    #
    #
    #     # data['examination']['prescription_frame']['Препараты'] = frame_prescription_buttons_drugs_buttons
    #
    #     frame_prescription_buttons.columnconfigure(index='all', minsize=40, weight=1)
    #     frame_prescription_buttons.rowconfigure(index='all', minsize=20)
    #     frame_prescription_buttons.pack(fill='both', expand=True, padx=2, pady=2)
    #
    #     # frame_prescription_buttons_drugs_main.columnconfigure(index='all', minsize=40, weight=1)
    #     # frame_prescription_buttons_drugs_main.rowconfigure(index='all', minsize=20)
    #     # frame_prescription_buttons_drugs_main.pack(fill='both', expand=True, padx=2, pady=2)

    def change_prescription_kb_status():
        if data['examination'].get('open_prescription_kb') == 'open':
            data['examination']['open_prescription_kb'] = 'closed'
            change_prescription_kb_button['text'] = 'открыть клавиатуру рекомендаций'
            txt_prescription['height'] = 4
            txt_prescription['width'] = 70
            frame_prescription_buttons.pack_forget()

        else:
            data['examination']['open_prescription_kb'] = 'open'
            frame_prescription_buttons.pack(fill='both', expand=True, padx=2, pady=2)
            change_prescription_kb_button['text'] = 'закрыть клавиатуру рекомендаций'
            txt_prescription['height'] = 8
            txt_prescription['width'] = 60

            edit_examination_kb_text()

    frame_prescription = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
    frame_prescription_main = Frame(frame_prescription, padx=1, pady=1)
    frame_prescription_buttons = Frame(frame_prescription, padx=1, pady=1)
    # frame_prescription_buttons_drugs_main = Frame(frame_prescription_buttons, padx=1, pady=1)
    # frame_prescription_buttons_drugs_buttons = Frame(frame_prescription_buttons_drugs_main, padx=1, pady=1)

    txt_prescription = ScrolledText(frame_prescription_main, width=15, height=16,
                                    font=('Comic Sans MS', user.get('text_size')),
                                    wrap="word")
    change_prescription_kb_button = Button(frame_prescription_main, text='скрыть клавиатуру рекомендаций',
                                           command=change_prescription_kb_status,
                                           font=('Comic Sans MS', user.get('text_size')))

    paste_frame_prescription()

    def write_ln():
        data['examination']['LN_data']['type_doc'] = selected_button.get()

        def save():
            def check_input():
                error_flag = False

                for marker in data['examination']['LN_data'].get('current_data'):
                    if marker in ("Фамилия", "Имя", "Дата рождения", "Адрес места жительства",
                                  'Место работы (службы, учебы)') and not data['examination']['LN_data']['current_data'].get(marker).get():
                        messagebox.showerror('Ошибка', f"Ошибка!\nНе указан пункт\n'{marker}'")
                        return False
                    elif marker == "Дата рождения":
                        try:
                            if get_age(data['examination']['LN_data']['current_data'].get(marker).get()) < 0:
                                messagebox.showerror('Ошибка', f"Дата рождения не может быть больше текущей даты!")
                                return False
                        except Exception:
                            messagebox.showerror('Ошибка', f"Дата рождения должна быть в формате 'ДД.ММ.ГГ'")
                            return False
                    elif marker in ("Дата выдачи", "Дата начала ВН", "Дата окончания ВН"):
                        try:
                            get_age(data['examination']['LN_data']['current_data'].get(marker).get())
                        except Exception:
                            messagebox.showerror('Ошибка', f"{marker} должна быть в формате 'ДД.ММ.ГГ'")
                            return False

                return True


            if check_input():
                render_data.clear()
                txt_ln_from.delete(0, 'end')
                txt_ln_from.insert(0, data['examination']['LN_data']['current_data'].get("Дата начала ВН").get().strip())

                txt_ln_until.delete(0, 'end')
                txt_ln_until.insert(0, data['examination']['LN_data']['current_data'].get("Дата окончания ВН").get().strip())

                txt_second_examination.delete(0, 'end')
                txt_second_examination.insert(0, data['examination']['LN_data']['current_data'].get("Дата окончания ВН").get().strip())


                data['examination']['LN_data']['current_data']['save'] = True
                render_data['patient_info_1'] = \
                    data['examination']['LN_data']['current_data'].get('Информация про ребенка (в корешок)').get().strip()
                render_data['patient_info_2'] = \
                    data['examination']['LN_data']['current_data'].get('Особые отметки').get().strip()
                render_data['parent_name_full'] = \
                    f"{data['examination']['LN_data']['current_data'].get('Фамилия').get().strip()} " \
                    f"{data['examination']['LN_data']['current_data'].get('Имя').get().strip()} " \
                    f"{data['examination']['LN_data']['current_data'].get('Отчество').get().strip()}"
                render_data['address'] = \
                    data['examination']['LN_data']['current_data'].get('Адрес места жительства').get().strip()
                render_data['work'] = \
                    data['examination']['LN_data']['current_data'].get('Место работы (службы, учебы)').get().strip()
                render_data['doctor_name'] = \
                    user.get('doctor_name').split()[0]

                for marker_1, marker_2 in (('d_open', 'Дата выдачи'), ('d_from', 'Дата начала ВН'),
                                           ('d_until', 'Дата окончания ВН'),
                                           ('b_d_1', 'Дата рождения'), ('b_d_2', 'Дата рождения'),
                                           ('parent_name_1', 'Фамилия'), ('parent_name_2', 'Имя'),
                                           ('parent_name_3', 'Отчество')):
                    if marker_1 in ('d_open', 'd_from', 'd_until', 'b_d_1', 'b_d_2'):
                        date = ''
                        for word in data['examination']['LN_data']['current_data'].get(marker_2).get().strip():
                            if word.isdigit():
                                date += word
                            else:
                                date += '.'
                        date = date.split('.')
                        if len(date[-1]) == 4:
                            year = date.pop(-1)
                            date.append(f"{year[-2]}{year[-1]}")
                        date = ''.join(date)
                        text = list()
                        for word in date:
                            text.append(word)
                        render_data[marker_1] = '  '.join(text)
                    else:
                        text = list()
                        for word in data['examination']['LN_data']['current_data'].get(marker_2).get().strip():
                            text.append(word)
                        if marker_1 in ('parent_name_1', 'parent_name_2', 'parent_name_3'):
                            render_data[marker_1] = '  '.join(text)
                        else:
                            render_data[marker_1] = ' '.join(text)

                doc = DocxTemplate(f".{os.sep}example{os.sep}certificate{os.sep}"
                                   f"БЛАНК_ВН_{selected_type_ln.get().replace(' ', '_'.capitalize())}.docx")
                doc.render(render_data)
                doc_name = f".{os.sep}generated{os.sep}БЛАНК_ВН_{patient.get('name', '').split()[0]}.docx"
                doc_name = save_document(doc=doc, doc_name=doc_name)

                render_data.clear()
                run_document(doc_name)
                new_root.destroy()
                data_base(command="statistic_write",
                          insert_data="Документ ВН")

        def select_last_data():
            last_info = selected_button.get()
            for marker in data['examination']['LN_data']['last_patient_ln'].get(last_info, []):
                if data['examination']['LN_data']['current_data'].get(marker):
                    data['examination']['LN_data']['current_data'][marker].set(
                        data['examination']['LN_data']['last_patient_ln'][last_info].get(marker))

        def calendar_LN():
            text_field = selected_button.get()
            selected_button.set('')
            paste_calendar(text_field=text_field)


        if data['examination']['LN_data'].get('ln_root'):
            data['examination']['LN_data']['ln_root'].destroy()

        new_root = Toplevel()
        data['examination']['LN_data']['ln_root'] = new_root
        new_root.title(f"Генерация документа {selected_type_ln.get()} {data['examination']['LN_data'].get('type_doc')}")
        new_root.bind("<Control-KeyPress>", keypress)
        if not data['examination']['LN_data'].get('current_data'):
            data['examination']['LN_data']['current_data'] = {
                "Дата выдачи": StringVar(),
                "Дата начала ВН": StringVar(),
                "Дата окончания ВН": StringVar(),
                "Фамилия": StringVar(),
                "Имя": StringVar(),
                "Отчество": StringVar(),
                "Дата рождения": StringVar(),
                "Адрес места жительства": StringVar(),
                "Место работы (службы, учебы)": StringVar(),
                "Информация про ребенка (в корешок)": StringVar(),
                "Особые отметки": StringVar(),
            }

        data['examination']['LN_data']['current_data']['Дата выдачи'].set(datetime.now().strftime("%d.%m.%y"))
        if txt_ln_from.get().strip():
            data['examination']['LN_data']['current_data']['Дата начала ВН'].set(txt_ln_from.get().strip())
        else:
            data['examination']['LN_data']['current_data']['Дата начала ВН'].set(datetime.now().strftime("%d.%m.%y"))
        if txt_ln_until.get().strip():
            data['examination']['LN_data']['current_data']['Дата окончания ВН'].set(txt_ln_until.get().strip())
        data['examination']['LN_data']['current_data']['Адрес места жительства'].set(patient.get('address', ''))

        if 'по уходу' in data['examination']['LN_data'].get('type_doc'):
            try:
                data['examination']['LN_data']['current_data'][
                    'Информация про ребенка (в корешок)'].set(
                    f"{' '.join(patient.get('name', ' ').strip().split()[:-1])} {patient.get('birth_date', '')}")
                data['examination']['LN_data']['current_data'][
                    'Особые отметки'].set(
                    f"{patient.get('name', ' ').strip().split()[1]} {patient.get('birth_date', '')}")
            except IndexError:
                data['examination']['LN_data']['current_data'][
                    'Информация про ребенка (в корешок)'].set(
                    f"{patient.get('name', ' ')} {patient.get('birth_date', '')}")
                data['examination']['LN_data']['current_data'][
                    'Особые отметки'].set(
                    f"{patient.get('name', ' ')} {patient.get('birth_date', '')}")


        if 'по болезни' in data['examination']['LN_data'].get('type_doc'):
            data['examination']['LN_data']['current_data']['Дата рождения'].set(patient.get('birth_date', ''))
            if len(patient.get('name', ' ').strip().split()) == 3:
                data['examination']['LN_data']['current_data']['Фамилия'].set(
                    patient.get('name').strip().split()[0])
                data['examination']['LN_data']['current_data']['Имя'].set(
                    patient.get('name').strip().split()[1])
                data['examination']['LN_data']['current_data']['Отчество'].set(
                    patient.get('name').strip().split()[2])

            data['examination']['LN_data']['current_data']['Информация про ребенка (в корешок)'].set("")
            data['examination']['LN_data']['current_data']['Особые отметки'].set("")

        frame_title = Frame(new_root)
        for marker in ('Дата выдачи', 'Дата начала ВН', 'Дата окончания ВН'):
            frame = Frame(frame_title)
            Label(frame, text=f"{marker}:",
                  font=('Comic Sans MS', user.get('text_size')),
                  bg="#36566d", fg='white').grid(column=0, row=0, sticky='nwse', padx=2, pady=2, ipadx=3)
            Entry(frame, width=15, font=('Comic Sans MS', user.get('text_size')),
                      textvariable=data['examination']['LN_data']['current_data'].get(marker)
                      ).grid(column=1, row=0, sticky='nwse', ipadx=2, ipady=2)
            Radiobutton(frame, text="Календарь",
                        font=('Comic Sans MS', user.get('text_size')),
                        value=f"ln_root_{marker}__{marker}",
                        variable=selected_button,
                        command=calendar_LN,
                        indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
                        ).grid(column=0, row=1, sticky='nwse', ipadx=2, ipady=2, columnspan=2)

            frame.pack(fill='both', expand=True, padx=2, pady=2, side='left')
        frame_title.pack(fill='both', expand=True, padx=2, pady=2)

        row = 0
        frame = Frame(new_root)
        for marker in ('Фамилия', 'Имя', 'Отчество', 'Дата рождения',
                       'Адрес места жительства', 'Место работы (службы, учебы)',
                       'Информация про ребенка (в корешок)', 'Особые отметки'):
            Label(frame, text=marker,
                  font=('Comic Sans MS', user.get('text_size')),
                  bg="#36566d", fg='white').grid(column=0, row=row, sticky='nwse', padx=2, pady=2)
            Entry(frame, width=30, font=('Comic Sans MS', user.get('text_size')),
                      textvariable=data['examination']['LN_data']['current_data'].get(marker)
                      ).grid(column=1, row=row, sticky='nwse', ipadx=2, ipady=2)
            row += 1
        frame.pack(fill='both', expand=True, padx=2, pady=2)
        frame.columnconfigure(index='all', minsize=40, weight=1)

        Button(new_root, text='Создать документ', command=save,
               font=('Comic Sans MS', user.get('text_size'))
               ).pack(fill='both', expand=True, padx=2, pady=2)

        if data['examination']['LN_data'].get('last_patient_ln'):
            frame = Frame(new_root)
            Label(frame, text="Прошлые данные",
                  font=('Comic Sans MS', user.get('text_size')),
                  bg="#36566d", fg='white').pack(fill='both', expand=True, padx=2, pady=2)

            for key in data['examination']['LN_data'].get('last_patient_ln'):
                Radiobutton(frame, text=key,
                            font=('Comic Sans MS', user.get('text_size')),
                            value=f"{key}",
                            variable=selected_button,
                            command=select_last_data,
                            indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
                            ).pack(fill='both', expand=True, padx=2, pady=2)
            frame.pack(fill='both', expand=True, padx=2, pady=2)

        new_root.mainloop()

    def paste_frame_ln():
        def calendar_ln_from():
            paste_calendar(text_field='ln_from__Больничный с ...')

        def calendar_ln_until():
            paste_calendar(text_field='ln_until__Больничный по ...')

        def calendar_second_examination():
            paste_calendar(text_field='second_examination__Повторный осмотр')

        def select_type_ln():
            if data['examination'].get('open_frame_ln_my_blanks', '') == 'open':
                data['examination']['open_frame_ln_my_blanks'] = 'closed'
                frame_ln_my_blanks.pack_forget()

            type_ln = selected_type_ln.get()
            ln_num = ''

            if type_ln in ("Справка ВН", "Лист ВН"):
                last_visit = data['examination']['get_last_patient_ln'].get(type_ln)

                if last_visit:
                    ln_num = last_visit.split('__')[1].replace('_', '')
                    try:
                        date_from_cont = datetime.strptime(f"{last_visit.split('__')[3]}",
                                                           "%d.%m.%Y") + timedelta(days=1)
                        txt_ln_from.delete(0, 'end')
                        txt_ln_from.insert(0, date_from_cont.strftime("%d.%m.%Y"))

                    except Exception:
                        txt_ln_from.delete(0, 'end')
                        txt_ln_from.insert(0, datetime.now().strftime("%d.%m.%Y"))

                if not ln_num:
                    open_frame_ln_my_blanks()
                else:
                    txt_ln_num.delete(0, 'end')
                    if ln_num:
                        txt_ln_num.insert(0, ln_num)


            if type_ln in ("Справка ВН", "Лист ВН"):
                lbl_type_ln['text'] = f"{type_ln} номер:"
                frame_ln_add.grid(row=0, column=3, rowspan=2, sticky='ew')
                but_ln_my_blanks.grid(row=1, column=0, columnspan=3, sticky='ew')
            else:
                frame_ln_add.grid_remove()
                but_ln_my_blanks.grid_remove()




        col = 0
        for but in ("Справка ВН", "Лист ВН", "Уход обеспечен"):
            btn = Radiobutton(frame_ln, text=but,
                              font=('Comic Sans MS', user.get('text_size')),
                              value=but, variable=selected_type_ln, command=select_type_ln,
                              indicatoron=False, selectcolor='#77f1ff')
            btn.grid(row=0, column=col, sticky='ew')
            col += 1
        selected_type_ln.set('Уход обеспечен')
        lbl_type_ln.grid(row=0, column=0, sticky='ew')

        txt_ln_num.grid(row=0, column=1, sticky='ew')
        but_ln_closed.grid(row=1, column=0, columnspan=2, sticky='ew')
        lbl_ln_from.grid(row=0, column=2, sticky='ew')
        txt_ln_from.grid(row=0, column=3, sticky='ew')
        Button(frame_ln_add, text='Календарь', font=('Comic Sans MS', user.get('text_size')),
               command=calendar_ln_from).grid(row=1, column=3, sticky='ew')
        Label(master=frame_ln_add, text=" по ",
              font=('Comic Sans MS', user.get('text_size')), bg='white').grid(row=0, column=4, sticky='ew')
        txt_ln_until.grid(row=0, column=5, sticky='ew')
        Button(frame_ln_add, text='Календарь', font=('Comic Sans MS', user.get('text_size')),
               command=calendar_ln_until).grid(row=1, column=5, sticky='ew')

        Radiobutton(frame_ln_add, text="Создать документ по уходу",
                    font=('Comic Sans MS', user.get('text_size')),
                    value=f"по уходу",
                    variable=selected_button,
                    command=write_ln,
                    indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
                    ).grid(column=0, row=2, sticky='nwse', ipadx=2, ipady=2, columnspan=2)

        Radiobutton(frame_ln_add, text="Создать документ по болезни",
                    font=('Comic Sans MS', user.get('text_size')),
                    value=f"по болезни",
                    variable=selected_button,
                    command=write_ln,
                    indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
                    ).grid(column=2, row=2, sticky='nwse', ipadx=2, ipady=2, columnspan=4)



        Label(master=frame_second_examination, text="Повторный осмотр",
              font=('Comic Sans MS', user.get('text_size')), bg='white').grid(row=1, column=0, sticky='ew')
        txt_second_examination.grid(row=1, column=1, sticky='ew', columnspan=2)
        Button(frame_second_examination, text='Календарь', font=('Comic Sans MS', user.get('text_size')),
               command=calendar_second_examination).grid(row=1, column=3, sticky='ew')


        frame_ln.columnconfigure(index='all', minsize=40, weight=1)
        frame_ln.rowconfigure(index='all', minsize=20)
        frame_ln.pack(fill='both', expand=True, padx=2, pady=2)

        frame_second_examination.columnconfigure(index='all', minsize=40, weight=1)
        frame_second_examination.rowconfigure(index='all', minsize=20)
        frame_second_examination.pack(fill='both', expand=True, padx=2, pady=2)

        frame_ln_main.columnconfigure(index='all', minsize=40, weight=1)
        frame_ln_main.rowconfigure(index='all', minsize=20)
        frame_ln_main.pack(fill='both', expand=True, padx=2, pady=2)

    def ln_closed():
        if not data['examination'].get('ln_closed'):
            data['examination']['ln_closed'] = True
            lbl_ln_from.grid_configure(columnspan=3)
            lbl_ln_from.tkraise()
            lbl_ln_from['text'] = f"{selected_type_ln.get()} закрыт к труду c "
            but_ln_closed['text'] = "отменить закрытие"
            txt_ln_until.delete(0, 'end')
            txt_ln_until.insert(0, (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y"))


        else:
            data['examination']['ln_closed'] = False
            lbl_ln_from.grid_configure(columnspan=1)
            lbl_ln_from['text'] = " с "
            but_ln_closed['text'] = "закрыть к труду"
            txt_ln_until.delete(0, 'end')


    def open_frame_ln_my_blanks():
        def select_ln_num():
            txt_ln_num.delete(0, 'end')
            txt_ln_num.insert(0, selected_ln_num.get())

            txt_ln_from.delete(0, 'end')
            txt_ln_from.insert(0, datetime.now().strftime("%d.%m.%Y"))

        def add_my_new_ln():
            if not my_new_txt_ln_num.get():
                messagebox.showerror('Ошибка!', "Не указан номер первого ЛН")
            else:
                if type_ln == 'Лист ВН':
                    insert_data = f"{my_new_txt_ln_text.get()}__{my_new_txt_ln_num.get()}"
                else:
                    insert_data = f"__{my_new_txt_ln_num.get()}"

                data_base(command='examination__edit_doctor_LN',
                                       insert_data=[type_ln, insert_data])



                data['examination']['open_frame_ln_my_blanks'] = 'closed'
                frame_ln_my_blanks.pack_forget()

        def is_valid__new_ln(num_ln):
            if num_ln.isdigit():
                return True
            else:
                return False

        selected_ln_num = StringVar()

        if data['examination'].get('open_frame_ln_my_blanks', '') == 'open':
            data['examination']['open_frame_ln_my_blanks'] = 'closed'
            frame_ln_my_blanks.pack_forget()
        elif data['examination'].get('open_frame_ln_my_blanks', '') == 'closed':
            data['examination']['open_frame_ln_my_blanks'] = 'open'

        elif not data['examination'].get('open_frame_ln_my_blanks'):
            data['examination']['open_frame_ln_my_blanks'] = 'open'

        if data['examination'].get('open_frame_ln_my_blanks', '') == 'open':
            if data['examination'].get('frame_ln_my_blanks'):
                data['examination']['frame_ln_my_blanks'].destroy()

            frame_ln_my_blanks_local = Frame(frame_ln_my_blanks, padx=1, pady=1)

            data['examination']['frame_ln_my_blanks'] = frame_ln_my_blanks_local

            active_ln = False
            type_ln = selected_type_ln.get()


            found_info = None

            if user.get('my_LN'):
                for ln_data in user.get('my_LN'):
                    if type_ln == ln_data[0]:
                        found_info = ln_data[1]

            row, col = 0, 0
            if found_info:
                found_info_past = data['examination']['get_last_doc_LN'].get(type_ln)

                frame_ln_my_blanks_local_1 = Frame(frame_ln_my_blanks_local, padx=1, pady=1)
                first_ln_num = int(found_info.split('__')[-1])
                first_ln_text = found_info.split('__')[0]
                for ln_num in range(first_ln_num, first_ln_num + 10, 1):
                    btn = Radiobutton(frame_ln_my_blanks_local_1, text=f"{first_ln_text} {first_ln_num}",
                                      font=('Comic Sans MS', user.get('text_size')),
                                      value=f"{first_ln_text} {first_ln_num}",
                                      variable=selected_ln_num, command=select_ln_num,
                                      indicatoron=False, selectcolor='#77f1ff')
                    btn.grid(row=row, column=col, sticky='ew')
                    if found_info_past:
                        for i in found_info_past:
                            if isinstance(i, tuple):
                                i = i[0]
                            if str(first_ln_num) in i:
                                btn['bg'] = '#cdcdcd'
                                break
                        else:
                            btn['bg'] = "#cefeed"
                            if not active_ln:
                                active_ln = True
                                txt_ln_num.delete(0, 'end')
                                txt_ln_num.insert(0, f"{first_ln_text} {first_ln_num}")

                                txt_ln_from.delete(0, 'end')
                                txt_ln_from.insert(0, datetime.now().strftime("%d.%m.%Y"))
                    else:
                        btn['bg'] = "#cefeed"



                    col += 1
                    first_ln_num += 1
                    if col == 5:
                        col = 0
                        row += 1
                frame_ln_my_blanks_local_1.columnconfigure(index='all', minsize=40, weight=1)
                frame_ln_my_blanks_local_1.rowconfigure(index='all', minsize=20)

                frame_ln_my_blanks_local_1.pack(fill='both', expand=True)

            frame_ln_my_blanks_local_1 = Frame(frame_ln_my_blanks_local, padx=1, pady=1)
            if type_ln == 'Лист ВН':
                Label(master=frame_ln_my_blanks_local_1, text="Новый десяток Листков ВН",
                      font=('Comic Sans MS', user.get('text_size')),
                      bg='white').grid(row=row, column=col, sticky='ew', columnspan=2)
                col += 2
                Label(master=frame_ln_my_blanks_local_1, text="Серия:",
                      font=('Comic Sans MS', user.get('text_size')),
                      bg='white').grid(row=row, column=col, sticky='ew')
                col += 1

                my_new_txt_ln_text = Entry(frame_ln_my_blanks_local_1, width=5,
                                           justify="center",
                                           font=('Comic Sans MS', user.get('text_size')))
                my_new_txt_ln_text.grid(row=row, column=col, sticky='ew')
                my_new_txt_ln_text.insert(0, 'ВА')
                col += 1
                Label(master=frame_ln_my_blanks_local_1, text="Номер:",
                      font=('Comic Sans MS', user.get('text_size')), bg='white').grid(row=row, column=col, sticky='ew')
                col += 1

            else:
                Label(master=frame_ln_my_blanks_local_1, text="Новый десяток Справок ВН",
                      font=('Comic Sans MS', user.get('text_size')),
                      bg='white').grid(row=row, column=col, sticky='ew', columnspan=2)
                col += 2
                Label(master=frame_ln_my_blanks_local_1, text="Номер:",
                      font=('Comic Sans MS', user.get('text_size')), bg='white').grid(row=row, column=col, sticky='ew')
                col += 1
            check_new_ln = (root_examination.register(is_valid__new_ln), "%P")
            my_new_txt_ln_num = Entry(frame_ln_my_blanks_local_1, width=15,
                                      font=('Comic Sans MS', user.get('text_size')),
                                      justify="center",
                                      validatecommand=check_new_ln,
                                      validate="all")

            my_new_txt_ln_num.grid(row=row, column=col, sticky='ew')
            col += 1
            Button(frame_ln_my_blanks_local_1, text='Применить', font=('Comic Sans MS', user.get('text_size')),
                   command=add_my_new_ln).grid(row=row, column=col, sticky='ew')

            frame_ln_my_blanks_local_1.columnconfigure(index='all', minsize=40, weight=1)
            frame_ln_my_blanks_local_1.rowconfigure(index='all', minsize=20)
            frame_ln_my_blanks_local_1.pack(fill='both', expand=True)

            frame_ln_my_blanks_local.columnconfigure(index='all', minsize=40, weight=1)
            frame_ln_my_blanks_local.rowconfigure(index='all', minsize=20)
            frame_ln_my_blanks_local.pack(fill='both', expand=True, padx=2, pady=2)

            frame_ln_my_blanks.pack(fill='both', expand=True, padx=2, pady=2)

    frame_ln_main = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
    frame_ln = Frame(frame_ln_main, relief="solid", padx=1, pady=1)
    frame_ln_add = Frame(frame_ln, borderwidth=1, relief="solid", padx=1, pady=1)
    frame_ln_my_blanks = Frame(frame_ln_main, borderwidth=1, relief="solid", padx=1, pady=1)
    but_ln_my_blanks = Button(frame_ln, text='Мои бланки',
                              font=('Comic Sans MS', user.get('text_size')),
                              command=open_frame_ln_my_blanks)

    frame_second_examination = Frame(examination_root, relief="solid", padx=1, pady=1)

    txt_ln_num = Entry(frame_ln_add, width=15, font=('Comic Sans MS', user.get('text_size')))
    txt_ln_from = Entry(frame_ln_add, width=15, font=('Comic Sans MS', user.get('text_size')))
    txt_ln_until = Entry(frame_ln_add, width=15, font=('Comic Sans MS', user.get('text_size')))
    txt_second_examination = Entry(frame_second_examination, width=15,
                                   font=('Comic Sans MS', user.get('text_size')))
    lbl_type_ln = Label(master=frame_ln_add, text="",
                        font=('Comic Sans MS', user.get('text_size')), bg='white')
    lbl_ln_from = Label(master=frame_ln_add, text=" с ",
                        font=('Comic Sans MS', user.get('text_size')), bg='white')
    but_ln_closed = Button(frame_ln_add, text='закрыть к труду',
                           font=('Comic Sans MS', user.get('text_size')),
                           command=ln_closed)

    paste_frame_ln()

    def paste_frame_button_create():
        def create_examination_doc_a5():
            create_examination_doc('а5')

        def create_examination_doc_a5_rec():
            create_examination_doc('а5_рек')

        def create_examination_doc_a6_rec():
            create_examination_doc('а6_рек')

        def create_examination_doc_a5_disp():
            create_examination_doc('а5_child_disp')

        def create_examination_doc_a6():
            create_examination_doc('а6')

        def create_examination_doc_none():
            create_examination_doc()

        frame_button = Frame(examination_root, relief="solid", padx=1, pady=1, bg="#36566d")

        Button(frame_button, text='Печать А5',
               bg="#36566d", fg='white',
               command=create_examination_doc_a5,
               font=('Comic Sans MS', user.get('text_size'))).grid(column=0, row=0, sticky='nswe')

        Button(frame_button, text='Печать А6',
               bg="#36566d", fg='white',
               command=create_examination_doc_a6,
               font=('Comic Sans MS', user.get('text_size'))).grid(column=0, row=1, sticky='nswe')

        Button(frame_button, text='Печать А5 + рекомендации',
               bg="#36566d", fg='white',
               command=create_examination_doc_a5_rec,
               font=('Comic Sans MS', user.get('text_size'))).grid(column=1, row=0, sticky='nswe')

        Button(frame_button, text='Печать А6 + рекомендации',
               bg="#36566d", fg='white',
               command=create_examination_doc_a6_rec,
               font=('Comic Sans MS', user.get('text_size'))).grid(column=1, row=1, sticky='nswe')


        Button(frame_button, text='Сохранить\nбез печати',
               bg="#36566d", fg='white',
               command=create_examination_doc_none,
               font=('Comic Sans MS', user.get('text_size'))).grid(column=2, row=0, rowspan=2, sticky='nswe')


        if child_marker:
            Button(frame_button, text='Печать А5\nежемесячный',
                   bg="#36566d", fg='white',
                   command=create_examination_doc_a5_disp,
                   font=('Comic Sans MS', user.get('text_size'))).grid(column=3, row=0, rowspan=2, sticky='nswe')



        frame_button.columnconfigure(index='all', minsize=40, weight=1)
        frame_button.rowconfigure(index='all', minsize=20)
        frame_button.pack(fill='both', expand=True, side=tk.LEFT)

    paste_frame_button_create()


    def paste_calendar(text_field):
        command, marker = text_field.split('__')
        if data['examination'].get('calendar_root'):
            data['examination']['calendar_root'].destroy()

        calendar_root = Toplevel()
        data['examination']['calendar_root'] = calendar_root
        calendar_root.title(f'Календарь {marker}')
        calendar_root.config(bg='white')

        selected_day = StringVar()
        actual_data = dict()

        now = datetime.now()
        actual_data['year'] = now.year
        actual_data['month'] = now.month

        def prev_month():
            curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
            new = curr - timedelta(days=1)
            actual_data['year'] = int(new.year)
            actual_data['month'] = int(new.month)
            create_calendar()

        def next_month():
            curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
            new = curr + timedelta(days=31)
            actual_data['year'] = int(new.year)
            actual_data['month'] = int(new.month)
            create_calendar()

        def select_day():
            day = selected_day.get()
            edit_day = list()
            for i in day.split('.'):
                if len(i) == 1:
                    i = f"0{i}"
                edit_day.append(i)
            answer = '.'.join(edit_day)
            if command.startswith('ln_root_'):
                data['examination']['LN_data']['current_data'][command.split('_')[-1]].set(answer)

            elif command == 'ln_from':
                txt_ln_from.delete(0, 'end')
                txt_ln_from.insert(0, answer)

            elif command == 'ln_until':
                txt_ln_until.delete(0, 'end')
                txt_ln_until.insert(0, answer)

                txt_second_examination.delete(0, 'end')
                txt_second_examination.insert(0, answer)

            elif command == 'second_examination':
                txt_second_examination.delete(0, 'end')
                txt_second_examination.insert(0, answer)



            calendar_root.destroy()

        frame_month_year = Frame(calendar_root, relief="solid", padx=1, pady=1)


        frame_month_year.columnconfigure(index='all', minsize=40, weight=1)
        frame_month_year.rowconfigure(index='all', minsize=20)
        frame_month_year.pack(fill='both', expand=True)

        def create_calendar():
            if destroy_elements.get('loc_calendar_frame'):
                loc_calendar_frame = destroy_elements.get('loc_calendar_frame')
                loc_calendar_frame.destroy()

            loc_calendar_frame = Frame(calendar_root, relief="solid", padx=1, pady=1)
            destroy_elements['loc_calendar_frame'] = loc_calendar_frame

            for calendar_mark in ('prev', 'curr', 'next'):
                row, col = 0, 0


                frame_days = Frame(loc_calendar_frame, relief="ridge", borderwidth=0.5, padx=1, pady=1)
                if calendar_mark == 'prev':
                    but_prev_month = Button(frame_days, text='<', command=prev_month,
                                            font=('Comic Sans MS', user.get('text_size')))
                    but_prev_month.grid(row=row, column=0, sticky='ew', columnspan=7)


                elif calendar_mark == 'next':
                    but_next_month = Button(frame_days, text='>', command=next_month,
                                            font=('Comic Sans MS', user.get('text_size')))
                    but_next_month.grid(row=row, column=0, sticky='ew', columnspan=7)


                else:
                    btn = Radiobutton(frame_days, text="Сегодня",
                                      font=('Comic Sans MS', user.get('text_size')),
                                      value=datetime.now().strftime("%d.%m.%Y"),
                                      variable=selected_day, command=select_day,
                                      indicatoron=False, selectcolor='#77f1ff')
                    btn.grid(row=row, column=0, sticky='ew', columnspan=7)


                if calendar_mark == 'prev':
                    curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
                    new = curr - timedelta(days=1)
                    year = int(new.year)
                    month = int(new.month)

                elif calendar_mark == 'next':
                    curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
                    new = curr + timedelta(days=31)
                    year = int(new.year)
                    month = int(new.month)

                else:
                    year = actual_data.get('year')
                    month = actual_data.get('month')

                month_name = {
                    'January': 'Январь',
                    'February': 'Февраль',
                    'March': 'Март',
                    'April': 'Апрель',
                    'May': 'Май',
                    'June': 'Июнь',
                    'July': 'Июль',
                    'August': 'Август',
                    'September': 'Сентябрь',
                    'October': 'Октябрь',
                    'November': 'Ноябрь',
                    'December': 'Декабрь'
                }

                row += 1
                lbl_month_year = Label(frame_days,
                                       text=f"{month_name.get(calendar.month_name[month])}",
                                       font=('Comic Sans MS', user.get('text_size')),
                                       bg='white')
                lbl_month_year.grid(column=0, row=row, sticky='ew', columnspan=7)

                if calendar_mark == 'curr':
                    lbl_month_year['text'] = f"{month_name.get(calendar.month_name[month])} {str(year)}"

                # Second row - Week Days
                column = 0
                row += 1
                for day in ["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"]:
                    lbl = Label(frame_days, text=day,
                                relief="solid", borderwidth=0.5,
                                font=('Comic Sans MS', user.get('text_size')), bg='white')
                    lbl.grid(column=column, row=row, sticky='ew', padx=2, pady=2)
                    column += 1

                row += 1
                column = 0


                my_calendar = calendar.monthcalendar(year, month)
                for week in my_calendar:
                    row += 1
                    col = 0
                    for day in week:
                        if day == 0:
                            col += 1
                        else:
                            # day = str(day)
                            # day = str(day)
                            # if len(day) == 1:
                            #     day = f"0{day}"
                            # if len(str(month)) == 1:
                            #     month = f"0{month}"
                            btn_value = ''

                            btn = Radiobutton(frame_days, text=day,
                                              font=('Comic Sans MS', user.get('text_size')),
                                              value=f"{day}.{month}.{year}", variable=selected_day, command=select_day,
                                              indicatoron=False, selectcolor='#77f1ff')
                            btn.grid(row=row, column=col, sticky='ew')
                            col += 1

                            if datetime.strptime(f"{day}.{month}.{year}", "%d.%m.%Y").weekday() in (5, 6):
                                btn['bg'] = '#b4ffff'
                            if datetime.now().year == year and datetime.now().month == month and datetime.now().day == int(
                                    day):
                                btn['bg'] = '#ff7b81'


                frame_days.columnconfigure(index='all', minsize=40, weight=1)
                frame_days.rowconfigure(index='all', minsize=20)
                frame_days.pack(fill='both', expand=True, side='left')

            loc_calendar_frame.columnconfigure(index='all', minsize=40, weight=1)
            loc_calendar_frame.rowconfigure(index='all', minsize=20)
            loc_calendar_frame.pack(fill='both', expand=True, side='left')

        create_calendar()

    start_action(upload_last_data)

#
# def paste_examination_cmd_main_old(root_examination: Toplevel, examination_root: Frame, child_marker=False):
#
#     destroy_elements = dict()
#     data['examination'] = dict()
#     render_data = dict()
#     data['examination']['all_kb_status'] = 'open'
#     data['examination']['selected_drugs'] = dict()
#
#     selected_place = StringVar()
#     selected_diagnosis = StringVar()
#     selected_type_ln = StringVar()
#     # err_msd_weight = StringVar()
#     selected_examination_frame = StringVar()
#     selected_prescription_frame = StringVar()
#
#     selected_button = StringVar()
#     selected_examination_button = StringVar()
#     selected_diagnosis_button = StringVar()
#     selected_recommendation_button = StringVar()
#
#     patient_age = get_age_d_m_y(patient.get('birth_date'))
#     age = patient_age.get('year')
#
#     patient_banner = StringVar()
#     patient_banner.set('Загрузка данных пациента...')
#     Label(examination_root, textvariable=patient_banner,
#           font=('Comic Sans MS', user.get('text_size')),
#           bg="#36566d", fg='white').pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#     examination_root.update()
#
#     def start_action(func=None):
#         def check_thread(thread):
#             if thread.is_alive():
#                 animation.set(animation.get()[-1] + animation.get()[:-1])
#                 # root.update()
#                 certificate_main_root.after(200, lambda: check_thread(thread))
#             else:
#                 animation.set("")
#
#         def run_action():
#             if func:
#                 func()
#                 time.sleep(1)
#             else:
#                 time.sleep(5)
#
#         animation.set("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░")
#         thread = threading.Thread(target=run_action)
#         thread.start()
#         check_thread(thread)
#
#
#     def upload_last_data():
#
#         found_info = data_base(command='examination__upload_last_data')
#         local_info = {
#             'select_past_examination': list(),
#             'get_last_doc_LN': {
#                 "Справка ВН": list(),
#                 "Лист ВН": list()},
#             'get_last_patient_ln': {
#                 "Справка ВН": list(),
#                 "Лист ВН": list()},
#             'get_last_anthro_data': dict(),
#             'LN_data': {
#                 'last_patient_ln': dict()},
#             'anamnesis': ''
#         }
#
#         if found_info.get('get_last_doc_LN'):
#             for ln_info in found_info.get('get_last_doc_LN'):
#                 for ln_data in ("Справка ВН", "Лист ВН"):
#                     if ln_info[0].startswith(ln_data):
#                         local_info['get_last_doc_LN'][ln_data].append(ln_info[0])
#
#         if found_info.get('select_past_examination'):
#             for rowid, date_time, doctor_name, status, LN_type, patient_info, examination_text, examination_key \
#                     in sorted(found_info.get('select_past_examination'),
#                               key=lambda i: (datetime.now() -
#                                              datetime.strptime(f"{i[1]}", "%d.%m.%Y %H:%M:%S")).total_seconds()):
#
#                 local_info['select_past_examination'].append((rowid, date_time, doctor_name, status, LN_type,
#                                                               patient_info, examination_text, examination_key))
#                 for ln_data in ("Справка ВН", "Лист ВН"):
#                     if LN_type.startswith(ln_data):
#                         local_info['get_last_patient_ln'][ln_data].append((date_time, LN_type))
#
#
#                 if child_marker:
#                     if not local_info.get('get_last_anthro_data'):
#                         if ('type_examination:____child__' in examination_key
#                                 and 'txt_weight_variable' in examination_key):
#                             for string in examination_key.split('__<end!>__\n'):
#                                 if string.startswith('patient_anthro_data:____'):
#                                     for marker in string.replace('patient_anthro_data:____', '').split("____"):
#                                         if len(marker.split('__')) == 2:
#                                             name, variable = marker.split('__')
#                                             if name in ('txt_weight_bir_variable', 'txt_weight_variable'):
#                                                 local_info['get_last_anthro_data'][name] = variable
#                     if not local_info.get('get_last_diagnosis_text'):
#                         for string in examination_key.split('__<end!>__\n'):
#                             if string.startswith('diagnosis_text:____'):
#                                 local_info['get_last_diagnosis_text'] = string.replace('diagnosis_text:____', '')
#
#                 else:
#                     if not local_info.get('anamnesis'):
#                         if (datetime.now() - datetime.strptime(date_time, "%d.%m.%Y %H:%M:%S")).total_seconds() < 2592000:
#                             if 'anamnesis:____' in examination_key:
#                                 for string in examination_key.split('__<end!>__\n'):
#                                     if string.startswith('anamnesis:____'):
#                                         txt_anamnesis.insert(1.0, string.replace('anamnesis:____', ''))
#                                         local_info['anamnesis'] = 'True'
#                         else:
#                             local_info['anamnesis'] = 'None'
#
#                     if not local_info.get('get_last_anthro_data'):
#                         if ('type_examination:____adult__' in examination_key
#                                 and 'txt_weight_variable' in examination_key):
#
#                             for string in examination_key.split('__<end!>__\n'):
#                                 if string.startswith('patient_anthro_data:____'):
#                                     for marker in string.replace('patient_anthro_data:____', '').split("____"):
#                                         if len(marker.split('__')) == 2:
#                                             name, variable = marker.split('__')
#                                             if name == 'txt_weight_variable':
#                                                 local_info['get_last_anthro_data'][name] = variable
#
#                     if 'LN_blank_data:____' in examination_key:
#                         for string in examination_key.split('__<end!>__\n'):
#                             if string.startswith('LN_blank_data:____'):
#                                 local_ln_data = {
#                                     "Дата осмотра": date_time,
#                                     "Фамилия": "",
#                                     "Имя": "",
#                                     "Отчество": "",
#                                     "Дата рождения": "",
#                                     "Место работы (службы, учебы)": "",
#                                     "Информация про ребенка (в корешок)": ""}
#                                 for marker in string.replace('LN_blank_data:____', '').split("____"):
#                                     if len(marker.split('__')) == 2:
#                                         name, variable = marker.split('__')
#                                         if name in local_ln_data:
#                                             local_ln_data[name] = variable
#                                 if (local_ln_data.get('Фамилия')
#                                         and local_ln_data.get('Дата рождения')):
#
#                                     key = f"{local_ln_data.get('Фамилия')} " \
#                                           f"{local_ln_data.get('Имя')} " \
#                                           f"{local_ln_data.get('Отчество')} -- " \
#                                           f"{local_ln_data.get('Дата рождения')} -- " \
#                                           f"{local_ln_data.get('Место работы (службы, учебы)')} -- " \
#                                           f"{local_ln_data.get('Информация про ребенка (в корешок)')}"
#                                     local_info['LN_data']['last_patient_ln'][key] = local_ln_data.copy()
#
#         for ln_data in ("Справка ВН", "Лист ВН"):
#             if local_info['get_last_patient_ln'].get(ln_data):
#                 last_visit = min(local_info['get_last_patient_ln'].get(ln_data),
#                                  key=lambda i: (datetime.now() -
#                                                 datetime.strptime(f"{i[0]}", "%d.%m.%Y %H:%M:%S")).total_seconds())
#
#                 local_info['get_last_patient_ln'][ln_data] = None
#                 if ((datetime.now() - datetime.strptime(f"{last_visit[0]}", "%d.%m.%Y %H:%M:%S")).total_seconds() / (
#                         60 * 60 * 24) < 14 and last_visit[1].split('__')[-1] != 'closed'):
#
#                     local_info['get_last_patient_ln'][ln_data] = last_visit[1]
#
#
#         for marker in local_info:
#             data['examination'][marker] = local_info.get(marker)
#
#         if child_marker:
#             if data['examination']['get_last_anthro_data'].get('txt_weight_bir_variable'):
#                 data['examination']['anthro']['txt_weight_bir_variable'].set(
#                     data['examination']['get_last_anthro_data'].get('txt_weight_bir_variable'))
#
#             if data['examination']['get_last_anthro_data'].get('txt_weight_variable'):
#
#                 data['examination']['last_txt_weight_variable'] = data['examination']['get_last_anthro_data'].get('txt_weight_variable')
#
#
#         else:
#             if data['examination']['get_last_anthro_data'].get('txt_weight_variable'):
#                 data['examination']['anthro']['txt_weight_variable'].set(
#                     data['examination']['get_last_anthro_data'].get('txt_weight_variable'))
#             if data['examination'].get('anamnesis') and data['examination'].get('anamnesis') != 'None':
#                 txt_anamnesis.insert(1.0, data['examination'].get('anamnesis').strip())
#
#     def paste_past_examination():
#         def past_examination(past_examination_frame: Frame):
#             def selected_past_but():
#                 selected_past_but_info = ''
#                 for but_info in past_examination_data.get('buttons'):
#                     if past_examination_data['buttons'].get(but_info).get() == 1:
#                         selected_past_but_info = but_info
#                         past_examination_data['buttons'][but_info].set(0)
#                 if selected_past_but_info:
#                     rowid_, command = selected_past_but_info.split('__')
#                     if command in ('Удалить осмотр', 'Удалить справку'):
#                         result = messagebox.askyesno(title='Удаление осмотра',
#                                                      message="Удалить осмотр?")
#                         if result:
#                             answer, message = data_base(command='examination__delete',
#                                                         insert_data=rowid_)
#                             if not answer:
#                                 messagebox.showerror('Ошибка', f"Ошибка удаления записи: \n{message}")
#                             else:
#                                 past_examination_data['destroy_elements'].get(rowid_).destroy()
#                         past_examination_frame.focus()
#
#                     elif command == 'Загрузить в текущий':
#                         for but_marker in ('complaints', 'examination', 'prescription'):
#                             for mark_ in data['examination'].get(f'{but_marker}_but'):
#                                 data['examination'][f'{but_marker}_but'].get(mark_).set(0)
#                         if data['examination'].get('selected_drugs'):
#                             data['examination']['selected_drugs'].clear()
#                         txt_epicrisis_add.delete(1.0, 'end')
#                         all_markers = past_examination_data['found_info'].get(rowid_). \
#                             get('examination_key').split('__<end!>__\n')
#                         for selected_marker in all_markers:
#                             if 'selected_diagnosis_get:____' in selected_marker:
#                                 selected_diagnosis.set(selected_marker.split(':____')[-1])
#
#                             elif "drugs:____" in selected_marker:
#                                 all_buttons = selected_marker.replace('drugs:____', '').split("____")
#
#                                 for drugs_but in all_buttons:
#                                     if len(drugs_but.split('__')) == 4:
#                                         select_drugs_item(drug_name=drugs_but)
#
#                             elif "epicrisis_add_text:____" in selected_marker:
#                                 txt_epicrisis_add.insert(1.0, selected_marker.replace("epicrisis_add_text:____", ""))
#                                 txt_epicrisis_add["height"] = len(selected_marker.split('\n')) + 1
#
#
#                             elif "patient_anthro_data:____" in selected_marker:
#                                 for marker in selected_marker.replace('patient_anthro_data:____', '').split("____"):
#                                     if len(marker.split('__')) == 2:
#                                         name, variable = marker.split('__')
#                                         if name in data['examination'].get('anthro'):
#                                             data['examination']['anthro'][name].set(variable)
#
#                             elif "selected_place:____" in selected_marker:
#                                 selected_place.set(selected_marker.replace('selected_place:____', ''))
#
#                             elif "anamnesis:____" in selected_marker:
#                                 txt_anamnesis.delete(1.0, 'end')
#                                 txt_anamnesis.insert(1.0, selected_marker.replace('anamnesis:____', ''))
#
#                             else:
#                                 for but_marker in ('complaints', 'examination', 'prescription',
#                                                    'diagnosis'):
#
#                                     if f"{but_marker}:____" in selected_marker:
#
#
#                                         all_buttons = selected_marker.replace(f"{but_marker}:____", '').split("__")
#                                         for button in all_buttons:
#                                             if button in data['examination'].get(f'{but_marker}_but'):
#                                                 data['examination'][f'{but_marker}_but'].get(button).set(1)
#
#                                     elif f"{but_marker}_text:____" in selected_marker:
#                                         text_inserted = selected_marker.replace(f"{but_marker}_text:____", '')
#
#                                         if but_marker == 'complaints':
#                                             txt_complaints.delete(1.0, 'end')
#                                             txt_complaints.insert(1.0, text_inserted)
#                                         if but_marker == 'examination':
#                                             txt_examination.delete(1.0, 'end')
#                                             txt_examination.insert(1.0, text_inserted)
#                                         if but_marker == 'diagnosis':
#                                             txt_diagnosis.delete(1.0, 'end')
#                                             txt_diagnosis.insert(1.0, text_inserted)
#                                         if but_marker == 'prescription':
#                                             txt_prescription.delete(1.0, 'end')
#                                             txt_prescription.insert(1.0, text_inserted)
#
#                         past_examination_root.destroy()
#                         examination_root.update()
#                         edit_examination_kb_text()
#                         edit_complaints_kb_color()
#
#                     elif command == 'Сохранить изменения':
#                         saved_text = past_examination_data['found_info'][f"{rowid_}"]. \
#                             get('txt_examination_past').get(1.0, 'end').strip()
#                         if saved_text == past_examination_data['found_info'][f"{rowid_}"].get("examination_text"):
#                             messagebox.showinfo('Инфо', f"Осмотры совпадают\n"
#                                                         f"Нет изменений для сохранения")
#                         else:
#                             answer, message = data_base(command='examination__delete',
#                                                         insert_data=rowid_)
#                             if not answer:
#                                 messagebox.showerror('Ошибка', f"Ошибка удаления записи: \n{message}")
#                             else:
#
#                                 save_info_examination = [
#                                     f"{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
#                                     f"{user.get('doctor_name')}",
#                                     None,
#                                     past_examination_data['found_info'][f"{rowid_}"].get("ln_type"),
#                                     past_examination_data['found_info'][f"{rowid_}"].get("patient_info_"),
#                                     saved_text,
#                                     past_examination_data['found_info'][f"{rowid_}"].get("examination_key"),
#                                     None]
#
#                                 answer, message = data_base(command='examination__save',
#                                                             insert_data=save_info_examination)
#                                 if not answer:
#                                     messagebox.showerror("Ошибка", f"Ошибка сохранения осмотра\n{message}")
#                                 else:
#                                     messagebox.showinfo('Инфо', f"Осмотр успешно сохранен")
#                                     text = past_examination_data['found_info'][f"{rowid_}"].get("past_exam_text")
#                                     text.set(f"Время редактирования: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}    "
#                                              f"Пользователь: {user.get('doctor_name')}")
#                                     past_examination_frame.update()
#
#                         past_examination_frame.focus()
#
#                     elif command in ('Печать А5', 'Печать А6'):
#                         if command == 'Печать А5':
#                             text_size = 11
#                         else:
#                             text_size = 8
#                         exam_text = past_examination_data['found_info'][f"{rowid_}"]. \
#                                         get('txt_examination_past').get(1.0, 'end')[:-1]
#
#                         document = Document()
#                         paragraph = document.add_paragraph()
#                         for text in exam_text.split('\n'):
#                             text = text.strip()
#
#                             for marker in ('Жалобы:', 'Данные объективного обследования:', 'Диагноз:'):
#                                 if text.startswith(marker):
#                                     text = text.replace(marker, '')
#                                     p = paragraph.add_run(marker)
#                                     r_fmt = p.font
#                                     r_fmt.name = 'Times New Roman'
#                                     r_fmt.size = Pt(text_size)
#                                     r_fmt.bold = True
#                             if text:
#                                 p = paragraph.add_run(f"{text}\n")
#                                 r_fmt = p.font
#                                 r_fmt.name = 'Times New Roman'
#                                 r_fmt.size = Pt(text_size)
#
#                         sections = document.sections
#                         for section in sections:
#                             section.top_margin = Cm(1.5)
#                             section.bottom_margin = Cm(1.5)
#                             section.left_margin = Cm(1.5)
#                             section.right_margin = Cm(1.5)
#                             if command == 'Печать А5':
#                                 section.page_height = Cm(14.8)
#                                 section.page_width = Cm(21)
#                             else:
#                                 section.page_height = Cm(10.5)
#                                 section.page_width = Cm(14.8)
#
#                         doc_name = f'.{os.sep}generated{os.sep}осмотр.docx'
#                         doc_name = save_document(doc=document, doc_name=doc_name)
#                         run_document(doc_name)
#
#             past_examination_data = dict()
#             past_examination_data['buttons'] = dict()
#             past_examination_data['found_info'] = dict()
#             past_examination_data['destroy_elements'] = dict()
#             past_examination_data['frame_info'] = dict()
#
#             past_examination_connect_status = StringVar()
#             Label(master=past_examination_frame, textvariable=past_examination_connect_status,
#                   font=('Comic Sans MS', user.get('text_size')), bg="#36566d", fg='white').pack(fill='both',
#                                                                                                 expand=True)
#
#             past_examination_connect_status.set("Подключение к базе данных")
#             past_examination_frame.update()
#             found_info = data['examination'].get('select_past_examination')
#             if found_info:
#                 past_examination_connect_status.set("Подключение к базе данных: успешно")
#             past_examination_frame.update()
#
#             if not found_info:
#                 past_examination_connect_status.set(f"{past_examination_connect_status.get()}\n"
#                                                     f"История о прошлых осмотрах пациента пуста")
#             else:
#                 for info in found_info:
#                     local_frame = Frame(past_examination_frame, borderwidth=1, relief="solid", padx=3, pady=3)
#                     rowid, date_time, doctor_name, status, ln_type, patient_info_, examination_text, examination_key = info
#
#                     past_examination_data['destroy_elements'][f"{rowid}"] = local_frame
#
#                     past_examination_data['found_info'][f"{rowid}"] = {
#                         "date_time": date_time,
#                         "doctor_name": doctor_name,
#                         "ln_type": ln_type,
#                         "patient_info_": patient_info_,
#                         "examination_text": examination_text,
#                         "examination_key": examination_key
#                     }
#                     past_exam_text = StringVar()
#                     past_examination_data['found_info'][f"{rowid}"]['past_exam_text'] = past_exam_text
#                     past_exam_text.set(f"Время редактирования: {date_time}    Пользователь: {doctor_name}    Статус: {status}")
#                     Label(master=local_frame, width=100,
#                           textvariable=past_exam_text,
#                           justify='left',
#                           font=('Comic Sans MS', user.get('text_size')),
#                           bg='white').pack(fill='both', expand=True, side="top")
#
#                     txt_examination_past = ScrolledText(local_frame, width=100, height=20,
#                                                         font=('Comic Sans MS', user.get('text_size')),
#                                                         wrap="word")
#
#                     txt_examination_past.insert(1.0, f"{examination_text}\n")
#                     txt_examination_past.pack(fill='both', expand=True, side="top")
#                     past_examination_data['found_info'][f"{rowid}"]['txt_examination_past'] = txt_examination_past
#                     # counter = 0
#                     # for text in examination_text.split(" "):
#                     #     counter += len(text)
#                     #     if '\n' in text:
#                     #         counter = 0
#                     #     if counter >= 90:
#                     #         past_exam_text += '\n'
#                     #         counter = 0
#                     #
#                     #     past_exam_text += text + ' '
#                     # past_exam_text += f"\nЛН: {ln_type}\nВрач: {doctor_name}".replace('_', ' ')
#                     # Label(master=local_frame, width=100,
#                     #       text=past_exam_text,
#                     #       justify='left',
#                     #       font=('Comic Sans MS', user.get('text_size')),
#                     #       bg='white').pack(fill='both', expand=True, side="top")
#
#                     if examination_key.startswith('type_examination:____certificate__'):
#                         if doctor_name == user.get('doctor_name'):
#                             mark = 'Удалить справку'
#                             past_examination_data['buttons'][f"{rowid}__{mark}"] = IntVar()
#                             Checkbutton(local_frame, text=mark,
#                                         font=('Comic Sans MS', user.get('text_size')),
#                                         onvalue=1, offvalue=0,
#                                         variable=past_examination_data['buttons'].get(f"{rowid}__{mark}"),
#                                         command=selected_past_but,
#                                         indicatoron=False,
#                                         selectcolor='#77f1ff').pack(fill='both', expand=True)
#                     else:
#                         for mark in ('Удалить осмотр',
#                                      'Загрузить в текущий',
#                                      "Печать А5",
#                                      "Печать А6",
#                                      "Сохранить изменения"):
#                             past_examination_data['buttons'][f"{rowid}__{mark}"] = IntVar()
#
#                             if mark not in ("Сохранить изменения", 'Удалить осмотр') \
#                                     or doctor_name == user.get('doctor_name'):
#                                 Checkbutton(local_frame, text=mark,
#                                             font=('Comic Sans MS', user.get('text_size')),
#                                             onvalue=1, offvalue=0,
#                                             variable=past_examination_data['buttons'].get(f"{rowid}__{mark}"),
#                                             command=selected_past_but,
#                                             indicatoron=False,
#                                             selectcolor='#77f1ff').pack(fill='both', expand=True, side="left")
#
#
#                     local_frame.columnconfigure(index='all', minsize=40, weight=1)
#                     local_frame.rowconfigure(index='all', minsize=20)
#                     local_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#         past_examination_root = ScrolledRoot(marker='past_examination', func=past_examination)
#         past_examination_root.title(f"Осмотры пациента "
#                                     f"{patient.get('name').split()[0]} "
#                                     f"{patient.get('name').split()[1]} "
#                                     f"{patient.get('birth_date')}")
#         past_examination_root.geometry('+0+0')
#
#         past_examination_root.mainloop()
#
#     def change_all_kb_status():
#         if data['examination'].get('all_kb_status') == 'open':
#             for marker in ('complaints', 'examination', 'prescription'):
#                 if data['examination'].get(f'open_{marker}_kb') != 'closed':
#                     if marker == 'complaints':
#                         change_complaints_kb_status()
#                     elif marker == 'examination':
#                         change_examination_kb_status()
#                     elif marker == 'prescription':
#                         change_prescription_kb_status()
#             data['examination']['all_kb_status'] = 'closed'
#             button_change_all_kb_status['text'] = 'Открыть\nвсе\nклавиатуры'
#
#         elif data['examination'].get('all_kb_status') == 'closed':
#             for marker in ('complaints', 'examination', 'prescription'):
#                 if not data['examination'].get(f'open_{marker}_kb') == 'open':
#                     if marker == 'complaints':
#                         change_complaints_kb_status()
#                     elif marker == 'examination':
#                         change_examination_kb_status()
#                     elif marker == 'prescription':
#                         change_prescription_kb_status()
#             data['examination']['all_kb_status'] = 'open'
#             button_change_all_kb_status['text'] = 'Скрыть\nвсе\nклавиатуры'
#
#         root_examination.update()
#
#     def create_examination_doc(doc_size=None):
#
#         type_ln = selected_type_ln.get()
#         if type_ln in ('Лист ВН', 'Справка ВН') and not txt_ln_num.get():
#             messagebox.showerror('Ошибка!', 'Не указан номер документа ВН!')
#             txt_ln_num.focus()
#         else:
#             render_data.clear()
#
#             date_time_str = txt_date_time.get().strip()
#             if date_time_str:
#                 render_data['date_time'] = f"Дата осмотра: {date_time_str}\n"
#             else:
#                 render_data['date_time'] = ""
#
#             render_data['patient_info'] = f"ФИО: {patient.get('name')}\t" \
#                                           f"Дата рождения: {patient.get('birth_date')}\t{age_txt}\n" \
#                                           f"Место осмотра: {selected_place.get()}"
#             if selected_place.get() == 'в поликлинике':
#                 render_data['patient_info'] = f"{render_data.get('patient_info')}\tна приеме с {combo_company.get()}"
#             render_data['patient_info'] = f"{render_data.get('patient_info')}    {patient.get('patient_district')}-й уч"
#
#             render_data['complaints'] = f"{txt_complaints.get(1.0, 'end').strip()}"
#             examination_text = txt_examination.get(1.0, 'end').replace('\n', ' ').replace('  ', ' ').strip()
#             render_data['examination'] = f" {examination_text}"
#             render_data['diagnosis'] = f"{txt_diagnosis.get(1.0, 'end').strip()}"
#             render_data['prescription'] = f"{txt_prescription.get(1.0, 'end').strip()}"
#
#             add_info = ''
#             if type_ln == 'Уход обеспечен':
#                 add_info += "Уход обеспечен\n"
#             elif type_ln in ('Лист ВН', 'Справка ВН'):
#                 if data['examination'].get('ln_closed'):
#                     if type_ln == 'Лист ВН':
#                         add_info += f"{type_ln} № {txt_ln_num.get()} закрыт к труду c {txt_ln_until.get()}\n"
#                     else:
#                         add_info += f"{type_ln} № {txt_ln_num.get()} закрыта к труду c {txt_ln_until.get()}\n"
#                 else:
#                     add_info += f"{type_ln} № {txt_ln_num.get()} c {txt_ln_from.get()} по {txt_ln_until.get()}\n"
#             if txt_second_examination.get():
#                 add_info += f"Повторный осмотр: {txt_second_examination.get()}\n"
#                 render_data['second_exam'] = f"Повторный осмотр: {txt_second_examination.get()}"
#             else:
#                 render_data['second_exam'] = ''
#             # add_info += f"Врач-педиатр: {user.get('doctor_name')}"
#
#             render_data['doctor_name'] = user.get('doctor_name')
#             render_data['add_info'] = add_info.strip()
#
#             active_but = ""
#             if child_marker:
#                 active_but += "type_examination:____child__<end!>__\n"
#             else:
#                 active_but += "type_examination:____adult__<end!>__\n"
#             if selected_diagnosis.get():
#                 active_but += f"selected_diagnosis_get:____{selected_diagnosis.get()}__<end!>__\n"
#
#             active_but += f"selected_place:____{selected_place.get()}__<end!>__\n"
#
#             for mark in ('complaints', 'examination', 'prescription'):
#                 active_but += f'{mark}:__'
#                 for but in data['examination'].get(f'{mark}_but'):
#                     if data['examination'][f'{mark}_but'].get(but).get() == 1:
#                         active_but += f'__{but}'
#                 active_but += '__<end!>__\n'
#
#             local_drugs_text = ''
#             for drug_category in data['examination'].get('selected_drugs', []):
#                 for drug_name in data['examination']['selected_drugs'].get(drug_category, []):
#                     for mark_flag in data['examination']['selected_drugs'][drug_category].get(drug_name, []):
#                         mark = data['examination']['selected_drugs'][drug_category][drug_name].get(mark_flag)
#                         if mark:
#                             if isinstance(mark, list):
#                                 for mark_2 in mark:
#                                     local_drugs_text += f"____{drug_category}__{drug_name}__{mark_flag}__{mark_2}"
#                             else:
#                                 local_drugs_text += f"____{drug_category}__{drug_name}__{mark_flag}__{mark}"
#             if local_drugs_text:
#                 active_but += f"drugs:{local_drugs_text}__<end!>__\n"
#             if data['examination']['anthro']['patient_anthro_data'].get():
#                 patient_anthro_data_loc = ''
#                 patient_anthro_data_but_loc = 'patient_anthro_data:____'
#
#                 npr_flag = False
#                 for mark in local_data_anthro:
#
#
#                     for name, variable in local_data_anthro.get(mark):
#                         select_name = data['examination']['anthro'][variable].get()
#                         if select_name:
#                             if mark == 'anal' and not npr_flag:
#                                 patient_anthro_data_loc += '\nНПР: \n'
#                                 npr_flag = True
#
#                             patient_anthro_data_loc += f"{name}".replace('_', select_name)
#                             patient_anthro_data_but_loc += f"{variable}__{select_name}____".replace(',', '.')
#                             if child_marker and doc_size == 'а5_child_disp':
#                                 patient_anthro_data_loc += '\n'
#                             else:
#                                 patient_anthro_data_loc += '  '
#                 render_data['patient_anthro_data'] = f"{patient_anthro_data_loc}".strip()
#                 active_but = f"{active_but}" \
#                              f"{patient_anthro_data_but_loc}__<end!>__\n"
#
#                 active_but += f"drugs:{local_drugs_text}__<end!>__\n"
#             render_data['epicrisis_add_text'] = txt_epicrisis_add.get(1.0, 'end').strip()
#             if (type_ln in ('Лист ВН', 'Справка ВН')
#                     and data['examination']['LN_data'].get('current_data')
#                     and data['examination']['LN_data']['current_data'].get('save')):
#                 local_ln_data = ''
#                 for marker in ('Фамилия', 'Имя', 'Отчество',
#                                'Дата рождения', 'Место работы (службы, учебы)',
#                                'Информация про ребенка (в корешок)'):
#                     local_ln_data += f"____{marker}__{data['examination']['LN_data']['current_data'].get(marker).get().strip()}"
#                 active_but += f"LN_blank_data:{local_ln_data}__<end!>__\n"
#
#             active_but = f"{active_but}" \
#                          f"complaints_text:____{render_data.get('complaints')}__<end!>__\n" \
#                          f"examination_text:____{render_data.get('examination')}__<end!>__\n" \
#                          f"diagnosis_text:____{render_data.get('diagnosis')}__<end!>__\n" \
#                          f"prescription_text:____{render_data.get('prescription')}__<end!>__\n" \
#                          f"epicrisis_add_text:____{render_data.get('epicrisis_add_text')}__<end!>__\n"
#
#             anamnesis = txt_anamnesis.get(1.0, 'end').strip()
#             if not child_marker:
#                 active_but = f"{active_but}" \
#                              f"anamnesis:____{anamnesis}__<end!>__\n"
#                 if anamnesis:
#                     anamnesis = f"\nАнамнез заболевания: {anamnesis}"
#                     print(anamnesis)
#             render_data['anamnesis'] = anamnesis
#
#             print(active_but)
#
#             patient_anthro_data = render_data.get('patient_anthro_data', '').replace('\n', '  ')
#             active_examination = f"{render_data.get('date_time')}{render_data.get('patient_info')}\n" \
#                                  f"{render_data.get('epicrisis_add_text')}\n" \
#                                  f"Жалобы: {render_data.get('complaints')}{anamnesis}\n" \
#                                  f"Данные объективного обследования: " \
#                                  f"{patient_anthro_data}\n" \
#                                  f"{render_data.get('examination')}\n" \
#                                  f"{render_data.get('diagnosis')}\n" \
#                                  f"{render_data.get('prescription')}\n" \
#                                  f"{render_data.get('add_info')}\n" \
#                                  f"Врач-педиатр: {user.get('doctor_name')}"
#
#             if type_ln in ('Лист ВН', 'Справка ВН'):
#                 num_ln = ''
#                 for word in txt_ln_num.get().strip():
#                     if not word.isdigit():
#                         num_ln += word
#                 num_ln += '_'
#                 for word in txt_ln_num.get().strip():
#                     if word.isdigit():
#                         num_ln += word
#                 if data['examination'].get('ln_closed'):
#                     ln_data = f"{type_ln}__{num_ln}__closed"
#                 else:
#                     ln_data = f"{type_ln}__{num_ln}__{txt_ln_from.get().strip()}__{txt_ln_until.get().strip()}"
#
#             else:
#                 ln_data = type_ln
#
#             save_info_examination = [
#                 f"{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
#                 f"{user.get('doctor_name')}",
#                 'loc',
#                 ln_data,
#                 f"{patient.get('name').strip()}__{patient.get('birth_date').strip()}",
#                 active_examination,
#                 active_but,
#                 None]
#             if doc_size:
#                 render_data['diagnosis'] = render_data.get('diagnosis', '').replace('Диагноз:', '')
#
#                 doc = DocxTemplate(f".{os.sep}example{os.sep}certificate{os.sep}осмотр_педиатра_{doc_size}.docx")
#                 doc.render(render_data)
#                 doc_name = f".{os.sep}generated{os.sep}{patient.get('name').split()[0]}_осмотр__" \
#                            f"{datetime.now().strftime('%d_%m_%Y_%H_%M')}.docx"
#                 doc_name = save_document(doc=doc, doc_name=doc_name)
#                 run_document(doc_name)
#
#             answer, message = data_base(command='examination__save',
#                                         insert_data=save_info_examination)
#             if not answer:
#                 messagebox.showerror("Ошибка", f"Ошибка сохранения осмотра\n{message}")
#
#             render_data.clear()
#             data.clear()
#             root_examination.destroy()
#             data_base(command="statistic_write",
#                       insert_data="Осмотр")
#
#     def paste_hr_br():
#         indicators = {
#             '0-1': {
#                 'br': (26, 28),
#                 'hr': (104, 112),
#                 'bp': (90, 100, 60, 70)},
#
#             '0-3': {
#                 'br': (24, 28),
#                 'hr': (96, 110),
#                 'bp': (90, 100, 60, 70)},
#             '3-6': {
#                 'br': (22, 28),
#                 'hr': (80, 100),
#                 'bp': (96, 110, 60, 70)},
#             '6-12': {
#                 'br': (20, 22),
#                 'hr': (70, 90),
#                 'bp': (100, 110, 60, 75)},
#             '>12': {
#                 'br': (18, 22),
#                 'hr': (70, 80),
#                 'bp': (110, 120, 70, 78)},
#         }
#         if age <= 1:
#             indicator = indicators['0-1']
#         elif age <= 3:
#             indicator = indicators['0-3']
#         elif age <= 6:
#             indicator = indicators['3-6']
#         elif age <= 12:
#             indicator = indicators['6-12']
#         else:
#             indicator = indicators['>12']
#
#         render_data['br'] = random.randrange(start=indicator['br'][0], stop=indicator['br'][1], step=2)
#         render_data['hr'] = random.randrange(start=indicator['hr'][0], stop=indicator['hr'][1], step=2)
#
#     def paste_frame_diagnosis():
#         def select_diagnosis():
#             data['examination']['diagnosis'] = selected_diagnosis.get()
#
#             for mark_ in data['examination'].get('complaints_but'):
#                 data['examination']['complaints_but'].get(mark_).set(0)
#             for mark_ in data['examination'].get('examination_but'):
#                 data['examination']['examination_but'].get(mark_).set(0)
#             for mark_ in data['examination'].get('prescription_but'):
#                 data['examination']['prescription_but'].get(mark_).set(0)
#
#             if data['examination'].get('selected_drugs'):
#                 data['examination']['selected_drugs'].clear()
#
#             if child_marker:
#                 if selected_diagnosis.get() in ('Врачебно-сестринский патронаж', 'Патронаж'):
#                     for mark_ in data['examination'].get('anthro', []):
#                         if mark_.startswith('txt_anal_'):
#                             data['examination']['anthro'].get(mark_).set('')
#                 else:
#                     patient_age_month = patient_age.get('month')
#                     if patient_age.get('year') > 0:
#                         patient_age_month = 12
#
#                     for mark_ in data['examination'].get('anthro', []):
#                         if mark_.startswith('txt_anal_'):
#                             data['examination']['anthro'].get(mark_).set(f"{patient_age_month} мес.")
#
#
#             for complaints_but in all_diagnosis.get(selected_diagnosis.get()).get("complaints"):
#                 complaints_list = all_diagnosis.get(selected_diagnosis.get()).get("complaints").get(
#                     complaints_but)
#                 if isinstance(complaints_list, list):
#                     for complaints in complaints_list:
#                         if f"{complaints_but}_{complaints}" in data['examination'].get('complaints_but'):
#                             data['examination']['complaints_but'][f"{complaints_but}_{complaints}"].set(1)
#                 else:
#                     if complaints_but in data['examination'].get('complaints_but'):
#                         data['examination']['complaints_but'][complaints_but].set(1)
#
#             for examination_but in all_diagnosis.get(selected_diagnosis.get()).get("examination"):
#                 examination_list = all_diagnosis.get(selected_diagnosis.get()).get("examination").get(
#                     examination_but)
#                 if isinstance(examination_list, list):
#                     for examination in examination_list:
#                         if f"{examination_but}_{examination}" in data['examination'].get('examination_but'):
#                             data['examination']['examination_but'][f"{examination_but}_{examination}"].set(1)
#                 else:
#                     if examination_but in data['examination'].get('examination_but'):
#                         data['examination']['examination_but'][examination_but].set(1)
#
#             for prescription_but in all_diagnosis.get(selected_diagnosis.get()).get("prescription"):
#                 prescription_list = all_diagnosis.get(selected_diagnosis.get()).get("prescription").get(
#                     prescription_but)
#                 if isinstance(prescription_list, list):
#                     for prescription in prescription_list:
#                         if f"{prescription_but}_{prescription}" in data['examination'].get('prescription_but'):
#                             data['examination']['prescription_but'][f"{prescription_but}_{prescription}"].set(1)
#                 else:
#                     if prescription_but in data['examination'].get('prescription_but'):
#                         data['examination']['prescription_but'][prescription_but].set(1)
#
#             for drugs_but in all_diagnosis.get(selected_diagnosis.get()).get("drugs", []):
#
#                 if len(drugs_but.split('__')) == 4:
#                     select_drugs_item(drug_name=drugs_but)
#
#
#             txt_complaints.delete(1.0, 'end')
#             txt_complaints.insert(1.0, all_diagnosis.get(selected_diagnosis.get()).get("complaints_text", ''))
#
#             txt_examination.delete(1.0, 'end')
#             txt_examination.insert(1.0, all_diagnosis.get(selected_diagnosis.get()).get("examination_text", ''))
#
#             txt_prescription.delete(1.0, 'end')
#             txt_prescription.insert(1.0, all_diagnosis.get(selected_diagnosis.get()).get("prescription_text", ''))
#
#             txt_epicrisis_add.delete(1.0, 'end')
#
#             if "Проведена беседа: Безопасность ____" in all_diagnosis.get(selected_diagnosis.get()).get("epicrisis_add_text", ''):
#                 conversation = ("Ответственность родителей за детей",
#                                 "Безопасность сна",
#                                 "Безопасность в кроватке",
#                                 "Безопасность при купании",
#                                 "Безопасность детской одежды",
#                                 "Отравления детей",
#                                 "Домашние животные и безопасность ребёнка")
#
#                 txt_epicrisis_add.insert(1.0, all_diagnosis.get(selected_diagnosis.get()).get("epicrisis_add_text", '').replace('Проведена беседа: Безопасность ____', f"Проведена беседа: {random.choice(conversation)}"))
#             else:
#                 txt_epicrisis_add.insert(1.0, all_diagnosis.get(selected_diagnosis.get()).get("epicrisis_add_text", ''))
#             txt_epicrisis_add["height"] = len(all_diagnosis.get(selected_diagnosis.get()).get("epicrisis_add_text", '\n').split('\n')) + 1
#
#
#             if all_diagnosis.get(selected_diagnosis.get()).get("selected_place"):
#                 selected_place.set(all_diagnosis.get(selected_diagnosis.get()).get("selected_place"))
#
#             txt_diagnosis.delete(1.0, 'end')
#             if child_marker and data['examination'].get('get_last_diagnosis_text'):
#                 txt_diagnosis.insert(1.0, data['examination'].get('get_last_diagnosis_text'))
#
#             elif all_diagnosis.get(selected_diagnosis.get()).get("diagnosis_text"):
#                 txt_diagnosis.insert(1.0, all_diagnosis.get(selected_diagnosis.get()).get("diagnosis_text"))
#             else:
#                 txt_diagnosis.insert(1.0, f'Диагноз: {selected_diagnosis.get()} ')
#
#             edit_examination_kb_text()
#             if not data['examination'].get('all_kb_status'):
#                 change_all_kb_status()
#             else:
#                 root_examination.update()
#
#         loc_data = all_data_diagnosis.get('diagnosis')
#         if child_marker:
#             loc_data = all_data_diagnosis.get('diagnosis_child')
#
#
#         label_diagnosis = Label(master=frame_diagnosis, text=f"{loc_data[0]}",
#                                 font=('Comic Sans MS', user.get('text_size')), bg='white')
#         label_diagnosis.pack(fill='both', expand=True)
#         frame_diagnosis_1 = Frame(frame_diagnosis, borderwidth=1)
#         row, col = 0, 0
#
#         for mark in loc_data[1:]:
#             btn = Radiobutton(frame_diagnosis_1, text=mark,
#                               font=('Comic Sans MS', user.get('text_size')),
#                               value=mark, variable=selected_diagnosis, command=select_diagnosis,
#                               indicatoron=False, selectcolor='#77f1ff')
#             btn.grid(row=row, column=col, sticky='ew')
#             col += 1
#
#         frame_diagnosis_1.columnconfigure(index='all', minsize=40, weight=1)
#         frame_diagnosis_1.rowconfigure(index='all', minsize=20)
#         frame_diagnosis_1.pack(fill='both', expand=True)
#
#         frame_diagnosis.columnconfigure(index='all', minsize=40, weight=1)
#         frame_diagnosis.rowconfigure(index='all', minsize=20)
#         frame_diagnosis.pack(fill='both', expand=True, side=tk.LEFT)
#
#     def paste_frame_date_time():
#         label_date_time = Label(master=frame_date_time, text="Дата и время осмотра:",
#                                 font=('Comic Sans MS', user.get('text_size')), bg='white')
#         label_date_time.pack(fill='both', expand=True)
#         txt_date_time.pack(fill='both', expand=True)
#         txt_date_time.insert(0, datetime.now().strftime("%d.%m.%Y %H:%M"))
#
#         frame_date_time.columnconfigure(index='all', minsize=40, weight=1)
#         frame_date_time.rowconfigure(index='all', minsize=20)
#         frame_date_time.pack(fill='both', expand=True, side=tk.LEFT)
#
#         button_change_all_kb_status.grid(column=0, row=0, rowspan=3, sticky='nswe')
#
#
#     def my_saved_diagnosis():
#
#         def delete_my_diagnosis():
#
#             found_diagnosis = user.get('my_saved_diagnosis')
#             if not found_diagnosis:
#                 messagebox.showerror('Ошибка!', f'История о сохраненных осмотрах пуста!\n')
#                 examination_root.focus()
#
#             else:
#                 def delete_my_diagnosis_root(delete_my_diagnosis_root_main: Frame):
#                     def select_delete_diagnosis():
#                         answer, mess = data_base(command='examination__delete_my_diagnosis',
#                                                  delete_data=selected_delete_diagnosis.get())
#                         if answer:
#                             messagebox.showinfo('Инфо', f'Осмотр успешно удален')
#                             delete_my_diagnosis_root_main.focus()
#
#                             destroy_elements['delete_my_diagnosis'][f"{selected_delete_diagnosis.get()}"].destroy()
#
#
#
#                     selected_delete_diagnosis = StringVar()
#                     destroy_elements['delete_my_diagnosis'] = dict()
#
#                     for diagnosis_, examination_key_ in found_diagnosis:
#                         frame_loc = Frame(delete_my_diagnosis_root_main, borderwidth=1, relief="solid", padx=3, pady=3)
#                         destroy_elements['delete_my_diagnosis'][f"{diagnosis_}"] = frame_loc
#                         text = f'Имя шаблона: {diagnosis_}\n'
#                         for info in examination_key_.split('__<end!>__\n'):
#                             if 'complaints_text:____' in info:
#                                 for i in info.replace('complaints_text:____', 'Жалобы: ').split():
#                                     if len(text.split('\n')[-1]) > 90:
#                                         text += '\n'
#                                     text += f"{i} "
#                                 text += "\n"
#                             if 'examination_text:____' in info:
#                                 for i in info.replace('examination_text:____', 'Осмотр: ').split():
#                                     if len(text.split('\n')[-1]) > 90:
#                                         text += '\n'
#                                     text += f"{i} "
#                                 text += "\n"
#                             if 'diagnosis_text:____' in info:
#                                 for i in info.replace('diagnosis_text:____', 'Диагноз: ').split():
#                                     if len(text.split('\n')[-1]) > 90:
#                                         text += '\n'
#                                     text += f"{i} "
#                                 text += "\n"
#                             if 'prescription_text:____' in info:
#                                 for i in info.replace('prescription_text:____', 'Рекомендации: ').split():
#                                     if len(text.split('\n')[-1]) > 90:
#                                         text += '\n'
#                                     text += f"{i} "
#                                 text += "\n"
#
#                         Label(master=frame_loc, text=text, justify="left",
#                               font=('Comic Sans MS', user.get('text_size')),
#                               bg='white').pack(fill='both', expand=True)
#
#                         Radiobutton(master=frame_loc, text=f"Удалить {diagnosis_}",
#                                     font=('Comic Sans MS', user.get('text_size')),
#                                     value=f"{diagnosis_}", variable=selected_delete_diagnosis,
#                                     command=select_delete_diagnosis,
#                                     indicatoron=False, selectcolor='#77f1ff').pack(fill='both', expand=True)
#
#                         frame_loc.pack(fill='both', expand=True)
#
#                 delete_diagnosis_root = ScrolledRoot(marker='delete_diagnosis_root', func=delete_my_diagnosis_root)
#                 delete_diagnosis_root.title(f"Удаление моих осмотров")
#                 delete_diagnosis_root.geometry('+0+0')
#                 delete_diagnosis_root.mainloop()
#
#         def select_my_saved_diagnosis():
#             my_selected_diagnosis = \
#                 data['examination']['my_saved_diagnosis'].get(selected_diagnosis.get().replace('my__', ''))
#
#             for but_marker in ('complaints', 'examination', 'prescription'):
#                 for mark_ in data['examination'].get(f'{but_marker}_but'):
#                     data['examination'][f'{but_marker}_but'].get(mark_).set(0)
#             if data['examination'].get('selected_drugs'):
#                 data['examination']['selected_drugs'].clear()
#             txt_epicrisis_add.delete(1.0, 'end')
#
#             for selected_marker in my_selected_diagnosis.split('__<end!>__\n'):
#                 if 'selected_diagnosis_get:____' in selected_marker:
#                     selected_diagnosis.set(selected_marker.split(':____')[-1])
#                 elif "selected_place:____" in selected_marker:
#                     selected_place.set(selected_marker.replace('selected_place:____', ''))
#
#                 elif "drugs:____" in selected_marker:
#                     all_buttons = selected_marker.replace('drugs:____', '').split("____")
#
#                     for drugs_but in all_buttons:
#                         if len(drugs_but.split('__')) == 4:
#                             select_drugs_item(drug_name=drugs_but)
#
#                 #
#                 # elif "drugs:____" in selected_marker:
#                 #     if not data['examination'].get('selected_drugs'):
#                 #         data['examination']['selected_drugs'] = dict()
#                 #
#                 #     all_buttons = selected_marker.replace('drugs:____', '').split("____")
#                 #     for button in all_buttons:
#                 # if len(drugs_but.split('__')) == 4:
#                 #         if button.split('__') == 4:
#                 #             drug_category, drug_name, mark_flag, mark = button.split('__')
#                 #             if not data['examination']['selected_drugs'].get(drug_category):
#                 #                 data['examination']['selected_drugs'][drug_category] = dict()
#                 #             if not data['examination']['selected_drugs'][drug_category].get(
#                 #                     drug_name):
#                 #                 data['examination']['selected_drugs'][drug_category][
#                 #                     drug_name] = dict()
#                 #
#                 #             if mark_flag == "Способ применения":
#                 #                 if not data['examination']['selected_drugs'][drug_category][
#                 #                     drug_name].get(mark_flag):
#                 #                     data['examination']['selected_drugs'][drug_category][
#                 #                         drug_name][mark_flag] = list()
#                 #                 data['examination']['selected_drugs'][drug_category][
#                 #                     drug_name][mark_flag].append(mark)
#                 #
#                 #             else:
#                 #                 data['examination']['selected_drugs'][drug_category][drug_name][
#                 #                     mark_flag] = mark
#                 elif "epicrisis_add_text:____" in selected_marker:
#                     txt_epicrisis_add.insert(1.0, selected_marker.replace("epicrisis_add_text:____", ""))
#                     txt_epicrisis_add["height"] = len(selected_marker.split('\n')) + 1
#
#
#                 else:
#                     for but_marker in ('complaints', 'examination', 'prescription', 'diagnosis'):
#                         if f"{but_marker}:____" in selected_marker:
#                             all_buttons = selected_marker.replace(f"{but_marker}:____", '').split("__")
#                             for button in all_buttons:
#                                 if button in data['examination'].get(f'{but_marker}_but'):
#                                     data['examination'][f'{but_marker}_but'].get(button).set(1)
#
#
#                         elif f"{but_marker}_text:____" in selected_marker:
#                             text_inserted = selected_marker.replace(f"{but_marker}_text:____", '')
#
#                             if but_marker == 'complaints':
#                                 txt_complaints.delete(1.0, 'end')
#                                 txt_complaints.insert(1.0, text_inserted)
#                             if but_marker == 'examination':
#                                 txt_examination.delete(1.0, 'end')
#                                 txt_examination.insert(1.0, text_inserted)
#                             if but_marker == 'diagnosis':
#                                 txt_diagnosis.delete(1.0, 'end')
#                                 txt_diagnosis.insert(1.0, text_inserted)
#                             if but_marker == 'prescription':
#                                 txt_prescription.delete(1.0, 'end')
#                                 txt_prescription.insert(1.0, text_inserted)
#
#                 edit_examination_kb_text()
#                 edit_complaints_kb_color()
#
#         def saved_new_diagnosis():
#             def final_save_new_diagnosis():
#                 if data_base(command='save_new_diagnosis',
#                              insert_data=[user.get('doctor_name'), new_diagnosis_name.get(), render_text]):
#                     messagebox.showinfo('Инфо', f'Осмотр успешно сохранен')
#                     saved_new_diagnosis_root.destroy()
#                     root_examination.destroy()
#                 else:
#                     messagebox.showerror('Ошибка!', f'Ошибка при сохранении!')
#
#             if not new_diagnosis_name.get():
#                 messagebox.showerror('Ошибка!', 'Не указано имя осмотра для сохранения!')
#                 new_diagnosis_name.focus()
#             else:
#                 saved_new_diagnosis_root = Toplevel()
#                 saved_new_diagnosis_root.title('Проверка осмотра')
#                 saved_new_diagnosis_root.config(bg='white')
#
#                 text = f"Имя осмотра: {new_diagnosis_name.get()}\n"
#                 render_text = ''
#                 if selected_place.get():
#                     text += f"Место осмотра: {selected_place.get()}\n"
#                     render_text += f"selected_place:____{selected_place.get()}__<end!>__\n"
#                 text += f"Дополнительная информация: {txt_epicrisis_add.get(1.0, 'end').strip()}\n"
#                 for mark in ('complaints', 'examination', 'prescription'):
#                     render_text += f'{mark}:__'
#                     # text += f"{mark}: ".replace('complaints', 'Жалобы (кнопки)') \
#                     #     .replace('examination', 'Осмотр (кнопки)') \
#                     #     .replace('prescription', 'Назначения (кнопки)')
#                     for but in data['examination'].get(f'{mark}_but'):
#
#                         if data['examination'][f'{mark}_but'].get(but).get() == 1:
#                             render_text += f'__{but}'
#
#                     render_text += '__<end!>__\n'
#                 local_drugs_text = ''
#                 for drug_category in data['examination'].get('selected_drugs', []):
#                     for drug_name in data['examination']['selected_drugs'].get(drug_category, []):
#                         for mark_flag in data['examination']['selected_drugs'][drug_category].get(drug_name, []):
#                             mark = data['examination']['selected_drugs'][drug_category][drug_name].get(mark_flag)
#                             if mark:
#                                 if isinstance(mark, list):
#                                     for mark_2 in mark:
#                                         local_drugs_text += f"____{drug_category}__{drug_name}__{mark_flag}__{mark_2}"
#                                 else:
#                                     local_drugs_text += f"____{drug_category}__{drug_name}__{mark_flag}__{mark}"
#                 if local_drugs_text:
#                     render_text += f"drugs:{local_drugs_text}__<end!>__\n"
#                 examination_text = txt_examination.get(1.0, 'end').replace('\n', ' ').replace('  ', ' ').strip()
#                 render_text += f"complaints_text:____{txt_complaints.get(1.0, 'end').strip()}__<end!>__\n" \
#                                f"examination_text:____{examination_text}__<end!>__\n" \
#                                f"diagnosis_text:____{txt_diagnosis.get(1.0, 'end').strip()}__<end!>__\n" \
#                                f"prescription_text:____{txt_prescription.get(1.0, 'end').strip()}__<end!>__\n" \
#                                f"epicrisis_add_text:____{txt_epicrisis_add.get(1.0, 'end').strip()}__<end!>__\n"
#
#
#                 render_text = render_text.replace("'", '').replace("\"", '')
#                 if txt_complaints.get(1.0, 'end').strip():
#                     text += '\nЖалобы: '
#                     for word in txt_complaints.get(1.0, 'end').strip().split():
#                         if len(text.split('\n')[-1]) > 100:
#                             text += '\n'
#                         text += word + " "
#                 if txt_examination.get(1.0, 'end').strip():
#                     text += '\nОсмотр: '
#                     for word in txt_examination.get(1.0, 'end').strip().split():
#                         if len(text.split('\n')[-1]) > 100:
#                             text += '\n'
#                         text += word + " "
#                 if txt_diagnosis.get(1.0, 'end').strip():
#                     text += '\nДиагноз: '
#                     for word in txt_diagnosis.get(1.0, 'end').strip().split():
#                         if len(text.split('\n')[-1]) > 100:
#                             text += '\n'
#                         text += word + " "
#                 if txt_prescription.get(1.0, 'end').strip():
#                     text += '\nНазначения: '
#                     for word in txt_prescription.get(1.0, 'end').strip().split():
#                         if len(text.split('\n')[-1]) > 100:
#                             text += '\n'
#                         text += word + " "
#
#                 Label(master=saved_new_diagnosis_root, text=text, justify="left",
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg='white').pack(fill='both', expand=True)
#                 Button(saved_new_diagnosis_root, text='Сохранить',
#                        command=final_save_new_diagnosis,
#                        font=('Comic Sans MS', user.get('text_size'))).pack(fill='both', expand=True)
#
#                 saved_new_diagnosis_root.mainloop()
#
#         def add_frame_new_diagnosis():
#
#             if not data['examination'].get('add_frame_new_diagnosis'):
#                 data['examination']['add_frame_new_diagnosis'] = 'closed'
#
#             if data['examination'].get('add_frame_new_diagnosis') == "closed":
#                 data['examination']['add_frame_new_diagnosis'] = 'open'
#
#                 frame_new_my_diagnosis.columnconfigure(index='all', minsize=40, weight=1)
#                 frame_new_my_diagnosis.rowconfigure(index='all', minsize=20)
#                 frame_new_my_diagnosis.pack(fill='both', expand=True, before=frame_my_saved_diagnosis, side="bottom")
#
#             elif data['examination'].get('add_frame_new_diagnosis') == "open":
#                 data['examination']['add_frame_new_diagnosis'] = 'closed'
#
#                 frame_new_my_diagnosis.pack_forget()
#
#         col, row = 0, 0
#         if not user.get('my_saved_diagnosis'):
#             lbl_my_saved_diagnosis['text'] = "История о сохраненных осмотрах пуста"
#             lbl_my_saved_diagnosis.grid(column=col, row=row, sticky='ew', columnspan=2)
#             col += 2
#         else:
#             data['examination']['my_saved_diagnosis'] = dict()
#             lbl_my_saved_diagnosis['text'] = "Мои осмотры:"
#             lbl_my_saved_diagnosis.grid(column=col, row=row, sticky='ew')
#             col += 1
#             for diagnosis, examination_key in user.get('my_saved_diagnosis'):
#                 data['examination']['my_saved_diagnosis'][f"{diagnosis}"] = examination_key
#                 btn = Radiobutton(master=frame_my_saved_diagnosis, text=diagnosis,
#                                   font=('Comic Sans MS', user.get('text_size')),
#                                   value=f"my__{diagnosis}", variable=selected_diagnosis,
#                                   command=select_my_saved_diagnosis,
#                                   indicatoron=False, selectcolor='#77f1ff')
#                 btn.grid(column=col, row=row, sticky='ew')
#                 col += 1
#                 if col == 5:
#                     row += 1
#                     col = 0
#         Button(frame_my_saved_diagnosis, text='Сохранить осмотр в избранное',
#                command=add_frame_new_diagnosis,
#                font=('Comic Sans MS', user.get('text_size'))).grid(column=col, row=row)
#         col += 1
#         Button(frame_my_saved_diagnosis, text='Удалить шаблоны',
#                command=delete_my_diagnosis,
#                font=('Comic Sans MS', user.get('text_size'))).grid(column=col, row=row)
#
#         new_diagnosis_lbl = Label(master=frame_new_my_diagnosis, text="Название осмотра",
#                                   font=('Comic Sans MS', user.get('text_size')), bg='white')
#         new_diagnosis_lbl.pack(fill='both', expand=True, side='left')
#
#         new_diagnosis_name = Entry(frame_new_my_diagnosis, width=15, font=('Comic Sans MS', user.get('text_size')))
#         new_diagnosis_name.pack(fill='both', expand=True, side='left')
#
#         button_saved_new_diagnosis = Button(frame_new_my_diagnosis, text='Сохранить',
#                                             command=saved_new_diagnosis,
#                                             font=('Comic Sans MS', user.get('text_size')))
#         button_saved_new_diagnosis.pack(fill='both', expand=True, side='left')
#
#         button_my_saved_diagnosis.pack(fill='both', expand=True)
#
#         frame_my_saved_diagnosis_but.columnconfigure(index='all', minsize=40, weight=1)
#         frame_my_saved_diagnosis_but.rowconfigure(index='all', minsize=20)
#         frame_my_saved_diagnosis_but.pack(fill='both', expand=True, side=tk.LEFT)
#
#     def my_saved_diagnosis_change_status():
#         if not data['examination'].get('my_saved_diagnosis_status'):
#             data['examination']['my_saved_diagnosis_status'] = 'closed'
#             button_my_saved_diagnosis['text'] = 'Закрыть мои осмотры'
#
#         if data['examination'].get('my_saved_diagnosis_status') == "closed":
#             data['examination']['my_saved_diagnosis_status'] = 'open'
#             button_my_saved_diagnosis['text'] = 'Закрыть мои осмотры'
#
#             frame_my_saved_diagnosis.columnconfigure(index='all', minsize=40, weight=1)
#             frame_my_saved_diagnosis.rowconfigure(index='all', minsize=20)
#             frame_my_saved_diagnosis.pack(fill='both', expand=True, before=frame_diagnosis, side="bottom")
#
#         elif data['examination'].get('my_saved_diagnosis_status') == "open":
#             data['examination']['my_saved_diagnosis_status'] = 'closed'
#             button_my_saved_diagnosis['text'] = 'Открыть мои осмотры'
#
#             frame_my_saved_diagnosis.pack_forget()
#
#     def paste_frame_1():
#         paste_frame_diagnosis()
#         paste_frame_date_time()
#         # paste_frame_button_create()
#         my_saved_diagnosis()
#
#         if user.get('my_saved_diagnosis'):
#             my_saved_diagnosis_change_status()
#
#         frame_1.columnconfigure(index='all', minsize=40, weight=1)
#         frame_1.rowconfigure(index='all', minsize=20)
#         frame_1.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#     frame_1 = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#     frame_diagnosis = Frame(frame_1, borderwidth=1, relief="solid")
#     frame_date_time = Frame(frame_1, borderwidth=1, relief="solid")
#     txt_date_time = Entry(frame_date_time, width=15,
#                           font=('Comic Sans MS', user.get('text_size')),
#                           justify="center")
#     frame_button = Frame(frame_1, borderwidth=1, relief="solid")
#
#     button_change_all_kb_status = Button(frame_button, text='Скрыть\nвсе\nклавиатуры',
#                                          command=change_all_kb_status,
#                                          font=('Comic Sans MS', user.get('text_size')))
#
#     frame_my_saved_diagnosis_but = Frame(frame_diagnosis, borderwidth=1)
#     frame_my_saved_diagnosis = Frame(frame_1, borderwidth=1, relief="solid", padx=3, pady=3)
#     frame_new_my_diagnosis = Frame(frame_1, borderwidth=1, relief="solid", padx=3, pady=3)
#
#     lbl_my_saved_diagnosis = Label(master=frame_my_saved_diagnosis, text="",
#                                    font=('Comic Sans MS', user.get('text_size')), bg='white')
#
#     button_my_saved_diagnosis = Button(frame_my_saved_diagnosis_but, text='Открыть мои осмотры',
#                                        command=my_saved_diagnosis_change_status,
#                                        font=('Comic Sans MS', user.get('text_size')))
#
#     paste_frame_1()
#
#     def paste_frame_place_company():
#         def select_place():
#             data['examination']['place'] = selected_place.get()
#             label_place['text'] = f"{all_data_diagnosis.get('place')[0]}: {selected_place.get()}"
#             if selected_place.get() == 'в поликлинике':
#                 frame_company.pack(fill='both', expand=True, side="left")
#             else:
#                 frame_company.pack_forget()
#
#         label_place = Label(master=frame_place, text=f"{all_data_diagnosis.get('place')[0]}",
#                             font=('Comic Sans MS', user.get('text_size')), bg='white')
#         label_place.pack(fill='both', expand=True, side="left")
#
#         for mark in all_data_diagnosis.get('place')[1:]:
#             btn = Radiobutton(master=frame_place, text=mark,
#                               font=('Comic Sans MS', user.get('text_size')),
#                               value=mark, variable=selected_place, command=select_place,
#                               indicatoron=False, selectcolor='#77f1ff')
#             btn.pack(fill='both', expand=True, side="left")
#         selected_place.set('в поликлинике')
#
#         Label(master=frame_company, text=" На осмотре ",
#               font=('Comic Sans MS', user.get('text_size')),
#               bg='white').pack(fill='both', expand=True, side="left")
#
#         combo_company['values'] = ['c мамой', 'c папой', 'c братом', 'c сестрой', 'c бабушкой', 'c дедушкой',
#                                    'без сопровождения']
#
#         combo_company.current(0)
#         combo_company.pack(fill='both', expand=True, side="left")
#
#         frame_company.columnconfigure(index='all', minsize=40, weight=1)
#         frame_company.rowconfigure(index='all', minsize=20)
#         frame_company.pack(fill='both', expand=True, side="left")
#
#         frame_place.columnconfigure(index='all', minsize=40, weight=1)
#         frame_place.rowconfigure(index='all', minsize=20)
#         frame_place.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#
#     def is_valid__anthro(num, marker):
#
#         text = ''
#
#         mark, name, variable = marker.split('__')
#
#         if num:
#
#             if variable in ("txt_weight_variable", "txt_weight_bir_variable", "txt_weight_must_variable",
#                             "txt_weight_delta_variable", "txt_height_variable",
#                             "txt_head_variable", "txt_chest_variable"):
#                 try:
#                     num = float(num.replace(',', '.'))
#                 except ValueError:
#                     return False
#
#
#
#
#         if not child_marker and variable in ("txt_weight_variable", "txt_height_variable"):
#             if num:
#
#                 txt_imt_variable = None
#                 if variable == "txt_weight_variable" and data['examination']['anthro']["txt_height_variable"].get():
#                     height = float(data['examination']['anthro']["txt_height_variable"].get().replace(',', '.'))
#                     txt_imt_variable = round(num / float(height/100)**2, 1)
#
#
#                 elif variable == "txt_height_variable" and data['examination']['anthro']["txt_weight_variable"].get():
#                     weight = float(data['examination']['anthro']["txt_weight_variable"].get().replace(',', '.'))
#                     txt_imt_variable = round(weight / (num/100) ** 2, 1)
#
#                 if txt_imt_variable:
#                     data['examination']['anthro']["txt_imt_variable"].set(txt_imt_variable)
#             else:
#                 data['examination']['anthro']["txt_imt_variable"].set('')
#
#
#         if variable == "txt_weight_variable":
#             if not num:
#                 edit_drugs_weight(weight='None')
#
#             else:
#                 if child_marker:
#                     edit_drugs_weight(weight=num / 1000)
#                     if data['examination'].get('last_txt_weight_variable'):
#                         try:
#                             last_txt_weight = float(data['examination'].get('last_txt_weight_variable'))
#                         except ValueError:
#                             pass
#                         else:
#                             data['examination']['anthro']['txt_weight_delta_variable'].set(
#                                 round(num - last_txt_weight))
#                 else:
#                     edit_drugs_weight(weight=num)
#
#         if variable == "txt_weight_bir_variable":
#             if num:
#                 if patient_age.get('year') in (0, 1):
#                     loc_data = {
#                         0: 0,
#                         1: 600,
#                         2: 1400,
#                         3: 2200,
#                         4: 2950,
#                         5: 3650,
#                         6: 4300,
#                         7: 4900,
#                         8: 5450,
#                         9: 5950,
#                         10: 6400,
#                         11: 6800,
#                         12: 7150}
#                     if patient_age.get('year') == 0:
#                         age_month = patient_age.get('month')
#                         age_day = patient_age.get('day')
#
#                         weight_must = round(float(num) + loc_data.get(age_month) +
#                                             ((loc_data.get(age_month + 1) - loc_data.get(age_month)) / 30 * age_day))
#                         data['examination']['anthro']['txt_weight_must_variable'].set(weight_must)
#                     else:
#                         data['examination']['anthro']['txt_weight_must_variable'].set(round(float(num) + 7150))
#             else:
#                 data['examination']['anthro']['txt_weight_must_variable'].set('')
#
#         for mark in local_data_anthro:
#             for name_, variable_ in local_data_anthro.get(mark):
#                 if variable_ == variable:
#                     select_name = str(num)
#                 else:
#                     select_name = data['examination']['anthro'][variable_].get()
#                 if select_name:
#                     if len(text.split('\n')[-1]) > 70:
#                         text += '\n'
#
#                     text += f"{name_}    ".replace('_', select_name)
#
#
#         if variable in ('txt_weight_variable', 'txt_height_variable'):
#
#             if not data['examination']['anthro'].get('anthro_height_weight'):
#                 marker_age_y = 'после года'
#                 marker_age = patient_age.get('year')
#                 if marker_age > 17:
#                     marker_age = 17
#                 if child_marker:
#                     marker_age_y = 'до года'
#                     marker_age = patient_age.get('month')
#                     if patient_age.get('year') > 0:
#                         marker_age = 12
#                 print(f"marker_age_y {marker_age_y}, marker_age {marker_age}")
#
#                 data['examination']['anthro']['anthro_height_weight'] = dict()
#                 marker_gender = 'женский'
#                 if patient.get('gender').lower().startswith('м'):
#                     marker_gender = 'мужской'
#
#                 data['examination']['anthro']['anthro_height_weight']['anthro_height'] = \
#                     anthropometry[marker_age_y][marker_gender]['height'].get(marker_age)
#                 data['examination']['anthro']['anthro_height_weight']['anthro_weight'] = \
#                     anthropometry[marker_age_y][marker_gender]['weight'].get(marker_age)
#
#             anthro_height = data['examination']['anthro']['anthro_height_weight'].get('anthro_height')
#             anthro_weight = data['examination']['anthro']['anthro_height_weight'].get('anthro_weight')
#
#
#             height, weight = None, None
#             if variable == 'txt_weight_variable':
#                 if num:
#                     weight = num
#             elif data['examination']['anthro'].get('txt_weight_variable').get():
#                 weight = float(data['examination']['anthro'].get('txt_weight_variable').get().replace(',', '.'))
#             if variable == 'txt_height_variable':
#                 if num:
#                     height = num
#             elif data['examination']['anthro'].get('txt_height_variable').get():
#                 height = float(data['examination']['anthro'].get('txt_height_variable').get().replace(',', '.'))
#
#             print(f"anthro_weight {anthro_weight}, \nanthro_height {anthro_height} \nweight {weight}, height {height}")
#
#             patient_physical_anthro = ""
#
#             if height and weight:
#                 if anthro_height and anthro_weight:
#
#                     index_height, index_weight = 7, 7
#
#                     for a_height in anthro_height:
#                         if height < a_height:
#                             index_height = anthro_height.index(a_height)
#                             break
#
#
#                     for a_weight in anthro_weight:
#                         if weight <= a_weight:
#                             index_weight = anthro_weight.index(a_weight)
#                             break
#
#                     print(f"index_height {index_height}, index_weight {index_weight}\n")
#                     if index_height == 0:
#                         anthro = 'Низкое '
#                     elif index_height <= 2:
#                         anthro = 'Ниже среднего '
#                     elif index_height <= 4:
#                         anthro = 'Среднее '
#                     elif index_height <= 6:
#                         anthro = 'Выше среднего '
#                     elif index_height == 7:
#                         anthro = 'Высокое '
#
#                     if abs(index_weight - index_height) <= 1:
#                         anthro += 'гармоничное'
#                     else:
#                         if abs(index_weight - index_height) < 3:
#                             anthro += 'дисгармоничное'
#                         else:
#                             anthro += 'резко дисгармоничное'
#
#                         if not  2 < index_height < 5 and not  2 < index_weight < 5:
#                             anthro += ' по росту и по весу'
#                         elif not  2 < index_height < 5:
#                             anthro += ' по росту'
#                         elif not  2 < index_weight < 5:
#                             anthro += ' по весу'
#
#                     patient_physical_anthro = f"Физическое развитие: {anthro}"
#                     text = f"{text.strip()}\nФизическое развитие: {anthro}"
#
#             if weight:
#                 if anthro_weight:
#                     index_weight = 7
#                     for a_weight in anthro_weight:
#                         if weight <= a_weight:
#                             index_weight = anthro_weight.index(a_weight)
#                             break
#
#                     if index_weight == 0:
#                         anthro = f'Вес резко ниже нормы ({anthro_weight[0]} - {anthro_weight[-1]})'
#                     elif index_weight <= 2:
#                         anthro = 'Вес ниже среднего '
#                     elif index_weight <= 4:
#                         anthro = 'Вес в норме '
#                     elif index_weight <= 6:
#                         anthro = 'Вес выше среднего '
#                     elif index_weight == 7:
#                         anthro = f'Вес резко выше нормы ({anthro_weight[0]} - {anthro_weight[-1]})'
#
#                     patient_physical_anthro = f"{anthro} -- {patient_physical_anthro}"
#
#             if height:
#                 if anthro_height:
#                     index_height = 7
#                     for a_height in anthro_height:
#                         if height < a_height:
#                             index_height = anthro_height.index(a_height)
#                             break
#
#                     if index_height == 0:
#                         anthro = f'Рост резко ниже нормы ({anthro_height[0]} - {anthro_height[-1]})'
#                     elif index_height <= 2:
#                         anthro = 'Рост ниже среднего '
#                     elif index_height <= 4:
#                         anthro = 'Рост в норме '
#                     elif index_height <= 6:
#                         anthro = 'Рост выше среднего '
#                     elif index_height == 7:
#                         anthro = f'Рост резко выше нормы ({anthro_height[0]} - {anthro_height[-1]})'
#
#                     patient_physical_anthro = f"{anthro} -- {patient_physical_anthro}"
#
#             if not patient_physical_anthro:
#                 patient_physical_anthro = "Физическое развитие: нет данных"
#             data['examination']['anthro']['patient_physical_anthro'].set(patient_physical_anthro)
#
#
#         data['examination']['anthro']['patient_anthro_data'].set(text.strip())
#
#         return True
#
#     frame_place = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#     frame_company = Frame(frame_place)
#
#     combo_company = Combobox(frame_company, font=('Comic Sans MS', user.get('text_size')),
#                              state="readonly", justify="center")
#
#     paste_frame_place_company()
#
#     frame_epicrisis_add = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#     txt_epicrisis_add = ScrolledText(frame_epicrisis_add, width=15, height=3,
#                                      font=('Comic Sans MS', user.get('text_size')),
#                                      wrap="word")
#     txt_epicrisis_add.insert(1.0, "Осмотрен на чесотку, педикулез, микроспорию\n"
#                                   "Согласие на простое медицинское вмешательство получено")
#     Label(master=frame_epicrisis_add,
#           text="Дополнительная информация",
#           font=('Comic Sans MS', user.get('text_size')), bg='white').pack(fill='both', expand=True, padx=2, pady=2)
#     txt_epicrisis_add.pack(fill='both', expand=True)
#     frame_epicrisis_add.pack(fill='both', expand=True, padx=2, pady=2)
#
#
#     def paste_frame_complaints():
#
#         label_complaints = Label(master=frame_complaints_main,
#                                  text=f"{all_data_diagnosis.get('complaints')[0]}",
#                                  font=('Comic Sans MS', user.get('text_size')), bg='white')
#         label_complaints.grid(row=0, column=0, sticky='ew')
#
#         txt_complaints.grid(column=0, row=1, sticky='ew', columnspan=2)
#         data['examination']['complaints_but'] = dict()
#
#         for mark in all_data_diagnosis.get('complaints')[1:]:
#             if isinstance(mark, tuple):
#                 data['examination']['complaints_but'][f"{mark[0]}_main"] = IntVar()
#
#                 for mark_2 in mark[1:]:
#                     data['examination']['complaints_but'][f"{mark[0]}_{mark_2}"] = IntVar()
#             else:
#                 data['examination']['complaints_but'][mark] = IntVar()
#
#         change_complaints_kb_button.grid(column=1, row=0, sticky='ew')
#
#         frame_complaints_main.columnconfigure(index='all', minsize=10, weight=1)
#         frame_complaints_main.rowconfigure(index='all', minsize=10)
#         # frame_complaints_main.pack(fill='both', expand=True, side=tk.LEFT)
#         frame_complaints_main.grid(row=0, column=0, sticky='ew')
#
#         paste_complaints_kb()
#         frame_complaints.columnconfigure(index='all', minsize=40, weight=1)
#         frame_complaints.rowconfigure(index='all', minsize=20)
#         frame_complaints.pack(fill='both', expand=True, padx=2, pady=2)
#
#     def select_complaints():
#         local_complaints = dict()
#         text = txt_complaints.get(1.0, 'end').strip()
#         if text and text[-1] == '.':
#             text = text[:-1] + ', '
#         for mark in all_data_diagnosis.get('complaints')[1:]:
#             if isinstance(mark, tuple):
#                 text = text.replace(mark[0], f"\n__!__{mark[0]}")
#                 local_complaints[mark[0]] = ""
#         for string in text.split('\n__!__'):
#             for i in local_complaints.keys():
#                 if i in string:
#                     local_complaints[i] = string
#                     if data['examination']['complaints_but'].get(f"{i}_main"):
#                         data['examination']['complaints_but'].get(f"{i}_main").set(1)
#
#                     break
#             else:
#                 if not local_complaints.get("add"):
#                     local_complaints["add"] = ""
#                 local_complaints["add"] += string
#
#         complaints_button = selected_button.get()
#         if text == 'нет, ':
#             text = ''
#
#         selected_button.set('')
#         if complaints_button:
#             if complaints_button == 'нет':
#                 for mark_ in data['examination'].get('complaints_but'):
#                     data['examination']['complaints_but'].get(mark_).set(0)
#                 text = 'нет, '
#
#             else:
#                 if data['examination']['complaints_but'].get(complaints_button):
#                     if data['examination']['complaints_but'].get(complaints_button).get() == 1:
#                         data['examination']['complaints_but'].get(complaints_button).set(0)
#
#                     else:
#                         data['examination']['complaints_but'].get(complaints_button).set(1)
#
#         if complaints_button != 'нет':
#             if '_' in complaints_button:
#                 mark_1, mark_2 = complaints_button.split('_')
#                 if data['examination']['complaints_but'].get(complaints_button).get() == 1:
#                     if not data['examination']['complaints_but'].get(f"{mark_1}_main").get() == 1:
#                         data['examination']['complaints_but'].get(f"{mark_1}_main").set(1)
#                     text += ' '
#                     if mark_2 == 'main':
#                         text += f"{mark_1}, "
#                     elif not local_complaints.get(mark_1):
#
#                         text += f"{mark_1} {mark_2}, "
#                     else:
#                         if local_complaints.get(mark_1) == f"{mark_1}, ":
#                             local_complaints[mark_1] = f"{mark_1} "
#                         if mark_1 == 'температура':
#                             if local_complaints.get(mark_1).strip()[-1] in (",", "."):
#                                 local_complaints[mark_1] = local_complaints.get(mark_1).strip()[:-1]
#                             if local_complaints.get(mark_1).strip()[-1].isdigit():
#
#                                 text = text.replace(local_complaints.get(mark_1),
#                                                     local_complaints.get(mark_1) + f" - {mark_2}, ")
#                             else:
#                                 text = text.replace(local_complaints.get(mark_1),
#                                                     f"{local_complaints.get(mark_1)} {mark_2}, ")
#                         else:
#
#                             text = text.replace(local_complaints.get(mark_1),
#                                                 local_complaints.get(mark_1, f"{mark_1} ") + f"{mark_2}, ")
#
#                 else:
#                     if mark_2 == 'main':
#                         text = text.replace(local_complaints.get(mark_1, '').split('\n')[0], "")
#                         for but in data['examination'].get('complaints_but'):
#                             if mark_1 in but:
#                                 data['examination']['complaints_but'].get(but).set(0)
#                     elif mark_1 == 'температура':
#                         for i in (f" - {mark_2}", f"{mark_2} - ", f"{mark_2}, ", f", {mark_2}", f"{mark_2}"):
#                             if i in text:
#                                 text = text.replace(i, '')
#                                 break
#
#                     else:
#                         for i in (f"{mark_2}, ", f"{mark_2},", f", {mark_2}", f"{mark_2}"):
#                             if i in text:
#                                 text = text.replace(i, '')
#                                 break
#             else:
#                 if data['examination']['complaints_but'].get(complaints_button).get() == 1:
#                     if local_complaints.get("add"):
#                         text = text.replace(local_complaints.get("add"),
#                                             local_complaints.get("add") + f"{complaints_button}, ")
#                     else:
#                         text = f"{complaints_button}, " + text
#
#                 else:
#                     if local_complaints.get("add"):
#                         for i in (f"{mark_2}, ", f"{mark_2},", f", {mark_2}", f"{mark_2}"):
#                             if i in local_complaints.get("add"):
#                                 text = text.replace(local_complaints.get("add"),
#                                                     local_complaints.get("add").replace(i, ''))
#                                 break
#                     else:
#                         for i in (f"{mark_2}, ", f"{mark_2},", f", {mark_2}", f"{mark_2}"):
#                             if i in text:
#                                 text = text.replace(i, '')
#                                 break
#
#         text = text.replace('\n__!__', ' ').strip().replace(', ,', ',').replace('  ', ' ')
#         txt_complaints.delete(1.0, 'end')
#         if text != 'нет' and text[-2:] == ', ':
#             text = text[:-2] + '. '
#         txt_complaints.insert(1.0, text)
#
#         edit_complaints_kb_color()
#
#         # if data['examination'].get('open_complaints_kb'):
#         #     for but in data['examination'].get('complaints_buttons'):
#         #         if data['examination']['complaints_but'].get(but).get() == 1:
#         #             data['examination']['complaints_buttons'][but]['bg'] = '#77f1ff'
#         #         else:
#         #             data['examination']['complaints_buttons'][but]['bg'] = '#cdcdcd'
#
#     def change_complaints_kb_status():
#
#         if data['examination'].get('open_complaints_kb') == 'open':
#             data['examination']['open_complaints_kb'] = 'closed'
#             change_complaints_kb_button['text'] = 'открыть клавиатуру жалоб'
#             txt_complaints['height'] = 4
#             txt_complaints['width'] = 100
#             frame_complaints_buttons.grid_forget()
#             frame_complaints_main.grid_configure(row=0, column=0, sticky='ew', columnspan=3)
#         else:
#             data['examination']['open_complaints_kb'] = 'open'
#             change_complaints_kb_button['text'] = 'скрыть клавиатуру жалоб'
#             txt_complaints['height'] = 8
#             txt_complaints['width'] = 15
#             frame_complaints_buttons.grid(row=0, column=1, sticky='ew', columnspan=2)
#             frame_complaints_main.grid_configure(row=0, column=0, sticky='ew', columnspan=1)
#
#     def paste_complaints_kb():
#         destroy_elements['complaints'] = list()
#         data['examination']['complaints_buttons'] = dict()
#         data['examination']['open_complaints_kb'] = 'open'
#
#         frame_loc = Frame(frame_complaints_buttons)
#
#         row, col = 0, 0
#         for mark in all_data_diagnosis.get('complaints')[1:]:
#             if not isinstance(mark, tuple):
#                 btn = Radiobutton(frame_loc, text=f"{mark}",
#                                   font=('Comic Sans MS', user.get('text_size')),
#                                   value=f"{mark}", variable=selected_button,
#                                   command=select_complaints,
#                                   indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#
#                 btn.grid(row=1, column=col, sticky='ew')
#                 data['examination']['complaints_buttons'][mark] = btn
#
#                 col += 1
#         frame_loc.columnconfigure(index='all', minsize=10, weight=1)
#         frame_loc.rowconfigure(index='all', minsize=10)
#         frame_loc.pack(fill='both', expand=True)
#
#         for mark in all_data_diagnosis.get('complaints')[1:]:
#             if isinstance(mark, tuple):
#                 row, col = 0, 0
#                 frame_loc = Frame(frame_complaints_buttons)
#                 destroy_elements['complaints'].append(frame_loc)
#
#                 btn = Radiobutton(frame_loc, text=f"{mark[0]}",
#                                   font=('Comic Sans MS', user.get('text_size')),
#                                   value=f"{mark[0]}_main", variable=selected_button,
#                                   command=select_complaints,
#                                   indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#                 btn.grid(row=row, column=col, sticky='ew')
#                 data['examination']['complaints_buttons'][f"{mark[0]}_main"] = btn
#
#                 col += 1
#                 for mark_2 in mark[1:]:
#                     btn = Radiobutton(frame_loc, text=f"{mark_2}",
#                                       font=('Comic Sans MS', user.get('text_size')),
#                                       value=f"{mark[0]}_{mark_2}", variable=selected_button,
#                                       command=select_complaints,
#                                       indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#
#                     # btn = Checkbutton(frame_loc, text=mark_2,
#                     #                   font=('Comic Sans MS', user.get('text_size')),
#                     #                   onvalue=1, offvalue=0,
#                     #                   variable=data['examination']['complaints_but'].get(f"{mark[0]}_{mark_2}"),
#                     #                   command=select_complaints,
#                     #                   indicatoron=False, selectcolor='#77f1ff')
#                     btn.grid(row=row, column=col, sticky='ew')
#                     data['examination']['complaints_buttons'][f"{mark[0]}_{mark_2}"] = btn
#
#                     col += 1
#                 frame_loc.columnconfigure(index='all', minsize=10, weight=1)
#                 frame_loc.rowconfigure(index='all', minsize=10)
#                 frame_loc.pack(fill='both', expand=True)
#         frame_complaints_buttons.columnconfigure(index='all', minsize=10, weight=1)
#         frame_complaints_buttons.rowconfigure(index='all', minsize=10)
#         # frame_complaints_1.pack(fill='both', expand=True).grid(row=0, column=0, sticky='ew')
#         frame_complaints_buttons.grid(row=0, column=1, sticky='ew', columnspan=2)
#
#     def edit_complaints_kb_color():
#         for but in data['examination'].get('complaints_buttons'):
#             if data['examination']['complaints_but'].get(but).get() == 1:
#                 data['examination']['complaints_buttons'][but]['bg'] = '#77f1ff'
#             else:
#                 data['examination']['complaints_buttons'][but]['bg'] = '#cdcdcd'
#
#         # for button_name in data['examination'].get('examination_buttons_2_color'):
#         #     if data['examination']['examination_but'].get(button_name):
#         #         if data['examination']['examination_but'].get(button_name).get() == 1:
#         #             data['examination']['examination_buttons_2_color'][button_name]['bg'] = '#77f1ff'
#         #         else:
#         #             data['examination']['examination_buttons_2_color'][button_name]['bg'] = '#cdcdcd'
#
#
#     frame_complaints = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#     frame_complaints_main = Frame(frame_complaints, padx=1, pady=1)
#     frame_complaints_buttons = Frame(frame_complaints, padx=1, pady=1)
#     txt_complaints = ScrolledText(frame_complaints_main, width=15, height=8,
#                                   font=('Comic Sans MS', user.get('text_size')),
#                                   wrap="word")
#     change_complaints_kb_button = Button(frame_complaints_main, text='скрыть клавиатуру жалоб',
#                                          command=change_complaints_kb_status,
#                                          font=('Comic Sans MS', user.get('text_size')))
#
#     paste_frame_complaints()
#
#     frame_anamnesis = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#     txt_anamnesis = ScrolledText(frame_anamnesis, width=15, height=3,
#                                  font=('Comic Sans MS', user.get('text_size')),
#                                  wrap="word")
#
#     if not child_marker:
#         Label(master=frame_anamnesis,
#               text="Анамнез заболевания",
#               font=('Comic Sans MS', user.get('text_size')), bg='white').pack(fill='both', expand=True, padx=2, pady=2)
#         txt_anamnesis.pack(fill='both', expand=True)
#         frame_anamnesis.pack(fill='both', expand=True, padx=2, pady=2)
#
#     def paste_patient_anthro_data():
#         def paste_npr_root():
#             def selected_age_month(event=None):
#                 for age_month in data['examination'].get('npr_frame'):
#                     frame = data['examination']['npr_frame'].get(age_month)
#                     frame.pack_forget()
#
#                 frame = data['examination']['npr_frame'].get(int(combo_age_month.get()))
#                 frame.pack(fill='both', expand=True)
#
#             local_data_npr = {
#                 1: {
#                     "Аз": "Плавное прослеживание движущегося предмета",
#                     "Ас": "Длительное слуховое сосредоточение (прислушивается к голосу взрослого, звуку игрушки и .т д.)",
#                     "Э": "Первая улыбка в ответ на речь взрослого",
#                     "ДР": "Ручки чаще слегка раскрыты",
#                     "ДО": "Лежа на животе, пытается поднимать и удерживать голову",
#                     "ПР": "Не оценивается",
#                     "PA": "Издает отдельные звуки в ответ на разговор с ним",
#                     "Н": "Не оценивается"
#                 },
#                 2: {
#                     "Аз": "Длительное сосредоточение, смотрит на лицо взрослого или неподвижный предмет. \n"
#                           "Длительно следит за движущейся игрушкой или взрослым",
#                     "Ас": "Ищущие повороты головы при длительном звуке. Поворачивает голову в сторону взрослого",
#                     "Э": "Быстро отвечает улыбкой на речь взрослого",
#                     "ДР": "Ручки чаще слегка раскрыты",
#                     "ДО": "Лежа на животе,поднимает и некоторое время удерживает голову",
#                     "ПР": "Не оценивается",
#                     "PA": "Произносит отдельные звуки",
#                     "Н": "Не оценивается"},
#                 3: {
#                     "Аз": "Зрительное сосредоточение в вертикальном положении на руках взрослого \n"
#                           "(на лице говорящего, на игрушке), длительно рассматривает свои ручки",
#                     "Ас": "Ищущие повороты головы при длительном звуке. Поворачивает голову в сторону взрослого",
#                     "Э": "Отвечает «комплексом оживления» в ответ на эмоциональное общение со взрослым (разговор). \n"
#                          "Ищет глазами ребенка, издающего звуки",
#                     "ДР": "Случайно наталкивается ручками на игрушки, низко висящие над грудью",
#                     "ДО": "Лежит на животе несколько минут, опираясь на предплечья и высоко подняв голову. \n"
#                           "Удерживает голову в вертикальном положении",
#                     "ПР": "Не оценивается",
#                     "PA": "Произносит отдельные звуки",
#                     "Н": "Не оценивается"},
#                 4: {
#                     "Аз": "Узнает мать или близкого человека (радуется)",
#                     "Ас": "Поворачивает голову в сторону невидимого источника звука инаходит его глазами. \n"
#                           "Адекватно реагирует на спокойную и плясовую мелодию",
#                     "Э": "Комплекс «оживления» во время бодрствования. Громко смеется в ответ на эмоциональное речевое общение. \n"
#                          "Ищет взглядом другого ребенка, рассматривает, радуется, тянется к нему",
#                     "ДР": "Рассматривает, ощупывает и захватывает низко висящие над грудью игрушки",
#                     "ДО": "При поддержке под мышки крепко упирается о твердую опору ногами, согнутыми в тазобедренном суставе",
#                     "ПР": "Не оценивается",
#                     "PA": "Гулит",
#                     "Н": "Во время кормления придерживает ручками грудь матери или бутылочку"
#                 },
#                 5: {
#                     "Аз": "Отличает близких людей от чужих по внешнему виду \n"
#                           "(по разному реагирует на лицо знакомого и незнакомого)",
#                     "Ас": "Узнает голос матери или близкого человека. \n"
#                           "Различает строгую и ласковую интонацию обращенной к нему речи, по-разному реагирует",
#                     "Э": "Радуется ребенку, берет унего из рук игрушку, гулит",
#                     "ДР": "Берет игрушку из рук взрослого иудерживает ее в ручке",
#                     "ДО": "Долго лежит на животе, подняв корпус и опираясь на ладони выпрямленных рук. \n"
#                           "Переворачивается со спины на живот. Ровно, устойчиво стоит при поддержке под мышки",
#                     "ПР": "Не оценивается",
#                     "PA": "Подолгу певуче гулит",
#                     "Н": "Ест с ложки полугустую и густую пищу"
#                 },
#                 6: {
#                     "Аз": "Не оценивается",
#                     "Ас": "По-разному реагирует на свое и чужое имя",
#                     "Э": "Не оценивается",
#                     "ДР": "Уверенно берет игрушки, находясь в любом положении, и подолгу занимается ими, \n"
#                           "перекладывает из одной ручки вдругую",
#                     "ДО": "Переворачивается с живота на спину. \n"
#                           "Передвигается, переставляя ручки или немного подползая",
#                     "ПР": "Не оценивается",
#                     "PA": "Произносит отдельные слоги (начало лепета)",
#                     "Н": "Хорошо ест с ложки, снимая пищу губами. \n"
#                          "Небольшое количество жидкой пищи пьет из блюдца или из чашки"},
#                 7: {
#                     "Аз": "Не оценивается",
#                     "Ас": "Не оценивается",
#                     "Э": "Не оценивается",
#                     "ДР": "Игрушкой стучит, размахивает, перекладывает, бросает ее и пр.",
#                     "ДО": "Хорошо ползает (много, быстро, в различном направлении)",
#                     "ПР": "На вопрос «где?» находит взглядом предмет на постоянном определенном месте \n"
#                           "(например, часы, куклу и пр.)",
#                     "PA": "Подолгу лепечет, произнося одни и те же слоги (2-3)",
#                     "Н": "Пьет из чашки, которую держит взрослый"},
#                 8: {
#                     "Аз": "Не оценивается",
#                     "Ас": "Не оценивается",
#                     "Э": "Смотрит на действия другого ребенка и смеется или лепечет",
#                     "ДР": "Игрушками занимается долго и разнообразно действует ими в зависимости от их свойств. \n"
#                           "Подражает действиям взрослого с игрушками (толкает мяч, стучит и тд.)",
#                     "ДО": "Сам садится, сидит, ложится. Держась за барьер, сам встает, стоит и опускается. \n"
#                           "Переступает, держась за барьер",
#                     "ПР": "На вопрос «где?» находит несколько предметов (2-3) на постоянных местах. \n"
#                           "По вербальной просьбе взрослого выполняет разученные ранее действия (без показа), \n"
#                           "например «ладушки», «дай ручку» и пр.",
#                     "PA": "Громко, четко, выразительно произносит различные слоги и повторяет их",
#                     "Н": "Ест корочку хлеба, которую сам держит в ручке. Пьет из чашки, которую держит взрослый"},
#                 9: {
#                     "Аз": "Не оценивается",
#                     "Ас": "Выполняет плясовые движения под музыку",
#                     "Э": "Подражает действиям другого ребенка. Догоняет ребенка или ползет ему навстречу",
#                     "ДР": "Выполняет различные действия с предметами в зависимости от их свойств "
#                           "(катает, открывает, гремит и т. д.)",
#                     "ДО": "Не оценивается",
#                     "ПР": "На вопрос «где?» находит несколько знакомых предметов независимо от их местоположения. "
#                           "Знает свое имя",
#                     "PA": "Подражает взрослому, повторяя за ним слоги, которые уже есть в лепете",
#                     "Н": "Пьет из чашки, слегка придерживая е руками, спокойно относится к высаживанию на горшок"},
#                 10: {
#                     "Аз": "Не оценивается",
#                     "Ас": "Выполняет плясовые движения под музыку",
#                     "Э": "Действует рядом с ребенком или одной игрушкой с ним",
#                     "ДР": "По просьбе выполняет разученные действия с игрушками, \n"
#                           "действия с предметами принимают устойчивый характер",
#                     "ДО": "Всходит на невысокую наклонную поверхность или горку, держась за перила, и сходит с нее. \n"
#                           "Идет вперед с поддержкой за оберуки",
#                     "ПР": "По просьбе «дай» находит и дает знакомые предметы. \n"
#                           "При игре с ним выполняет разученные движения (догоню-догоню, игра в прятки и т.д.)",
#                     "PA": "Подражая взрослому, повторяет за ним новые слоги, которых нет в его лепете",
#                     "Н": "Закрепляет навыки иумения, приобретенные в 9 месяцев \n"
#                          "(Пьет из чашки, слегка придерживая е руками, спокойно относится к высаживанию на горшок)"},
#                 11: {
#                     "Аз": "Не оценивается",
#                     "Ас": "Выполняет плясовые движения под музыку",
#                     "Э": "Радуется приходу детей, относится к ним избирательно",
#                     "ДР": "Овладевает новыми движениями и начинает выполнять их по команде взрослого \n"
#                           "(снимает и надевает кольца на стержень, ставит кубик на кубик)",
#                     "ДО": "Стоит самостоятельно, делает первые самостоятельные шаги",
#                     "ПР": "Понимает речь и общается (по просьбе взрослого находит любую куклу, \n"
#                           "которую видит среди игрушек, любой мяч, все машины и пр.)",
#                     "PA": "Произносит первые слова-обозначения (например: «дай», «мама», «на» и др.)",
#                     "Н": "Закрепляет навыки и умения, приобретенные в 9 месяцев \n"
#                          "(Пьет из чашки, слегка придерживая ее руками, спокойно относится к высаживанию на горшок)"},
#                 12: {
#                     "Аз": "Различает предметы по форме (отличает кирпичик от кубика по просьбе взрослого). \n"
#                           "Узнает на фотографии знакомого взрослого",
#                     "Ас": "Выполняет плясовые движения под музыку",
#                     "Э": "Ищет игрушку, спрятанную другим ребенком. \n"
#                          "Протягивает другому ребенку игрушку, сопровождая свои действия смехом и лепетом",
#                     "ДР": "Выполняет самостоятельно разученные действия с игрушками (катает, кормит, возит и пр.). \n"
#                           "Переносит действия, разученные с одним предметом, на другой (всех кормит, всех баюкает и пр.)",
#                     "ДО": "Ходит самостоятельно, без опоры",
#                     "ПР": "Знает имена взрослых, названия нескольких предметов, выполняет отдельные поручения (принеси, найди и пр.). \n"
#                           "Понимает слово «нельзя». Некоторые слова в речи взрослых принимают обобщенный характер. \n"
#                           "По просьбе взрослого выполняет ранее разученные действия с игрушками",
#                     "PA": "Легко подражает новым слогам. Произносит 5-10 облегченных слов",
#                     "Н": "Самостоятельно пьет из чашки"}
#             }
#             npr_name = {
#                 "Аз": "анализатор зрительный",
#                 "Ас": "анализатор слуховой",
#                 "Э": "эмоции",
#                 "ДР": "движения руки",
#                 "ДО": "движения общие",
#                 "ПР": "понимаемая речь",
#                 "PA": "речь активная",
#                 "Н": "навыки"
#             }
#
#             local_data_npr_anthro = {
#                 "Аз": ("Аз: _ ", "txt_anal_1_variable"),
#                 "Ас": ("Ас: _ ", "txt_anal_2_variable"),
#                 "Э": ("Э: _ ", "txt_anal_3_variable"),
#                 "ДР": ("ДР: _ ", "txt_anal_4_variable"),
#                 "ДО": ("ДО: _ ", "txt_anal_5_variable"),
#                 "ПР": ("ПР: _ ", "txt_anal_6_variable"),
#                 "PA": ("PA: _ ", "txt_anal_7_variable"),
#                 "Н": ("Н: _ ", "txt_anal_8_variable")
#             }
#             patient_age_month = patient_age.get('month')
#             if patient_age.get('year') > 0:
#                 patient_age_month = 12
#             elif patient_age.get('month') == 0:
#                 patient_age_month = 1
#
#             frame_npr = Frame(examination_root, borderwidth=0.5, relief="solid", padx=1, pady=1, bg="#36566d")
#
#             data['examination']['npr_frame'] = dict()
#             for age_month in local_data_npr:
#                 frame = Frame(frame_npr)
#                 row = 0
#                 for npr_marker in local_data_npr.get(age_month):
#                     name, variable = local_data_npr_anthro.get(npr_marker)
#
#                     check = (root_examination.register(is_valid__anthro), "%P",
#                              f"anal__{name}__{variable}")
#
#                     Label(master=frame, text=name.replace(' _', ''),
#                           font=('Comic Sans MS', user.get('text_size')),
#                           bg='white'
#                           ).grid(column=0, row=row, sticky='nwse', pady=2)
#
#                     Entry(frame, width=10,
#                           font=('Comic Sans MS', user.get('text_size')),
#                           justify="center",
#                           validate="all",
#                           textvariable=data['examination']['anthro'][variable],
#                           validatecommand=check
#                           ).grid(column=1, row=row, sticky='nwse')
#
#                     data['examination']['anthro'][variable].set(f"{patient_age_month} мес.")
#
#
#                     Label(master=frame, text=f"{npr_name.get(npr_marker)}",
#                           font=('Comic Sans MS', user.get('text_size')), bg='white'
#                           ).grid(row=row, column=2, sticky='nwse', pady=2)
#
#                     Label(master=frame, text=f"{local_data_npr[age_month].get(npr_marker)}",
#                           font=('Comic Sans MS', user.get('text_size')),
#                           bg='white').grid(row=row, column=3, sticky='nwse', columnspan=2, pady=2)
#                     row += 1
#
#                 frame.columnconfigure(index='all', minsize=40, weight=1)
#                 frame.rowconfigure(index='all', minsize=20)
#                 data['examination']['npr_frame'][age_month] = frame
#
#             frame = Frame(frame_npr)
#             Label(master=frame, text="Показатели НПР для возраста (месяцев): ",
#                   font=('Comic Sans MS', user.get('text_size')), bg='white').grid(row=0, column=0, sticky='ew')
#
#             combo_age_month = Combobox(frame, font=('Comic Sans MS', user.get('text_size')),  state="readonly", width=10)
#             combo_age_month['values'] = [i for i in range(1, 13)]
#             combo_age_month.set(patient_age_month)
#             combo_age_month.grid(row=0, column=1, sticky='ew')
#             combo_age_month.bind("<<ComboboxSelected>>", selected_age_month)
#
#             frame.columnconfigure(index='all', minsize=40, weight=1)
#             frame.rowconfigure(index='all', minsize=20)
#             frame.pack(fill='both', expand=True)
#             data['examination']['npr_frame'][patient_age_month].pack(fill='both', expand=True)
#
#             frame_npr.pack(fill='both', expand=True, padx=2, pady=2)
#
#         frame_patient_anthro_main = Frame(examination_root, borderwidth=0.5, relief="solid", padx=1, pady=1)
#         Label(master=frame_patient_anthro_main,
#               text="Данные обследования",
#               font=('Comic Sans MS', user.get('text_size')), bg='white').pack(fill='both', expand=True, padx=2, pady=2)
#
#
#         frame_patient_anthro = Frame(frame_patient_anthro_main, borderwidth=0.5, relief="solid", padx=1, pady=1, bg="#36566d")
#
#         if not render_data.get('hr'):
#             paste_hr_br()
#         data['examination']['anthro'] = dict()
#         data['examination']['anthro']['patient_anthro_data'] = StringVar()
#         data['examination']['anthro']['patient_physical_anthro'] = StringVar()
#
#         for mark in local_data_anthro:
#             for name, variable in local_data_anthro.get(mark):
#                 data['examination']['anthro'][variable] = StringVar()
#
#         counter_col = 0
#         for mark in local_data_anthro:
#             if mark == 'anal':
#                 continue
#
#             frame = Frame(frame_patient_anthro, padx=3, pady=3)
#             row = 0
#             for name, variable in local_data_anthro.get(mark):
#                 check = (root_examination.register(is_valid__anthro), "%P",
#                          f"{mark}__{name}__{variable}")
#
#                 Label(master=frame, text=name.replace(' _', ''),
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg='white'
#                       ).grid(column=0, row=row, sticky='ew')
#
#                 Entry(frame, width=10,
#                       font=('Comic Sans MS', user.get('text_size')),
#                       justify="center",
#                       validate="all",
#                       textvariable=data['examination']['anthro'][variable],
#                       validatecommand=check
#                       ).grid(column=1, row=row, sticky='ew')
#                 if variable == 'txt_hr_variable':
#                     data['examination']['anthro'][variable].set(render_data.get('hr'))
#                 elif variable == 'txt_br_variable':
#                     data['examination']['anthro'][variable].set(render_data.get('br'))
#                 elif variable == 'txt_temp_variable':
#                     data['examination']['anthro'][variable].set(random.choice(['36,6', '36,7', '36,5']))
#
#
#                 row += 1
#
#             frame.columnconfigure(index='all', minsize=40, weight=1)
#             frame.rowconfigure(index='all', minsize=20)
#             frame.grid(column=counter_col, row=0, sticky='nwse')
#             if child_marker and mark == 'weight':
#                 frame.grid_configure(rowspan=2)
#             counter_col += 1
#             # frame.pack(fill='both', expand=True, side="left")
#
#
#         lbl = Label(master=frame_patient_anthro,
#                     textvariable=data['examination']['anthro'].get('patient_physical_anthro'),
#                     font=('Comic Sans MS', user.get('text_size')),
#                     bg='white')
#         if child_marker:
#             lbl.grid(column=1, row=1, sticky='nwse', columnspan=3)
#         else:
#             lbl.grid(column=0, row=1, sticky='nwse', columnspan=4)
#
#
#         frame_patient_anthro.columnconfigure(index='all', minsize=40, weight=1)
#         frame_patient_anthro.rowconfigure(index='all', minsize=20)
#         frame_patient_anthro.pack(fill='both', expand=True)
#         frame_patient_anthro_main.pack(fill='both', expand=True, padx=2, pady=2)
#
#         if child_marker:
#             paste_npr_root()
#
#
#     local_data_anthro = {
#         "weight":
#             (("Вес: _ кг.", "txt_weight_variable"),
#              ("Рост: _ см.", "txt_height_variable")),
#         "hr_br":
#             (("ЧД: _ /мин.", "txt_br_variable"),
#              ("ЧСС: _ /мин.", "txt_hr_variable")),
#         "temp":
#             (("Температура: _ ℃.", "txt_temp_variable"),
#              ("sp O₂: _ %.", "txt_sp02_variable")),
#         "bp":
#             (("АД: _ мм.рт.ст.", "txt_bp_variable"),
#              ("ИМТ: _ кг/м²", "txt_imt_variable"))
#
#     }
#
#     if child_marker:
#         local_data_anthro = {
#         "weight":
#             (("Фактическиий вес: _ гр.", "txt_weight_variable"),
#              ("Вес при рождении: _ гр.", "txt_weight_bir_variable"),
#              ("Должный вес: _ гр.", "txt_weight_must_variable"),
#              ("Прибавка: _ гр.", "txt_weight_delta_variable")),
#         "height":
#             (("Длинна тела: _ см.", "txt_height_variable"),
#              ("Окр. головы: _ см.", "txt_head_variable"),
#              ("Окр. груди: _  см.", "txt_chest_variable")),
#         "other":
#             (("Родничок: _ ", "txt_hole_head_variable"),
#              ("Зубы: _ ", "txt_teeth_variable"),
#              ("БЦЖ _ ", "txt_tubic_variable")),
#         "hr_br":
#             (("ЧД: _ /мин.", "txt_br_variable"),
#              ("ЧСС: _ /мин.", "txt_hr_variable"),
#              ("Температура: _ ℃.", "txt_temp_variable")),
#         "anal":
#             (("Аз: _ ", "txt_anal_1_variable"),
#              ("Ас: _ ", "txt_anal_2_variable"),
#              ("Э: _ ", "txt_anal_3_variable"),
#              ("ДР: _ ", "txt_anal_4_variable"),
#              ("ДО: _ ", "txt_anal_5_variable"),
#              ("ПР: _ ", "txt_anal_6_variable"),
#              ("PA: _ ", "txt_anal_7_variable"),
#              ("Н: _ ", "txt_anal_8_variable")),
#
#         }
#
#
#     def edit_drugs_weight(weight):
#
#         for drug_category in ['Антибиотики', 'ОРИ']:
#             if data['examination'].get('selected_drugs', dict()).get(drug_category):
#                 for drug_name in data['examination']['selected_drugs'].get(drug_category):
#                     drug_form = data['examination']['selected_drugs'][drug_category][drug_name].get('Форма')
#                     if drug_form:
#                         select_drugs_item(weight=weight,
#                                           drug_name=f"{drug_category}__{drug_name}__Форма__{drug_form}")
#
#     paste_patient_anthro_data()
#
#
#     def paste_frame_examination():
#
#         label_examination = Label(master=frame_examination_main,
#                                   text=f"Осмотр:",
#                                   font=('Comic Sans MS', user.get('text_size')), bg='white')
#         label_examination.grid(row=0, column=0, sticky='ew')
#
#
#         label_examination = Label(master=frame_examination_main,
#                                   textvariable=data['examination']['anthro']['patient_anthro_data'],
#                                   font=('Comic Sans MS', user.get('text_size')), bg='white')
#         label_examination.grid(column=0, row=1, sticky='ew', columnspan=2)
#
#
#         txt_examination.grid(column=0, row=2, sticky='ew', columnspan=2)
#
#
#         change_examination_kb_button.grid(column=1, row=0, sticky='ew')
#
#         frame_examination_main.columnconfigure(index='all', minsize=40, weight=1)
#         frame_examination_main.rowconfigure(index='all', minsize=20)
#         frame_examination_main.pack(fill='both', expand=True, side=tk.LEFT)
#
#         paste_examination_kb()
#         frame_examination.columnconfigure(index='all', minsize=40, weight=1)
#         frame_examination.rowconfigure(index='all', minsize=20)
#         frame_examination.pack(fill='both', expand=True, padx=2, pady=2)
#
#     def select_examination_frame():
#
#         if data['examination']['examination_frame'].get('open_frame'):
#             data['examination']['examination_frame'].get('open_frame').pack_forget()
#
#         frame_loc = data['examination']['examination_frame'].get(selected_examination_frame.get())
#         data['examination']['examination_frame']['open_frame'] = frame_loc
#         frame_loc.pack(fill='both', expand=True)
#
#     def change_examination_kb_status():
#         if data['examination'].get('open_examination_kb') == 'open':
#             data['examination']['open_examination_kb'] = 'closed'
#             frame_examination_buttons.pack_forget()
#             change_examination_kb_button['text'] = 'открыть клавиатуру осмотра'
#             txt_examination['height'] = 8
#             txt_examination['width'] = 100
#
#         else:
#             data['examination']['open_examination_kb'] = 'open'
#             frame_examination_buttons.pack(fill='both', expand=True, padx=2, pady=2)
#             change_examination_kb_button['text'] = 'скрыть клавиатуру осмотра'
#             txt_examination['height'] = 30
#             txt_examination['width'] = 20
#             edit_examination_kb_text()
#
#     def select_examination():
#
#         local_examination = dict()
#
#
#         text = txt_examination.get(1.0, 'end').strip()
#         if text and text[-1] == '.':
#             text = text[:-1] + ', '
#
#         loc_examination = all_data_diagnosis.get('examination')
#         if child_marker:
#             loc_examination = all_data_diagnosis.get('examination_child')
#
#         for mark in loc_examination:
#             if isinstance(mark, tuple):
#                 text = text.replace(mark[0], f"\n__!__{mark[0]}")
#                 local_examination[mark[0]] = ""
#         for string in text.split('\n__!__'):
#             for i in local_examination.keys():
#                 if i in string:
#                     local_examination[i] = string
#                     break
#
#         examination_button = selected_button.get()
#         selected_button.set('')
#         if examination_button:
#             if data['examination']['examination_but'].get(examination_button):
#                 if data['examination']['examination_but'].get(examination_button).get() == 1:
#                     data['examination']['examination_but'].get(examination_button).set(0)
#                 else:
#                     data['examination']['examination_but'].get(examination_button).set(1)
#
#         if len(examination_button.split('_')) == 3:
#             mark_1, side, mark_2 = examination_button.split('_')
#         else:
#             mark_1, mark_2 = examination_button.split('_')
#
#         if (data['examination']['examination_but'].get(examination_button).get() == 1
#                 and not local_examination.get(mark_1)):
#             text += '\n'
#             if mark_1 in ('Глаза', 'Отоскопия'):
#                 text += f"{mark_1}: {side} - {mark_2}, "
#             else:
#                 if mark_2[-1] != '-':
#                     text += f"{mark_1}: {mark_2}, "
#                 else:
#                     text += f"{mark_1}: {mark_2} "
#         else:
#             if mark_1 in ('Глаза', 'Отоскопия'):
#                 loc_data = {
#                     'Глаза': ("OD", "OS", "OU"),
#                     'Отоскопия': ("AD", "AS", "AU")}
#                 for i in loc_data.get(mark_1):
#                     if i in local_examination.get(mark_1):
#                         local_examination[mark_1] = local_examination.get(mark_1).replace(i, f"__!!__{i}")
#                 loc_data_side = dict()
#                 for side_str in local_examination.get(mark_1).split('__!!__'):
#                     for i in loc_data.get(mark_1):
#                         if i in side_str:
#                             loc_data_side[i] = side_str
#                 edited_text = ''
#                 for examination_but in data['examination'].get('examination_but'):
#                     if (examination_but.startswith(f"{mark_1}_{side}")
#                             and data['examination']['examination_but'].get(examination_but).get() == 1):
#                         edited_text += f"{examination_but.split('_')[-1]}, "
#                 if edited_text:
#                     edited_text = f"{side} - " + edited_text
#
#                     if loc_data_side.get(side):
#                         text = text.replace(loc_data_side.get(side), edited_text)
#                     else:
#                         local_examination[mark_1] = local_examination.get(mark_1).replace("__!!__", '')
#                         text = text.replace(local_examination.get(mark_1), f"{local_examination.get(mark_1)}, "
#                                                                            f"{edited_text}")
#
#             else:
#                 edited_text = ''
#                 for examination_but in data['examination'].get('examination_but'):
#                     if (examination_but.startswith(f"{mark_1}")
#                             and data['examination']['examination_but'].get(examination_but).get() == 1):
#                         if examination_but[-1] != '-':
#                             edited_text += f"{examination_but.split('_')[-1]}, "
#                         else:
#                             edited_text += f"{examination_but.split('_')[-1]} "
#
#                 if edited_text:
#                     edited_text = f"{mark_1}: " + edited_text
#
#                 text = text.replace(local_examination.get(mark_1), edited_text)
#
#
#         if data['examination'].get('open_complaints_kb'):
#             for but in data['examination'].get('complaints_buttons'):
#                 if data['examination']['complaints_but'].get(but).get() == 1:
#                     data['examination']['complaints_buttons'][but]['bg'] = '#77f1ff'
#                 else:
#                     data['examination']['complaints_buttons'][but]['bg'] = '#cdcdcd'
#
#
#         text = text.replace('__!__', '').replace('  ', ' ').replace(' .', '.').replace(' ,', ',').replace(
#             ',,', ',').replace('\n\n', '\n').replace(',.', ',').strip()
#         if text[-1] == ',':
#             text = text[:-1] + '.'
#
#         txt_examination.delete(1.0, 'end')
#         txt_examination.insert(1.0, text)
#         edit_examination_kb_text()
#
#     def edit_examination_kb_text():
#         for button_name in data['examination'].get('examination_buttons'):
#             text = f"{button_name}: "
#             if button_name in ('Глаза', 'Отоскопия'):
#                 loc_data = dict()
#                 for examination_but in data['examination'].get('examination_but'):
#                     if (examination_but.startswith(button_name)
#                             and data['examination']['examination_but'].get(examination_but).get() == 1):
#                         mark_1, side, mark_2 = examination_but.split('_')
#                         if not loc_data.get(side):
#                             loc_data[side] = f"{side} - "
#
#                         if len(loc_data.get(side, '').split('\n')[-1]) > 70:
#                             loc_data[side] += "\n"
#                         loc_data[side] += f"{mark_2}, "
#
#                 for side in loc_data.keys():
#                     text += loc_data.get(side, '') + '\n'
#             else:
#                 for examination_but in data['examination'].get('examination_but'):
#                     if (examination_but.startswith(button_name)
#                             and data['examination']['examination_but'].get(examination_but).get() == 1):
#                         if len(text.split('\n')[-1]) > 80:
#                             text += "\n"
#
#                         text += f"{examination_but.split('_')[-1]}, "
#             text = text[:-2]
#             btn = data['examination']['examination_buttons'].get(button_name)
#             btn['text'] = text.strip()
#
#         for button_name in data['examination'].get('examination_buttons_2_color'):
#             if data['examination']['examination_but'].get(button_name):
#                 if data['examination']['examination_but'].get(button_name).get() == 1:
#                     data['examination']['examination_buttons_2_color'][button_name]['bg'] = '#77f1ff'
#                 else:
#                     data['examination']['examination_buttons_2_color'][button_name]['bg'] = '#cdcdcd'
#
#     def paste_examination_kb():
#         data['examination']['open_examination_kb'] = 'open'
#         data['examination']['examination_frame'] = dict()
#         data['examination']['examination_buttons'] = dict()
#         data['examination']['examination_buttons_2_color'] = dict()
#
#         data['examination']['examination_but'] = dict()
#         local_examination = all_data_diagnosis.get('examination')
#         if child_marker:
#             local_examination = all_data_diagnosis.get('examination_child')
#
#         for mark_ in local_examination:
#             if isinstance(mark_, tuple):
#
#                 if mark_[0] in ('Глаза', 'Отоскопия'):
#                     loc_data = {
#                         'Глаза': ("OD", "OS", "OU"),
#                         'Отоскопия': ("AD", "AS", "AU")}
#                     for mark_2_ in mark_[1:]:
#                         for mark_3_ in loc_data.get(mark_[0], []):
#                             data['examination']['examination_but'][f"{mark_[0]}_{mark_3_}_{mark_2_}"] = IntVar()
#                 else:
#
#                     for mark_2_ in mark_[1:]:
#                         data['examination']['examination_but'][f"{mark_[0]}_{mark_2_}"] = IntVar()
#
#
#         for mark in local_examination:
#             if isinstance(mark, tuple):
#                 frame_loc = Frame(frame_examination_buttons, borderwidth=1)
#
#                 btn = Radiobutton(frame_loc, text=f"{mark[0]}",
#                                   font=('Comic Sans MS', user.get('text_size')),
#                                   value=f"{mark[0]}", variable=selected_examination_frame,
#                                   command=select_examination_frame,
#                                   indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff',
#                                   justify='left', anchor='w', padx=10)
#                 btn.pack(fill='both', expand=True)
#                 data['examination']['examination_buttons'][mark[0]] = btn
#
#                 row, col = 0, 0
#
#                 frame_loc_but = Frame(frame_loc, borderwidth=1)
#
#                 data['examination']['examination_frame'][mark[0]] = frame_loc_but
#                 if mark[0] in ('Глаза', 'Отоскопия'):
#                     loc_data = {
#                         'Глаза': ("OD", "OS", "OU"),
#                         'Отоскопия': ("AD", "AS", "AU")}
#                     for mark_3 in loc_data.get(mark[0], []):
#
#                         frame_loc_but_side = Frame(frame_loc_but, borderwidth=1)
#                         row_counter, col = 1, 0
#                         loc_lbl = Label(master=frame_loc_but_side, text=f"{mark_3}",
#                               font=('Comic Sans MS', user.get('text_size')),
#                               bg='white')
#                         loc_lbl.grid(row=row, column=col, sticky='nwse', pady=2, padx=2)
#                         col += 1
#
#                         for mark_2 in mark[1:]:
#                             if col == 5:
#                                 row_counter += 1
#                                 col = 1
#                                 row += 1
#                                 loc_lbl.grid_configure(rowspan=row_counter)
#
#                             btn = Radiobutton(frame_loc_but_side, text=f"{mark_2}",
#                                               font=('Comic Sans MS', user.get('text_size')),
#                                               value=f"{mark[0]}_{mark_3}_{mark_2}",
#                                               variable=selected_button,
#                                               command=select_examination,
#                                               indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#                             btn.grid(row=row, column=col, sticky='ew')
#                             data['examination']['examination_buttons_2_color'][f"{mark[0]}_{mark_3}_{mark_2}"] = btn
#
#                             col += 1
#
#                         frame_loc_but_side.columnconfigure(index='all', minsize=40, weight=1)
#                         frame_loc_but_side.rowconfigure(index='all', minsize=20)
#                         frame_loc_but_side.pack(fill='both', expand=True, padx=2, pady=3)
#
#
#                 else:
#                     frame_loc_but_string = Frame(frame_loc_but)
#                     for mark_2 in mark[1:]:
#                         if mark_2 != '\n':
#                             btn = Radiobutton(frame_loc_but_string, text=f"{mark_2}",
#                                               font=('Comic Sans MS', user.get('text_size')),
#                                               value=f"{mark[0]}_{mark_2}",
#                                               variable=selected_button,
#                                               command=select_examination,
#                                               indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#                             btn.pack(fill='both', expand=True, side='left')
#                             data['examination']['examination_buttons_2_color'][f"{mark[0]}_{mark_2}"] = btn
#
#                             col += 1
#
#                         if mark_2 == '\n' or col == 5:
#
#                             col = 0
#
#                             frame_loc_but_string.columnconfigure(index='all', minsize=40, weight=1)
#                             frame_loc_but_string.rowconfigure(index='all', minsize=20)
#                             frame_loc_but_string.pack(fill='both', expand=True)
#                             frame_loc_but_string = Frame(frame_loc_but)
#
#
#                     frame_loc_but_string.columnconfigure(index='all', minsize=40, weight=1)
#                     frame_loc_but_string.rowconfigure(index='all', minsize=20)
#                     frame_loc_but_string.pack(fill='both', expand=True)
#
#                 frame_loc_but.columnconfigure(index='all', minsize=40, weight=1)
#                 frame_loc_but.rowconfigure(index='all', minsize=20)
#
#                 frame_loc.columnconfigure(index='all', minsize=40, weight=1)
#                 frame_loc.rowconfigure(index='all', minsize=20)
#                 frame_loc.pack(fill='both', expand=True)
#
#         frame_examination_buttons.columnconfigure(index='all', minsize=40, weight=1)
#         frame_examination_buttons.rowconfigure(index='all', minsize=20)
#         frame_examination_buttons.pack(fill='both', expand=True, padx=2, pady=2)
#
#     frame_examination = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#     frame_examination_main = Frame(frame_examination, borderwidth=1)
#     frame_examination_buttons = Frame(frame_examination, borderwidth=1)
#
#     txt_examination = ScrolledText(frame_examination_main, width=20, height=30,
#                                    font=('Comic Sans MS', user.get('text_size')),
#                                    wrap="word")
#     change_examination_kb_button = Button(frame_examination_main, text='скрыть клавиатуру осмотра',
#                                           command=change_examination_kb_status,
#                                           font=('Comic Sans MS', user.get('text_size')))
#
#     paste_frame_examination()
#
#     def open_mkb_10_root():
#         if not data['examination'].get('is_mkb_10_root_open'):
#             data['examination']['is_mkb_10_root_open'] = True
#             mkb_10_root_main.grid()
#         else:
#             data['examination']['is_mkb_10_root_open'] = False
#             mkb_10_root_main.grid_remove()
#
#     def create_mkb_10_root():
#         def celect_code():
#             txt_diagnosis.insert('end', f"\n{celected_code.get()}")
#
#         def search_mkb(event=None):
#             def resize(event=None):
#                 region = canvas.bbox(tk.ALL)
#                 canvas.configure(scrollregion=region)
#
#             def on_binds(event):
#                 canvas.idbind = canvas.bind_all("<MouseWheel>", on_mousewheel)
#
#             def off_binds(event=None):
#                 canvas.unbind_all("<MouseWheel>")
#
#             def on_mousewheel(event):
#
#                 region = canvas.bbox(tk.ALL)
#                 canvas.configure(scrollregion=region)
#
#                 if os.name == 'posix':
#                     canvas.yview_scroll(int(-1 * event.delta), "units")
#                 else:
#                     canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
#
#
#             if data['examination'].get('frame_found_data_mkb'):
#                 frame_found_data_mkb = data['examination'].get('frame_found_data_mkb')
#                 frame_found_data_mkb.destroy()
#             master_frame = Frame(mkb_frame_scrolled)
#             data['examination']['frame_found_data_mkb'] = master_frame
#             master_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#
#             found_data = list()
#             mkb_code_edit = ''
#             mkb_name_edit = mkb_name.get()
#
#             if mkb_code.get():
#                 word_list = ["qwertyuiopasdfghjkl;'zxcvbnm,.", "йцукенгшщзфывапролджэячсмитьбю"]
#
#                 for word in mkb_code.get().lower():
#                     if word in word_list[1]:
#                         mkb_code_edit += word_list[0][word_list[1].index(word)]
#                     elif word == ',':
#                         mkb_code_edit += '.'
#                     else:
#                         mkb_code_edit += word
#                 mkb_code_edit = mkb_code_edit.upper()
#
#             if mkb_code_edit and mkb_name_edit:
#                 for key, value in mkb_10.items():
#                     if mkb_code_edit in key and mkb_name_edit.lower() in value.lower():
#                         found_data.append(f"{key} - {value}")
#             elif mkb_code_edit:
#                 for key, value in mkb_10.items():
#                     if mkb_code_edit in key:
#                         found_data.append(f"{key} - {value}")
#             elif mkb_name_edit:
#                 for key, value in mkb_10.items():
#                     if mkb_name_edit.lower() in value.lower():
#                         found_data.append(f"{key} - {value}")
#
#
#             if found_data:
#
#                 scroll_x = tk.Scrollbar(master_frame, orient=tk.HORIZONTAL)
#                 scroll_y = tk.Scrollbar(master_frame, orient=tk.VERTICAL)
#
#                 canvas = tk.Canvas(master_frame,
#                                    xscrollcommand=scroll_x.set,
#                                    yscrollcommand=scroll_y.set)
#                 scroll_x.config(command=canvas.xview)
#                 scroll_y.config(command=canvas.yview)
#
#                 canvas_frame = Frame(canvas)
#
#                 for mkb_data in found_data:
#                     but_text = ''
#                     for i in mkb_data.split():
#                         if len(but_text.split('\n')[-1]) > 40:
#                             but_text += '\n'
#                         but_text += i + ' '
#                     Radiobutton(canvas_frame, text=but_text,
#                                 font=('Comic Sans MS', user.get('text_size')),
#                                 value=f"{mkb_data}",
#                                 variable=celected_code,
#                                 command=celect_code,
#                                 indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                                 ).pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#
#                 # canvas_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#
#                 canvas['width'] = int(canvas.winfo_geometry().split('x')[0])
#                 canvas_frame['width'] = int(canvas.winfo_geometry().split('x')[0])
#                 canvas.grid(row=0, column=0, sticky="nsew")
#                 scroll_x.grid(row=1, column=0, sticky="we")
#                 scroll_y.grid(row=0, column=1, sticky="ns")
#
#                 master_frame.rowconfigure(0, weight=1)
#                 master_frame.columnconfigure(0, weight=1)
#
#                 master_frame.bind("<Configure>", resize)
#                 master_frame.update_idletasks()
#                 canvas_frame['height'] = int(mkb_10_root_main.winfo_height() - frame_main_mkb_10.winfo_height())
#
#
#
#                 canvas.bind("<Enter>", on_binds)
#                 canvas.bind("<Leave>", off_binds)
#
#                 canvas.create_window((0, 0), window=canvas_frame, anchor="nw",
#                                      width=canvas.winfo_width())
#
#             else:
#                 Label(master_frame, text="Поиск не дал результатов!",
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#         mkb_code = StringVar()
#         mkb_name = StringVar()
#         celected_code = StringVar()
#
#         frame_main_mkb_10 = Frame(mkb_10_root_main, bg="#36566d")
#         Label(frame_main_mkb_10, text="Поиск по МКБ-10",
#               font=('Comic Sans MS', user.get('text_size')),
#               bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#         Button(frame_main_mkb_10, text=f"Закрыть окно",
#                font=('Comic Sans MS', user.get('text_size')),
#                command=open_mkb_10_root,
#                bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#
#         mkb_title_frame = Frame(frame_main_mkb_10, bg="#36566d")
#         Label(mkb_title_frame, text="Код: ",
#               font=('Comic Sans MS', user.get('text_size')),
#               bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, side='left')
#         txt_mkb = Entry(mkb_title_frame, width=10,
#               font=('Comic Sans MS', user.get('text_size')),
#               justify="center",
#               textvariable=mkb_code)
#         txt_mkb.pack(fill='x', expand=True, pady=3, padx=3, side='left')
#         txt_mkb.bind('<Return>', search_mkb)
#
#         Label(mkb_title_frame, text="Нозология: ",
#               font=('Comic Sans MS', user.get('text_size')),
#               bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, side='left')
#         txt_mkb = Entry(mkb_title_frame, width=30,
#               font=('Comic Sans MS', user.get('text_size')),
#               textvariable=mkb_name)
#         txt_mkb.pack(fill='x', expand=True, pady=3, padx=3, side='left')
#         txt_mkb.bind('<Return>', search_mkb)
#
#
#         mkb_title_frame.pack(fill='x', anchor='n')
#         frame_main_mkb_10.pack(fill='x', anchor='n')
#
#         mkb_frame_scrolled = Frame(mkb_10_root_main)
#         mkb_frame_scrolled.pack(fill='both', expand=True)
#
#         data['examination']['is_mkb_10_root_open'] = False
#         mkb_10_root_main.grid(row=0, column=3, sticky="nwse")
#
#         mkb_10_root_main.grid_remove()
#
#     mkb_10_root_main = Frame(master=root_examination, padx=3, pady=3, bg="#36566d")
#     mkb_10_root_main.update_idletasks()
#     create_mkb_10_root()
#
#     def paste_diagnosis_kb():
#
#         def edti__txt_diagnosis(event=None):
#             txt_diagnosis_info = txt_diagnosis.get(1.0, 'end').strip()
#             txt_diagnosis_info = txt_diagnosis_info.replace('  ', ' ')
#             txt_diagnosis.delete(1.0, 'end')
#             txt_diagnosis.insert(1.0, txt_diagnosis_info)
#
#
#         def select_diagnosis_kb():
#             diagnosis_button = selected_button.get()
#             selected_button.set('')
#             txt_diagnosis.insert("insert", f" {diagnosis_button} ")
#
#
#         txt_diagnosis['width'] = 30
#         txt_diagnosis['height'] = 5
#         txt_diagnosis.bind("<FocusOut>", edti__txt_diagnosis)
#
#         frame_diagnosis_kb = Frame(frame_diagnosis_txt, borderwidth=1, relief="solid")
#         destroy_elements['frame_diagnosis_kb'] = frame_diagnosis_kb
#
#         row, col = 0, 0
#         local_diagnosis_kb = all_data_diagnosis.get('diagnosis_ori')
#         if child_marker:
#             local_diagnosis_kb = all_data_diagnosis.get('diagnosis_key_child')
#
#         for mark_group in local_diagnosis_kb:
#             mark_group_frame = Frame(frame_diagnosis_kb)
#             for mark in mark_group:
#                 btn = Radiobutton(mark_group_frame, text=mark,
#                                   font=('Comic Sans MS', user.get('text_size')),
#                                   value=f"{mark}",
#                                   variable=selected_button,
#                                   command=select_diagnosis_kb,
#                                   indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#
#                 btn.grid(row=row, column=col, sticky='ew')
#                 col += 1
#                 # if col == 4:
#                 #     col = 0
#                 #     row += 1
#             mark_group_frame.columnconfigure(index='all', minsize=40, weight=1)
#             mark_group_frame.rowconfigure(index='all', minsize=20)
#
#             mark_group_frame.pack(fill='both', expand=True)
#
#         Button(frame_diagnosis_kb, text='MKБ-10',
#                command=open_mkb_10_root,
#                font=('Comic Sans MS', user.get('text_size'))).pack(fill='both', expand=True)
#
#         frame_diagnosis_kb.columnconfigure(index='all', minsize=40, weight=1)
#         frame_diagnosis_kb.rowconfigure(index='all', minsize=20)
#         frame_diagnosis_kb.pack(fill='both', expand=True, side=tk.LEFT)
#
#
#     frame_diagnosis_txt = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#     Label(master=frame_diagnosis_txt, text="Диагноз",
#           font=('Comic Sans MS', user.get('text_size')), bg='white'
#           ).pack(fill='both', expand=True, padx=2, pady=2)
#
#     txt_diagnosis = ScrolledText(frame_diagnosis_txt, width=70, height=3,
#                                  font=('Comic Sans MS', user.get('text_size')),
#                                  wrap="word")
#     txt_diagnosis.pack(fill='both', expand=True, side=tk.LEFT)
#     txt_diagnosis.insert(1.0, 'Диагноз: ')
#     frame_diagnosis_txt.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#     paste_diagnosis_kb()
#
#     def paste_diagnosis_add_but():
#         def select_button_risk():
#             if data['examination']['diagnosis_add_but'].get('Группа риска__нет').get():
#                 for but_name in data['examination'].get('diagnosis_add_but'):
#                     if (but_name.startswith('Группа риска')
#                             and data['examination']['diagnosis_add_but'].get(but_name).get()
#                             and but_name.split('__')[-1] != 'нет'):
#
#                         data['examination']['diagnosis_add_but'].get(but_name).set(0)
#
#             select_button()
#             risk_data = {
#                 "нет": {},
#                 "реализации ВУИ": {
#                     1: ("ОАК + ОАМ (даны направления)", ),
#                     3: ("ОАК + ОАМ (даны направления)", )},
#                 "патологии ЦНС": {
#                     1: ('Консультация невролога + УЗИ ГМ', ),
#                     3: ("Консультация невролога", ),
#                     6: ("Консультация невролога", )},
#                 "Анемии": {
#                     1: ('ОАК + ретикулоциты', ),
#                     3: ("ОАК + ретикулоциты", ),
#                     6: ("ОАК + ретикулоциты", )},
#
#                 "Внезапной смерти": {
#                     1: ('ЭКГ', ),
#                     12: ("ЭКГ", )},
#
#                 "Диспансеризация": {
#                     1: ("ОАК + ОАМ (даны направления)", "ОАЭ и ЭКГ при отсутствии данных о проведении",
#                         "Консультация невролога (запись через справку)", "Консультация хирурга (ортопеда)"),
#                     6: ("Консультация офтальмолога и оториноларинголога (запись через справку)", ),
#
#                     11: ("ОАК + ОАМ (даны направления)", "Консультация стоматолога в 12 мес")
#                 }
#             }
#
#             if patient_age.get('year') == 0:
#                 age_month = patient_age.get('month')
#                 if age_month == 0 and patient_age.get('day') > 20:
#                     age_month = 1
#                 elif age_month == 1 and patient_age.get('day') > 20:
#                     age_month = 2
#
#                 text = txt_prescription.get(1.0, 'end').strip()
#                 edited_string_risk = ''
#                 edited_string_disp = ''
#
#                 new_string_risk = ''
#                 new_string_disp = ''
#
#                 for string in text.split('\n'):
#                     if string.startswith('На основании групп риска:'):
#                         edited_string_risk = string
#                     elif string.startswith('На основании диспансеризации:'):
#                         edited_string_disp = string
#
#                 for but_name in data['examination'].get('diagnosis_add_but'):
#                     if (but_name.startswith('Группа риска')
#                             and data['examination']['diagnosis_add_but'].get(but_name).get()):
#                         risk_name = but_name.split('__')[-1]
#                         if risk_data[risk_name].get(age_month):
#                             if risk_name == 'Анемии' and 'ОАК' in new_string_risk:
#                                 new_string_risk = new_string_risk.replace('ОАК', "ОАК с ретикулоцитами")
#                             elif risk_name in risk_data:
#                                 for mark in risk_data[risk_name].get(age_month):
#                                     new_string_risk += f"{mark}, "
#
#                 if risk_data["Диспансеризация"].get(age_month):
#                     for mark in risk_data["Диспансеризация"].get(age_month):
#                         if mark not in new_string_risk:
#                             new_string_disp += f"{mark}, "
#
#
#                 for mark, old_string, new_string in (("На основании групп риска:", edited_string_risk, new_string_risk),
#                                                      ("На основании диспансеризации:", edited_string_disp, new_string_disp)):
#                     if not old_string:
#                         if new_string:
#                             text += f"\n{mark} {new_string}"
#                     else:
#                         if new_string:
#                             text = text.replace(old_string, f"{mark} {new_string}")
#                         else:
#                             text = text.replace(old_string, "")
#
#                 txt_prescription.delete(1.0, 'end')
#                 txt_prescription.insert(1.0, text)
#
#         def select_button():
#             text = txt_diagnosis.get(1.0, 'end').strip()
#             edited_string = ''
#             for string in text.split('\n'):
#                 for but_category in local_but_name:
#                     if string.startswith(but_category):
#                         edited_string = string
#
#             new_string = ''
#             for but_name in data['examination'].get('diagnosis_add_but'):
#                 if but_name.startswith('Группа риска'):
#                     if data['examination']['diagnosis_add_but'].get(but_name).get():
#                         if 'Группа риска' not in new_string:
#                             new_string += "  Группа риска: "
#                         new_string += f"{but_name.split('__')[-1]}"
#                         if ((but_name.split('__')[-1] ==  'реализации ВУИ' and patient_age.get('month') > 3)
#                             or (but_name.split('__')[-1] !=  'нет' and patient_age.get('year') > 0)):
#                             new_string += " - риск не реализовался, "
#                         else:
#                             new_string += ", "
#
#
#                 else:
#                     if data['examination']['diagnosis_add_but'].get(but_name).get():
#                         new_string += f"  {but_name}: {data['examination']['diagnosis_add_but'].get(but_name).get()}"
#
#             if edited_string:
#                 text = text.replace(edited_string, new_string.strip())
#             else:
#                 text += f"\n{new_string.strip()}"
#
#             txt_diagnosis.delete(1.0, 'end')
#             txt_diagnosis.insert(1.0, text)
#
#
#         frame_diagnosis_add_but = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#         data['examination']['diagnosis_add_but'] = dict()
#         local_but_name = {
#             'Группа здоровья': ("1", "2", "3", "4"),
#             'Группа риска': ("нет", "реализации ВУИ", "патологии ЦНС", "Анемии", "Внезапной смерти"),
#             'НПР': ("1-я группа", "2-я группа", "3-я группа", "4-я группа"),
#             'Режим дня №': ("1", "2", "3", "4", "5"),
#         }
#
#         for but_category in local_but_name:
#             frame = Frame(frame_diagnosis_add_but)
#
#             Label(master=frame,
#                   text=but_category,
#                   font=('Comic Sans MS', user.get('text_size')), bg='white'
#                   ).pack(fill='both', expand=True, side='left', pady=2, padx=2)
#
#
#             if but_category == 'Группа риска':
#
#                 for but_name in local_but_name.get(but_category):
#                     data['examination']['diagnosis_add_but'][f"{but_category}__{but_name}"] = IntVar()
#
#                     Checkbutton(frame, text=but_name,
#                                 font=('Comic Sans MS', user.get('text_size')),
#                                 variable=data['examination']['diagnosis_add_but'].get(f"{but_category}__{but_name}"),
#                                 command=select_button_risk,
#                                 onvalue=1, offvalue=0, indicatoron=False, selectcolor='#77f1ff'
#                                 ).pack(fill='both', expand=True, side='left')
#
#             else:
#                 data['examination']['diagnosis_add_but'][but_category] = StringVar()
#                 for but_name in local_but_name.get(but_category):
#                     Radiobutton(frame, text=but_name,
#                                 font=('Comic Sans MS', user.get('text_size')),
#                                 value=but_name,
#                                 variable=data['examination']['diagnosis_add_but'].get(but_category),
#                                 command=select_button,
#                                 indicatoron=False, selectcolor='#77f1ff'
#                                 ).pack(fill='both', expand=True, side='left')
#
#             frame.columnconfigure(index='all', minsize=40, weight=1)
#             frame.rowconfigure(index='all', minsize=20)
#             frame.pack(fill='both', expand=True)
#
#         data['examination']['diagnosis_add_but']['Группа здоровья'].set('2')
#         if patient_age.get('month') > 0:
#             data['examination']['diagnosis_add_but']['НПР'].set('1-я группа')
#         if patient_age.get('month') < 3:
#             data['examination']['diagnosis_add_but']['Режим дня №'].set('1')
#         elif patient_age.get('month') < 6:
#             data['examination']['diagnosis_add_but']['Режим дня №'].set('2')
#         elif patient_age.get('month') < 9:
#             data['examination']['diagnosis_add_but']['Режим дня №'].set('3')
#         elif patient_age.get('year') == 0:
#             data['examination']['diagnosis_add_but']['Режим дня №'].set('4')
#         else:
#             data['examination']['diagnosis_add_but']['Режим дня №'].set('4')
#         select_button()
#
#
#
#         frame_diagnosis_add_but.columnconfigure(index='all', minsize=40, weight=1)
#         frame_diagnosis_add_but.rowconfigure(index='all', minsize=20)
#         frame_diagnosis_add_but.pack(fill='both', expand=True)
#
#     if child_marker:
#         paste_diagnosis_add_but()
#
#     def open_analyzes_root():
#         if not data['examination']['analyzes'].get('is_analyzes_root_open'):
#             data['examination']['analyzes']['is_analyzes_root_open'] = True
#             analyzes_root_main.grid()
#         else:
#             data['examination']['analyzes']['is_analyzes_root_open'] = False
#             analyzes_root_main.grid_remove()
#
#     def create_analyzes_root():
#         def create_anal_doc():
#             if not data['examination']['analyzes'].get('patient_anal'):
#                 messagebox.showerror('Ошибка!', "Выберите хотя бы один анализ!")
#             else:
#
#                 render_data['ped_div'] = user.get('ped_div')
#                 render_data['doc_name'] = user.get('doctor_name')
#                 render_data['district'] = patient.get('patient_district')
#                 render_data['name'] = patient.get('name')
#                 render_data['birth_date'] = patient.get('birth_date')
#                 render_data['address'] = patient.get('address')
#                 render_data['gender'] = patient.get('gender')
#                 render_data['date'] = datetime.now().strftime("%d.%m.%Y")
#                 render_data['amb_cart'] = patient.get('amb_cart')
#
#                 print(data['examination']['analyzes'].get('patient_anal'))
#                 if 'blood-inf__ГЕПАТИТ' in data['examination']['analyzes'].get('patient_anal'):
#                     with sq.connect(f".{os.sep}data_base{os.sep}patient_data_base.db") as conn:
#                         cur = conn.cursor()
#                         cur.execute(f"SELECT Прививки FROM patient_data WHERE amb_cart LIKE '{patient.get('amb_cart')}'")
#                         vaccination = cur.fetchone()[0]
#                     if vaccination:
#                         vaccination = vaccination.split('\n')
#                         start = vaccination.index('Прививки против гепатита В')
#                         stop = vaccination.index('Прививки против кори, эпидемического паротита и краснухи')
#                         text = ''
#                         counter = 0
#                         for index in range(start + 1, stop):
#                             counter += 1
#                             if counter % 2 == 0:
#                                 end = '\n'
#                             else:
#                                 end = '\t\t'
#
#                             index_str = vaccination[index].split('__')
#                             text += f"V_{counter}: {index_str[1]} --- {index_str[3]} --- {index_str[6]}{end}"
#                         if not text:
#                             text = 'Нет данных о вакцинации\n'
#
#                     else:
#                         text = 'Нет данных о вакцинации\n'
#
#                     render_data['VGB_vaccination'] = text
#
#                 all_links = list()
#                 for anal_name in data['examination']['analyzes'].get('patient_anal'):
#                     category, anal_name = anal_name.split('__')
#
#                     doc = DocxTemplate(f".{os.sep}example{os.sep}{category}{os.sep}{anal_name}.docx")
#                     doc.render(render_data)
#                     doc.save(f".{os.sep}generated{os.sep}{anal_name}.docx")
#                     all_links.append(f".{os.sep}generated{os.sep}{anal_name}.docx")
#
#                 master = Document(all_links.pop(0))
#                 composer = Composer(master)
#                 for link in all_links:
#                     master.add_page_break()
#                     doc_temp = Document(link)
#                     composer.append(doc_temp)
#                 doc_name = f".{os.sep}generated{os.sep}Анализы.docx"
#                 doc_name = save_document(doc=composer, doc_name=doc_name)
#                 data['examination']['analyzes']['patient_anal'].clear()
#                 for btn_name in data['examination']['analyzes'].get('anal_name_buttons'):
#                     active_btn = data['examination']['analyzes']['anal_name_buttons'].get(btn_name)
#                     active_btn['bg'] = '#cdcdcd'
#                     active_btn['text'] = f"{btn_name.split('__')[-1]}"
#
#                 selected_anal.set('')
#                 render_data.clear()
#                 open_analyzes_root()
#
#                 run_document(doc_name)
#
#                 data_base(command="statistic_write",
#                           insert_data="Анализы")
#
#
#         def select_anal_name():
#
#             category, anal_name = selected_button.get().split('__')
#             if category == 'add':
#                 if anal_name == 'ОАК  +  ФОРМУЛА':
#                     anal_name = 'blood__ОАК + ФОРМУЛА'
#                     if anal_name not in data['examination']['analyzes'].get('patient_anal'):
#                         data['examination']['analyzes']['patient_anal'].append("blood__ОАК + ФОРМУЛА")
#                         active_btn = data['examination']['analyzes']['anal_name_buttons'].get("blood__ОАК + ФОРМУЛА")
#                         active_btn['bg'] = '#77f1ff'
#                         active_btn['text'] = f"✔{anal_name}"
#                 else:
#                     for marker in anal_name.split(' + '):
#                         for btn_name in data['examination']['analyzes'].get('anal_name_buttons'):
#                             if (marker in btn_name
#                                     and 'add' not in btn_name
#                                     and btn_name not in data['examination']['analyzes'].get('patient_anal')):
#                                 data['examination']['analyzes']['patient_anal'].append(btn_name)
#                                 active_btn = data['examination']['analyzes']['anal_name_buttons'].get(btn_name)
#                                 active_btn['bg'] = '#77f1ff'
#                                 active_btn['text'] = f"✔{marker}"
#                                 break
#             else:
#                 btn_name = f"{category}__{anal_name}"
#                 active_btn = data['examination']['analyzes']['anal_name_buttons'].get(btn_name)
#
#                 if btn_name in data['examination']['analyzes'].get('patient_anal'):
#                     data['examination']['analyzes']['patient_anal'].remove(btn_name)
#                     active_btn['bg'] = '#cdcdcd'
#                     active_btn['text'] = f"{anal_name}"
#                 else:
#                     data['examination']['analyzes']['patient_anal'].append(btn_name)
#                     active_btn['bg'] = '#77f1ff'
#                     active_btn['text'] = f"✔{anal_name}"
#
#
#
#             if 'blood__ОАК' in data['examination']['analyzes'].get('patient_anal') and \
#                 ('blood__ОАК + ФОРМУЛА' in data['examination']['analyzes'].get('patient_anal')
#                  or 'blood__ОАК + СВЕРТЫВАЕМОСТЬ' in data['examination']['analyzes'].get('patient_anal')):
#                 data['examination']['analyzes']['patient_anal'].remove("blood__ОАК")
#                 data['examination']['analyzes']['anal_name_buttons'][f"blood__ОАК"]['bg'] = '#cdcdcd'
#                 data['examination']['analyzes']['anal_name_buttons'][f"blood__ОАК"]['text'] = "ОАК"
#
#             lbl_text = "Анализы: "
#             for anal_name in data['examination']['analyzes'].get('patient_anal'):
#                 category, anal_name = anal_name.split('__')
#                 lbl_text += f"{anal_name}, "
#                 if len(lbl_text.split('\n')[-1]) > 40:
#                     lbl_text += '\n'
#
#
#             lbl_text = lbl_text.strip()[:-1]
#             selected_anal.set(lbl_text)
#             lbl_text = lbl_text.replace('\n', '').lower().replace('анализы', 'Анализы')
#
#             prescription_text = txt_prescription.get(1.0, 'end').strip()
#             for string in prescription_text.split('\n'):
#                 if string.startswith("Анализы:"):
#                     prescription_text = prescription_text.replace(string, lbl_text)
#                     break
#             else:
#                 prescription_text = f"{lbl_text}\n{prescription_text}"
#             txt_prescription.delete(1.0, 'end')
#             txt_prescription.insert(1.0, prescription_text)
#
#         def select_anal_category():
#             if data['examination']['analyzes'].get('frame_anal_active'):
#                 frame_anal_active = data['examination']['analyzes'].get('frame_anal_active')
#                 frame_anal_active.pack_forget()
#             master_frame = data['examination']['analyzes']['anal_category_frames'].get(selected_button.get())
#             data['examination']['analyzes']['frame_anal_active'] = master_frame
#             master_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#         data['examination']['analyzes'] = {
#             'is_analyzes_root_open': False,
#             'frame_anal_active': None,
#             'anal_name_buttons': dict(),
#             'anal_category_frames': dict(),
#             'patient_anal': list()}
#
#         frame_main_analyzes = Frame(analyzes_root_main, bg="#36566d")
#         anal_frame_category = Frame(analyzes_root_main)
#
#         selected_anal = StringVar()
#
#         Label(frame_main_analyzes, textvariable=selected_anal,
#               font=('Comic Sans MS', user.get('text_size')),
#               bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#         Button(frame_main_analyzes, text=f"Закрыть окно",
#                font=('Comic Sans MS', user.get('text_size')),
#                command=open_analyzes_root,
#                bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#         Button(frame_main_analyzes, text=f"Создать документ",
#                font=('Comic Sans MS', user.get('text_size')),
#                command=create_anal_doc,
#                bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#         Label(frame_main_analyzes, text=f"Категории анализов:\n{'_'*50}",
#               font=('Comic Sans MS', user.get('text_size')),
#               bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#
#         for category in all_blanks_anal:
#             Radiobutton(frame_main_analyzes, text=all_blanks_anal.get(category)[0],
#                         font=('Comic Sans MS', user.get('text_size')),
#                         value=category, variable=selected_button,
#                         command=select_anal_category,
#                         indicatoron=False, selectcolor='#77f1ff',
#                         bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3)
#
#             master_frame = Frame(anal_frame_category)
#             for anal_name in all_blanks_anal.get(category)[1:]:
#                 btn = Radiobutton(master_frame, text=f'{anal_name}',
#                                     font=('Comic Sans MS', user.get('text_size')),
#                                     value=f"{category}__{anal_name}", variable=selected_button,
#                                     command=select_anal_name,
#                                     indicatoron=False, selectcolor='#77f1ff',
#                                     bg='#cdcdcd')
#                 btn.pack(fill='both', expand=True, anchor='n')
#                 data['examination']['analyzes']['anal_name_buttons'][f"{category}__{anal_name}"] = btn
#             data['examination']['analyzes']['anal_category_frames'][category] = master_frame
#
#
#
#         frame_main_analyzes.pack(fill='x', anchor='n')
#         anal_frame_category.pack(fill='both', expand=True)
#         analyzes_root_main.grid(row=0, column=3, sticky="nwse")
#         analyzes_root_main.grid_remove()
#
#     analyzes_root_main = Frame(master=root_examination, padx=3, pady=3, bg="#36566d")
#     analyzes_root_main.update_idletasks()
#     create_analyzes_root()
#
#     def open_consultation_root():
#         if not data['examination']['consultation'].get('is_consultation_root_open'):
#             data['examination']['consultation']['is_consultation_root_open'] = True
#             consultation_root_main.grid()
#         else:
#             data['examination']['consultation']['is_consultation_root_open'] = False
#             consultation_root_main.grid_remove()
#
#     def create_consultation_root():
#         cons_doc = ("офтальмолога", "хирурга", "оториноларинголога",
#                     "гастроэнтеролога", "пульмонолога", "невролога",
#                     "R-грамма ОГК", "R-грамма ППН", "ЭКГ")
#
#         def create_consult_doc():
#             if not data['examination']['consultation'].get('patient_consult'):
#                 messagebox.showerror('Ошибка!', "Выберите хотя бы одного специалиста!")
#             else:
#
#                 render_data['address_hospital'] = ' '
#                 render_data['hospital'] = 'УЗ 19-я Городская детская поликлиника'
#                 render_data['diagnosis'] = txt_diagnosis.get(1.0, 'end').strip().replace('Диагноз:', "")
#
#                 render_data['ped_div'] = user.get('ped_div')
#                 render_data['doc_name'] = user.get('doctor_name')
#                 render_data['district'] = patient.get('patient_district')
#                 render_data['name'] = patient.get('name')
#                 render_data['birth_date'] = patient.get('birth_date')
#                 render_data['address'] = patient.get('address')
#                 render_data['gender'] = patient.get('gender')
#                 render_data['date'] = datetime.now().strftime("%d.%m.%Y")
#                 render_data['amb_cart'] = patient.get('amb_cart')
#
#                 print(data['examination']['consultation'].get('patient_consult'))
#
#                 all_links = list()
#                 for consult_name in data['examination']['consultation'].get('patient_consult'):
#                     render_data['doctor'] = consult_name
#
#                     doc = DocxTemplate(f".{os.sep}example{os.sep}direction{os.sep}НА КОНСУЛЬТАЦИЮ.docx")
#                     doc.render(render_data)
#                     doc.save(f".{os.sep}generated{os.sep}напр_{consult_name}.docx")
#                     all_links.append(f".{os.sep}generated{os.sep}напр_{consult_name}.docx")
#
#                 master = Document(all_links.pop(0))
#                 composer = Composer(master)
#                 for link in all_links:
#                     master.add_page_break()
#                     doc_temp = Document(link)
#                     composer.append(doc_temp)
#                 doc_name = f".{os.sep}generated{os.sep}Направление.docx"
#                 doc_name = save_document(doc=composer, doc_name=doc_name)
#                 data['examination']['consultation']['patient_consult'].clear()
#                 for btn_name in data['examination']['consultation'].get('consult_name_buttons'):
#                     active_btn = data['examination']['consultation']['consult_name_buttons'].get(btn_name)
#                     active_btn['bg'] = '#cdcdcd'
#                     active_btn['text'] = f"{btn_name.split('__')[-1]}"
#
#                 selected_consult.set('')
#                 render_data.clear()
#                 open_consultation_root()
#                 run_document(doc_name)
#
#                 data_base(command="statistic_write",
#                           insert_data="Направление")
#
#         def select_consult_name():
#
#             consult_name = selected_button.get()
#             active_btn = data['examination']['consultation']['consult_name_buttons'].get(consult_name)
#
#             if consult_name in data['examination']['consultation'].get('patient_consult'):
#                 data['examination']['consultation']['patient_consult'].remove(consult_name)
#                 active_btn['bg'] = '#cdcdcd'
#                 active_btn['text'] = f"{consult_name}"
#             else:
#                 data['examination']['consultation']['patient_consult'].append(consult_name)
#                 active_btn['bg'] = '#77f1ff'
#                 active_btn['text'] = f"✔{consult_name}"
#
#
#             lbl_text = "Консультация: "
#             for consult_name in data['examination']['consultation'].get('patient_consult'):
#                 lbl_text += f"{consult_name}, "
#                 if len(lbl_text.split('\n')[-1]) > 40:
#                     lbl_text += '\n'
#
#             lbl_text = lbl_text.strip()[:-1]
#             selected_consult.set(lbl_text)
#             lbl_text = lbl_text.replace('\n', '')
#             prescription_text = txt_prescription.get(1.0, 'end').strip()
#             for string in prescription_text.split('\n'):
#                 if string.startswith("Консультация:"):
#                     prescription_text = prescription_text.replace(string, lbl_text)
#                     break
#             else:
#                 prescription_text = f"{lbl_text}\n{prescription_text}"
#             txt_prescription.delete(1.0, 'end')
#             txt_prescription.insert(1.0, prescription_text)
#
#         data['examination']['consultation'] = {
#             'is_consultation_root_open': False,
#             'consult_name_buttons': dict(),
#             'patient_consult': list()}
#
#         frame_main_consultation = Frame(consultation_root_main, bg="#36566d")
#         consult_frame_category = Frame(consultation_root_main)
#
#         selected_consult = StringVar()
#
#         Label(frame_main_consultation, textvariable=selected_consult,
#               font=('Comic Sans MS', user.get('text_size')),
#               bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#         Button(frame_main_consultation, text=f"Закрыть окно",
#                font=('Comic Sans MS', user.get('text_size')),
#                command=open_consultation_root,
#                bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#         Button(frame_main_consultation, text=f"Создать документ",
#                font=('Comic Sans MS', user.get('text_size')),
#                command=create_consult_doc,
#                bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#         Label(frame_main_consultation, text=f"Специалисты:\n{'_' * 50}",
#               font=('Comic Sans MS', user.get('text_size')),
#               bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#         for consult_name in cons_doc:
#             btn = Radiobutton(consult_frame_category, text=consult_name,
#                               font=('Comic Sans MS', user.get('text_size')),
#                               value=consult_name, variable=selected_button,
#                               command=select_consult_name,
#                               indicatoron=False, selectcolor='#77f1ff',
#                               bg='#cdcdcd')
#             btn.pack(fill='both', expand=True, anchor='n')
#             data['examination']['consultation']['consult_name_buttons'][consult_name] = btn
#
#         frame_main_consultation.pack(fill='x', anchor='n')
#         consult_frame_category.pack(fill='both', expand=True)
#         consultation_root_main.grid(row=0, column=3, sticky="nwse")
#         consultation_root_main.grid_remove()
#
#     consultation_root_main = Frame(master=root_examination, padx=3, pady=3, bg="#36566d")
#     consultation_root_main.update_idletasks()
#     create_consultation_root()
#
#     def paste_frame_prescription():
#         label_prescription = Label(master=frame_prescription_main,
#                                    text="Рекомендации",
#                                    font=('Comic Sans MS', user.get('text_size')), bg='white')
#         label_prescription.grid(row=0, column=0, sticky='ew')
#
#         txt_prescription.grid(column=0, row=1, sticky='nwse', columnspan=2)
#
#         data['examination']['prescription_but'] = dict()
#         for mark_ in all_data_diagnosis.get('prescription'):
#             for mark_2_ in mark_[1:]:
#                 data['examination']['prescription_but'][f"{mark_[0]}_{mark_2_}"] = IntVar()
#
#         change_prescription_kb_button.grid(column=1, row=0, sticky='ew')
#
#         frame_prescription_main.columnconfigure(index='all', minsize=40, weight=1)
#         frame_prescription_main.rowconfigure(index='all', minsize=20)
#         frame_prescription_main.pack(fill='both', expand=True, side=tk.LEFT)
#
#         paste_prescription_kb()
#         frame_prescription.columnconfigure(index='all', minsize=40, weight=1)
#         frame_prescription.rowconfigure(index='all', minsize=20)
#         frame_prescription.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#     def select_prescription_frame():
#         if data['examination']['prescription_frame'].get('last_open_frame', '') == selected_prescription_frame.get():
#             data['examination']['prescription_frame'].get('open_frame').pack_forget()
#             data['examination']['prescription_frame']['last_open_frame'] = ''
#         else:
#
#             if data['examination']['prescription_frame'].get('open_frame'):
#                 data['examination']['prescription_frame'].get('open_frame').pack_forget()
#
#             frame_loc = data['examination']['prescription_frame'].get(selected_prescription_frame.get())
#             data['examination']['prescription_frame']['open_frame'] = frame_loc
#             frame_loc.pack(fill='both', expand=True)
#             data['examination']['prescription_frame']['last_open_frame'] = selected_prescription_frame.get()
#
#     def select_prescription():
#         prescription_text = txt_prescription.get(1.0, 'end').strip()
#         prescription_button = selected_button.get()
#         selected_button.set('')
#         mark_1, mark_2 = prescription_button.split('_')
#
#
#         edited_string = ''
#         if mark_1 == 'Разрешена вакцинация':
#             if 'Информирован(а)' in mark_2 and mark_2 in prescription_text:
#                 print(f"'{mark_2}'\n")
#                 print(f"'{prescription_text}'")
#                 prescription_text = prescription_text.replace(mark_2, '')
#             if 'Медотвод от проф' in mark_2 and mark_2 in prescription_text:
#                 prescription_text = prescription_text.replace(mark_2, '')
#
#             else:
#                 if mark_2[-1] != '-':
#                     mark_2 = f"{mark_2},"
#                 for string in prescription_text.split('\n'):
#                     if string.startswith(mark_1):
#                         edited_string = string
#                         if edited_string[-1] in (',', '-'):
#                             edited_string += ' '
#                         edited_string += f"{mark_2} "
#                         prescription_text = prescription_text.replace(string, edited_string)
#
#                         break
#                 else:
#                     prescription_text = f"{mark_1}: {mark_2} " \
#                                         f"\nИнформирован(а) о проводимой прививке. " \
#                                         f"\nС особенностями течения периода после иммунизации ОЗНАКОМЛЕН(А) _________" \
#                                         f"\n{prescription_text}"
#
#
#
#
#         elif data['examination']['prescription_but'].get(prescription_button):
#             if data['examination']['prescription_but'][prescription_button].get():
#                 data['examination']['prescription_but'][prescription_button].set(0)
#
#                 for string in prescription_text.split('\n'):
#                     if string.startswith(mark_1):
#                         edited_string = string
#                         if mark_2 in edited_string:
#                             for i in (f"{mark_2}, ", f"{mark_2},", f", {mark_2}",
#                                       f"{mark_2} ", f"{mark_2}"):
#                                 if i in edited_string:
#                                     edited_string = edited_string.replace(i, '')
#                                     prescription_text = prescription_text.replace(string, edited_string)
#
#                             for btn in data['examination'].get('prescription_but'):
#                                 if btn.startswith(mark_1) and data['examination']['prescription_but'][btn].get():
#                                     break
#                             else:
#                                 prescription_text = prescription_text.replace(edited_string, '')
#
#             else:
#                 data['examination']['prescription_but'][prescription_button].set(1)
#
#                 for string in prescription_text.split('\n'):
#                     if string.startswith(mark_1):
#                         edited_string = string
#                         if edited_string[-1] == ',':
#                             edited_string += ' '
#                         edited_string += f"{mark_2}, "
#                         prescription_text = prescription_text.replace(string, edited_string)
#
#                         break
#                 else:
#                     prescription_text = f"{mark_1}: {mark_2}, \n" + prescription_text
#
#         for button_name in data['examination'].get('prescription_buttons_color'):
#             if data['examination']['prescription_but'].get(button_name):
#                 if data['examination']['prescription_but'].get(button_name).get() == 1:
#                     data['examination']['prescription_buttons_color'][button_name]['bg'] = '#77f1ff'
#                 else:
#                     data['examination']['prescription_buttons_color'][button_name]['bg'] = '#cdcdcd'
#
#
#
#
#         txt_prescription.delete(1.0, 'end')
#         txt_prescription.insert(1.0, prescription_text.strip().replace('\n\n', '\n'))
#
#         frame_prescription_main.columnconfigure(index='all', minsize=40, weight=1)
#         frame_prescription_main.rowconfigure(index='all', minsize=20)
#
#         frame_prescription.columnconfigure(index='all', minsize=40, weight=1)
#         frame_prescription.rowconfigure(index='all', minsize=20)
#
#     def select_drugs_item(drug_name=None, weight=None):
#         if drug_name:
#             drug_category, drug_name, mark_flag, mark = drug_name.split('__')
#         else:
#             drug_category, drug_name, mark_flag, mark = selected_button.get().split('__')
#             selected_button.set('')
#
#
#         if not data['examination'].get('selected_drugs'):
#             data['examination']['selected_drugs'] = dict()
#
#         if not data['examination']['selected_drugs'].get(drug_category):
#             data['examination']['selected_drugs'][drug_category] = dict()
#         if not data['examination']['selected_drugs'][drug_category].get(drug_name):
#             data['examination']['selected_drugs'][drug_category][drug_name] = dict()
#
#         if mark_flag == "Способ применения":
#             if not data['examination']['selected_drugs'][drug_category][drug_name].get(mark_flag):
#                 data['examination']['selected_drugs'][drug_category][drug_name][mark_flag] = list()
#             if mark in data['examination']['selected_drugs'][drug_category][drug_name].get(mark_flag):
#                 data['examination']['selected_drugs'][drug_category][drug_name][mark_flag].remove(mark)
#             else:
#                 data['examination']['selected_drugs'][drug_category][drug_name][mark_flag].append(mark)
#
#         else:
#             data['examination']['selected_drugs'][drug_category][drug_name][mark_flag] = mark
#
#         prescription_text = txt_prescription.get(1.0, 'end').strip()
#         edited_string = ''
#
#         if not weight:
#             weight = data['examination']['anthro']['txt_weight_variable'].get()
#
#
#         if weight:
#             if weight == "None":
#                 weight = None
#             else:
#                 if isinstance(weight, str):
#                     weight = float(weight.replace(',', '.'))
#                 if weight > 40:
#                     weight = 40
#
#         if drug_category == 'Антибиотики':
#             if drug_name == "Амоксициллин":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     if age < 7:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 250/5'
#                     elif age < 10:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 250 мг'
#                     elif age < 15:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 500 мг'
#                     else:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 1000 мг'
#
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '50 мг/кг/сут'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'
#
#             elif drug_name == "Амоксициллин + клавулановая кислота":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     if age < 4:
#                         data['examination']['selected_drugs'][drug_category][drug_name][
#                             'Форма'] = 'суспензия 200/28.5/5'
#                     elif age < 8:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 400/57/5'
#                     elif age < 15:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 500/125 мг'
#                     else:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 875/125 мг'
#
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '50 мг/кг/сут'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'
#
#             elif drug_name == "Цефуроксим":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     if age < 7:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 125/5'
#                     elif age < 14:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 125'
#                     else:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 250'
#
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '20 мг/кг/сут'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'
#
#             elif drug_name == "Кларитромицин":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     if age < 4:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 125/5'
#                     elif age < 13:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 250/5'
#                     else:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 250'
#
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '15 мг/кг/сут'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'
#
#             elif drug_name == "Азитромицин":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     if age < 12:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 200/5'
#                     else:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 250'
#
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '10 мг/кг/сут'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут'
#
#             elif drug_name == "Цефдинир":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     if age < 4:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 125/5'
#                     elif age < 13:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 250/5'
#                     else:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 300'
#
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '14 мг/кг/сут'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'
#
#         elif drug_category == 'ОРИ':
#
#             if drug_name == "Парацетамол":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'автоматически'
#
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '15 мг/кг'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Способ применения'):
#                     if mark_flag != 'Способ применения':
#
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Способ применения'] = \
#                             ['принимать при температуре 38.5 и выше', 'с интервалом не меньше 8 часов']
#
#             elif drug_name == "Ибупрофен":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'автоматически'
#
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '10 мг/кг'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Способ применения'):
#                     if mark_flag != 'Способ применения':
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Способ применения'] = \
#                             ['принимать при температуре 38.5 и выше', 'с интервалом не меньше 8 часов']
#
#             elif drug_name == "Оксиметазолин - капли в нос":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     if age < 1:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = '0.01%'
#                     else:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = '0.025%'
#
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Длительность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name][
#                         'Длительность'] = 'не дольше 5 дней'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Способ применения'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Способ применения'] = \
#                         ['при заложенности носа']
#
#             elif drug_name == "Ксилометазолин - капли в нос":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     if age < 13:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = '0.05%'
#                     else:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = '0.1%'
#
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '3 р/сут'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Длительность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name][
#                         'Длительность'] = 'не дольше 5 дней'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Способ применения'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Способ применения'] = \
#                         ['при заложенности носа']
#
#             elif drug_name == "Феназон+Лидокаин (отисфен) - капли ушные":
#
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = 'по 1-2 капли'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '3 р/сут'
#
#             elif drug_name == "Рифамицин (отофа) - капли ушные":
#
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = 'по 1-2 капли'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '3 р/сут'
#
#         elif drug_category == 'Бронхолитики':
#
#             if drug_name == "Монтелукаст":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     if age < 7:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 4мг'
#                     elif age < 17:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 5мг'
#                     else:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 10мг'
#
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1 таб'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут на ночь'
#
#         elif drug_category == 'Глазные капли':
#
#             if drug_name == "Нитрофурал (фурацилин)":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = \
#                         'раствор для наружного применения 0.02%'
#
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = \
#                         'промывать глаза по мере загноения'
#
#             elif drug_name in ("Тобрамицин - капли глазные 0.3%", "Дексаметазон+Тобрамицин - капли глазные",
#                                "Дексаметазон - капли глазные 0.1%", "Диклофенак - капли глазные 0.1%"):
#
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = 'по 1-2 капли'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '3 р/сут'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Длительность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Длительность'] = '5 дней'
#
#
#         elif drug_category == 'Антигистаминные':
#
#             if drug_name == "Цетиризин":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     if age < 7:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'кап. 10мг/мл-20мл'
#                     else:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 10мг'
#
#                 if not (data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка') and
#                         data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность')):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут'
#                     if data['examination']['selected_drugs'][drug_category][drug_name].get('Форма') == 'кап. 10мг/мл-20мл':
#                         if age < 3:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '5 капель'
#                         elif age < 12:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '10 капель'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '20 капель'
#
#                     if data['examination']['selected_drugs'][drug_category][drug_name].get('Форма') == 'таб. 10мг':
#                         if age < 12:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1/2 таб'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1 таб'
#
#
#             elif drug_name == "Лоратадин":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     if age < 7:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 5мг/5мл'
#                     else:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 10мг'
#
#                 if not (data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка') and
#                         data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность')):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут'
#                     if data['examination']['selected_drugs'][drug_category][drug_name].get(
#                             'Форма') == 'суспензия 5мг/5мл':
#                         if age < 12:
#                             data['examination']['selected_drugs'][drug_category][drug_name][
#                                 'Дозировка'] = '5 миллилитров'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name][
#                                 'Дозировка'] = '10 миллилитров'
#
#                     if data['examination']['selected_drugs'][drug_category][drug_name].get('Форма') == 'таб. 10мг':
#                         if age < 12:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1/2 таб'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1 таб'
#
#
#             elif drug_name == "Дезлоратадин":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     if age < 12:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 0.5мг/мл'
#                     else:
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 5мг'
#
#                 if not (data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка') and
#                         data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность')):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут'
#                     if data['examination']['selected_drugs'][drug_category][drug_name].get(
#                             'Форма') == 'суспензия 0.5мг/мл':
#                         if age < 6:
#                             data['examination']['selected_drugs'][drug_category][drug_name][
#                                 'Дозировка'] = '2.5 миллилитра'
#                         elif age < 12:
#                             data['examination']['selected_drugs'][drug_category][drug_name][
#                                 'Дозировка'] = '5 миллилитров'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name][
#                                 'Дозировка'] = '10 миллилитров'
#
#                     if data['examination']['selected_drugs'][drug_category][drug_name].get('Форма') == 'таб. 5мг':
#                         if age < 12:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1/2 таб'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1 таб'
#
#         elif drug_category == 'Льготные':
#             if drug_name == "Холекальциферол":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = \
#                         'масляный раствор для приема внутрь 0.5мг/мл 10мл'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = 'по 1 капле'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут'
#
#             elif drug_name == "Бифидумбактерин":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = \
#                         'порошок для приг. раствора внутр. 5доз N10'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '5 доз (1 флакон)'
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                     data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '3 р/сут'
#
#
#
#
#         all_but_names = list()
#         for marker in data['examination']['selected_drugs'][drug_category].get(drug_name):
#             if data['examination']['selected_drugs'][drug_category][drug_name].get(marker):
#                 if marker == "Способ применения":
#                     for marker_2 in data['examination']['selected_drugs'][drug_category][drug_name].get(marker):
#                         all_but_names.append(f"{drug_category}__{drug_name}__{marker}__{marker_2}")
#                 else:
#                     marker_2 = data['examination']['selected_drugs'][drug_category][drug_name].get(marker)
#                     all_but_names.append(f"{drug_category}__{drug_name}__{marker}__{marker_2}")
#
#         for button_name in data['examination'].get('all_drug_buttons'):
#             if button_name.startswith(f"{drug_category}__{drug_name}"):
#                 if button_name in all_but_names:
#                     data['examination']['all_drug_buttons'][button_name]['bg'] = '#77f1ff'
#                 else:
#                     data['examination']['all_drug_buttons'][button_name]['bg'] = '#cdcdcd'
#
#         if drug_category == 'Антибиотики':
#             ab_weight = []
#
#             if weight and drug_name not in ('Фосфомицин', 'Фуразидин (Фурагин)'):
#
#                 ab_key_dosa = data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка')
#                 ab_key_form = data['examination']['selected_drugs'][drug_category][drug_name].get('Форма')
#                 ab_key_count = data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность', '')
#
#                 edited_string = f"{drug_name}: {ab_key_form}  -- "
#
#                 ab_weight = ab_key_form.split('/')[0].split(' ')[-1].strip()
#
#                 ab_dosage = int(ab_key_dosa.split()[0])
#                 ab_dosage_day = weight * ab_dosage
#                 ab_volume_day = ab_dosage_day / int(ab_weight)
#
#                 ab_key_count_loc = None
#                 if ab_key_count:
#                     if ab_key_count == '1-й день - 2 р/сут, далее - 1 р/сут':
#                         ab_key_count_loc = 1
#                     else:
#                         ab_key_count_loc = int(ab_key_count.replace(' р/сут', ''))
#                 if not ab_key_count_loc:
#                     ab_key_count_loc = 2
#                     if drug_name == 'Азитромицин':
#                         ab_key_count_loc = 1
#
#                 ab_volume_single = ab_volume_day / ab_key_count_loc
#                 if 'суспензия' in ab_key_form:
#                     ab_volume_single = ab_volume_single * 5
#                     edited_string += f" по {round(ab_volume_single, 1)} мл. "
#                     if ab_key_count:
#                         edited_string += f"{ab_key_count} "
#                     else:
#                         edited_string += f"{ab_key_count_loc} р/сут "
#                     edited_string += f"({round(ab_dosage_day / weight)}мг/кг/сут)  "
#
#
#                 else:
#                     if str(ab_volume_single).split('.')[-1][0] in ('4', '5', '6'):
#                         ab_volume_single = float(f"{str(ab_volume_single).split('.')[0]}.5")
#                     else:
#                         ab_volume_single = round(ab_volume_single)
#                     edited_string += f" по {round(ab_volume_single, 1)} таб. "
#
#                     if ab_key_count:
#                         edited_string += f"{ab_key_count} "
#                     else:
#                         edited_string += f"{ab_key_count_loc} р/сут "
#                     edited_string += f"({round((ab_volume_single * ab_key_count_loc * int(ab_weight)) / weight)}" \
#                                      f"мг/кг/сут) "
#
#                 edited_string += \
#                     data['examination']['selected_drugs'][drug_category][drug_name].get('Длительность', '') + ' -- '
#                 for marker in data['examination']['selected_drugs'][drug_category][drug_name].get('Способ применения',
#                                                                                                   []):
#                     edited_string += marker + ', '
#
#
#             else:
#                 edited_string = f"{drug_name}: "
#                 for marker in ("Форма", "Дозировка", "Кратность", "Длительность"):
#                     if data['examination']['selected_drugs'][drug_category][drug_name].get(marker, ''):
#                         edited_string += \
#                             data['examination']['selected_drugs'][drug_category][drug_name].get(marker, '') + ' -- '
#                 for marker in data['examination']['selected_drugs'][drug_category][drug_name].get('Способ применения',
#                                                                                                   []):
#                     edited_string += marker + ', '
#
#         elif drug_category == 'ОРИ':
#             if drug_name in ('Парацетамол', 'Ибупрофен'):
#                 drug__form = data['examination']['selected_drugs'][drug_category][drug_name].get('Форма', "")
#                 drug__dosa = data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка', "")
#
#                 if weight:
#
#                     if drug_name == 'Парацетамол' and drug__form:
#                         text_paracetamol = f"{drug_name}: "
#                         if drug__dosa:
#                             drug__dosa = float(drug__dosa.replace(' мг/кг', ''))
#                         else:
#                             drug__dosa = 12.5
#                         paracetamol_min, paracetamol_max = (weight * 10, weight * 15)
#
#                         if drug__form == 'суппозитории' or (drug__form == 'автоматически' and age <= 5):
#
#                             supp = []
#                             for i in (50, 80, 100, 125, 150, 170, 250, 300, 330):
#                                 if paracetamol_min < i <= paracetamol_max:
#                                     supp.append(i)
#                             if supp:
#                                 supp_text = 'суппозитории '
#                                 for i in supp:
#                                     supp_text += str(i) + 'мг., '
#                                 text_paracetamol += supp_text
#
#                         if "суспензия" in drug__form or "раствор" in drug__form or (drug__form == 'автоматически' and age <= 12):
#                             if drug__form == 'автоматически':
#                                 text_paracetamol += f'Раствор 30мг/мл -- ' \
#                                                     f'по {round(weight * drug__dosa / 30, 1)} мл; '
#
#                             else:
#                                 if '30' in drug__form:
#                                     text_paracetamol += f'Раствор 30мг/мл -- ' \
#                                                         f'по {round(weight * drug__dosa / 30, 1)} мл; '
#                                 else:
#                                     text_paracetamol += f'Cуспензия 120 мг/5мл -- ' \
#                                                         f'по {round(weight * drug__dosa / 24, 1)} мл; '
#
#                         if "таб." in drug__form or age > 5 and drug__form == 'автоматически':
#                             if '200' in drug__form or (drug__form == 'автоматически' and weight < 35):
#
#                                 if paracetamol_max < 100:
#                                     text_paracetamol += ""
#                                 elif paracetamol_max < 200:
#                                     text_paracetamol += "Таб. 200 мг -- по 1/2 таб; "
#                                 elif paracetamol_max < 300:
#                                     text_paracetamol += "Таб. 200 мг -- по 1 таб; "
#                                 elif paracetamol_max < 400:
#                                     text_paracetamol += "Таб. 200 мг -- по 1.5 таб; "
#                                 elif 400 <= paracetamol_max:
#                                     text_paracetamol += "Таб. 200 мг -- по 2 таб; "
#
#                             if '500' in drug__form or drug__form == 'автоматически':
#
#                                 if paracetamol_min < 250 <= paracetamol_max:
#                                     text_paracetamol += "Таб. 500 мг -- по 1/2 т.; "
#                                 elif 500 <= paracetamol_max:
#                                     text_paracetamol += "Таб. 500 мг -- по 1 т.; "
#                         edited_string = text_paracetamol.strip() + ' '
#
#                     elif drug_name == 'Ибупрофен':
#                         if drug__dosa:
#                             drug__dosa = float(drug__dosa.replace(' мг/кг', ''))
#                         else:
#                             drug__dosa = 7.5
#                         text_ibuprofen = f"{drug_name}: "
#                         ibuprofen_min, ibuprofen_max = (weight * 5, weight * 10)
#                         if drug__form in ('автоматически', 'суппозитории'):
#                             if ibuprofen_min < 60 <= ibuprofen_max:
#                                 text_ibuprofen += f'Супп. 60 мг.; '
#                         if drug__form == 'суспензия 100 мг/5мл' or (drug__form == 'автоматически' and age < 3):
#                             text_ibuprofen += f"суспензия 100мг/5мл -- по {round(drug__dosa * weight / 20, 1)}мл; "
#
#                         if drug__form == 'суспензия 200 мг/5мл' or (drug__form == 'автоматически' and age >= 3):
#                             text_ibuprofen += f"Cуспензия 200мг/5мл -- по {round(drug__dosa * weight / 40, 1)}мл; "
#
#                         if drug__form == 'таб. 200 мг' or (drug__form == 'автоматически' and age > 5):
#                             if ibuprofen_max < 100:
#                                 pass
#                             elif ibuprofen_max < 200:
#                                 text_ibuprofen += "Таб. 200 мг -- по 1/2 таб; "
#                             elif ibuprofen_max < 300:
#                                 text_ibuprofen += "Таб. 200 мг -- по 1 таб; "
#                             elif ibuprofen_max < 400:
#                                 text_ibuprofen += "Таб. 200 мг -- по 1.5 таб; "
#                             elif 400 <= ibuprofen_max:
#                                 text_ibuprofen += "Таб. 200 мг -- по 2 таб; "
#
#                         if drug__form == 'таб. 400 мг':
#                             if ibuprofen_max < 200:
#                                 pass
#                             elif ibuprofen_max < 400:
#                                 text_ibuprofen += "Таб. 400 мг -- по 1/2 таб; "
#                             elif 400 == ibuprofen_max:
#                                 text_ibuprofen += "Таб. 400 мг -- по 1 таб; "
#
#                         edited_string = text_ibuprofen.strip() + ' '
#                     edited_string += ' --  '
#                     for marker in data['examination']['selected_drugs'][drug_category][drug_name].get(
#                             'Способ применения', []):
#                         edited_string += marker + ', '
#
#                 else:
#                     edited_string = f"{drug_name}: "
#                     if drug_name == 'Парацетамол' and drug__form == 'автоматически':
#                         if age < 12:
#                             edited_string += 'суспензия 30 мг/мл -- '
#                         elif age < 15:
#                             edited_string += 'таб. 200 мг -- '
#                         else:
#                             edited_string += 'таб. 500 мг -- '
#
#                     elif drug_name == 'Ибупрофен' and drug__form == 'автоматически':
#                         if age < 4:
#                             edited_string += 'суспензия 100 мг/5мл -- '
#                         elif age < 12:
#                             edited_string += 'суспензия 200 мг/5мл -- '
#                         else:
#                             edited_string += 'таб. 200 мг -- '
#
#                     else:
#                         if drug__form:
#                             edited_string += f'{drug__form} -- '
#
#                     edited_string += f'{drug__dosa} -- '
#
#                     for marker in data['examination']['selected_drugs'][drug_category][drug_name].get(
#                             'Способ применения', []):
#                         edited_string += marker + ', '
#
#             else:
#                 edited_string = f"{drug_name}: "
#                 for marker in ("Форма", "Дозировка", "Кратность", "Длительность"):
#                     if data['examination']['selected_drugs'][drug_category][drug_name].get(marker, ''):
#                         edited_string += \
#                             data['examination']['selected_drugs'][drug_category][drug_name].get(marker,
#                                                                                                 '') + ' -- '
#                 for marker in data['examination']['selected_drugs'][drug_category][drug_name].get(
#                         'Способ применения', []):
#                     edited_string += marker + ', '
#
#         else:
#             edited_string = f"{drug_name}: "
#             for marker in ("Форма", "Дозировка", "Кратность", "Длительность"):
#                 if data['examination']['selected_drugs'][drug_category][drug_name].get(marker, ''):
#                     edited_string += \
#                         data['examination']['selected_drugs'][drug_category][drug_name].get(marker,
#                                                                                             '') + ' -- '
#             for marker in data['examination']['selected_drugs'][drug_category][drug_name].get(
#                     'Способ применения', []):
#                 edited_string += marker + ', '
#
#         edited_string = edited_string.strip()
#         if edited_string[-1] == ',':
#             edited_string = edited_string[:-1]
#         elif edited_string[-1] == '-':
#             edited_string = edited_string[:-2]
#
#         deleted_string = ''
#         for string in prescription_text.split('\n'):
#             if string.startswith(drug_name):
#                 deleted_string = string
#                 break
#
#         if deleted_string:
#             prescription_text = prescription_text.replace(deleted_string, edited_string)
#         else:
#             prescription_text += f"\n{edited_string}"
#         txt_prescription.delete(1.0, 'end')
#         txt_prescription.insert(1.0, prescription_text.strip().replace('\n\n', '\n'))
#
#     def open_drugs_root():
#         if not data['examination'].get('is_drugs_root_open'):
#             data['examination']['is_drugs_root_open'] = True
#             drugs_root_main.grid()
#         else:
#             data['examination']['is_drugs_root_open'] = False
#             drugs_root_main.grid_remove()
#
#     def create_drugs_root():
#
#         def create_recipe():
#             drug_category, drug_name, marker_rp = selected_button.get().split('__')
#             selected_button.set('')
#
#             print(drug_name, marker_rp)
#             prescription_text = txt_prescription.get(1.0, 'end').strip().split('\n')
#             edited_string = ''
#             for string in prescription_text:
#                 if string.startswith(f"{drug_name}: "):
#                     edited_string = string
#             if not edited_string:
#                 messagebox.showerror("Ошибка!", "Перед созданием рецепта выберите препарат \n"
#                                                 "(форма/дозировка/способ применения)")
#             elif (drug_category == 'ОРИ'
#                   and drug_name in ('Парацетамол', 'Ибупрофен')
#                   and data['examination']['selected_drugs'][drug_category][drug_name].get("Форма", '') == 'автоматически'):
#                 messagebox.showerror("Ошибка!", "Выберите определенную форму лекарства")
#
#             else:
#
#                 d_t_d_n = '1 (одна упаковка)'
#                 drug_name_short = edited_string.split('--')[0].strip()
#
#
#                 if data['examination']['selected_drugs'][drug_category][drug_name].get("Форма", ''):
#                     form = data['examination']['selected_drugs'][drug_category][drug_name].get("Форма", '')
#                     if recipe_data.get(drug_category, dict()).get(drug_name, dict()).get(form):
#                         d_t_d_n = recipe_data[drug_category][drug_name].get(form)
#
#                 signatura = edited_string.replace(drug_name_short, '').replace('--', '-').replace('  ', ' ')
#                 signatura = signatura.replace('выписан рецепт', '').replace('выписан льготный рецепт', '').strip()
#                 if signatura.startswith('-'):
#                     signatura = signatura[1:]
#                 signatura = signatura.replace(' ,', '').strip()
#                 if 'суппозитории' in edited_string:
#                     signatura = f"Ректально {signatura}"
#                 elif (drug_category != 'Бронхолитики'
#                         and drug_category != 'Глазные капли'
#                         and 'капли' not in drug_name
#                         and 'спрей' not in drug_name
#                         and 'Внутримышечно' not in signatura
#                         and 'ингалляц' not in signatura):
#                     signatura = f"Принимать внутрь {signatura}"
#
#                 render_data.clear()
#
#                 render_data['date'] = datetime.now().strftime("%d.%m.%Y")
#                 patient_name = ''
#                 for i in patient.get('name').strip().split():
#                     if not patient_name:
#                         patient_name += f"{i} "
#                     else:
#                         patient_name += f"{i[0]}."
#                 render_data['name_short'] = patient_name
#                 render_data['birth_date'] = patient.get('birth_date')
#                 render_data['doc_name'] = user.get('doctor_name')
#                 render_data['rp'] = f"{drug_name_short}\nD.t.d.n {d_t_d_n}\nS.: {signatura}"
#                 render_data['address'] = patient.get('address')
#                 render_data['drug_name'] = drug_name_short
#
#                 age_txt = ""
#                 if patient_age.get('year') in (2, 3, 4):
#                     age_txt += f" {patient_age.get('year')} года"
#                 elif patient_age.get('year') == 1:
#                     age_txt += f" {patient_age.get('year')} год"
#                 elif patient_age.get('year') > 1:
#                     age_txt += f" {patient_age.get('year')} лет"
#
#                 age_txt += f" {patient_age.get('month')} мес."
#                 render_data['age'] = age_txt
#
#                 doc = DocxTemplate(f".{os.sep}example{os.sep}certificate{os.sep}рецепт_{marker_rp}.docx")
#                 doc.render(render_data)
#                 doc_name = f".{os.sep}generated{os.sep}{patient.get('name').split()[0]}_рецепт.docx"
#                 doc_name = save_document(doc=doc, doc_name=doc_name)
#                 run_document(doc_name)
#
#                 render_data.clear()
#                 data_base(command="statistic_write",
#                           insert_data="Рецепт")
#
#         def select_drugs_category():
#             for drug_category in data['examination'].get("all_drug_frame"):
#                 if '__' not in drug_category:
#                     data['examination']['all_drug_frame'][drug_category].pack_forget()
#             all_drug_frame = data['examination']['all_drug_frame'].get(selected_button.get())
#             all_drug_frame.pack(fill='both', expand=True)
#             all_drug_frame.update_idletasks()
#             print("all_drug_frame", all_drug_frame.winfo_width())
#             data['examination']['canvas_frame_scrolled'].yview_moveto(0)
#
#         def select_drugs_name():
#             if data['examination']['all_drug_frame'].get(selected_button.get()):
#                 edit_frame, marker = data['examination']['all_drug_frame'].get(selected_button.get())
#                 if marker:
#                     edit_frame.pack_forget()
#                     data['examination']['all_drug_frame'][selected_button.get()][1] = False
#                     edit_frame = data['examination']['all_drug_frame'][selected_button.get().split("__")[0]]
#                     edit_frame.columnconfigure(index='all', minsize=40, weight=1)
#                     edit_frame.rowconfigure(index='all', minsize=20)
#                     for drug_category in data['examination'].get("all_drug_frame"):
#                         if '__' not in drug_category:
#                             data['examination']['all_drug_frame'][drug_category].rowconfigure(index='all', minsize=20)
#                         else:
#                             data['examination']['all_drug_frame'][drug_category][0].rowconfigure(index='all',
#                                                                                                  minsize=20)
#
#
#
#                 else:
#                     data['examination']['all_drug_frame'][selected_button.get()][1] = True
#                     edit_frame.columnconfigure(index='all', minsize=40, weight=1)
#                     edit_frame.rowconfigure(index='all', minsize=20)
#
#                     edit_frame.pack(fill='both', expand=True)
#
#         def create_scroller_frame(master_frame, func):
#             def resize(event):
#                 region = canvas.bbox(tk.ALL)
#                 canvas.configure(scrollregion=region)
#
#             def on_binds(event):
#                 canvas.idbind = canvas.bind_all("<MouseWheel>", on_mousewheel)
#
#             def off_binds(event=None):
#                 canvas.unbind_all("<MouseWheel>")
#
#             def on_mousewheel(event):
#
#                 region = canvas.bbox(tk.ALL)
#                 canvas.configure(scrollregion=region)
#
#                 if os.name == 'posix':
#                     canvas.yview_scroll(int(-1 * event.delta), "units")
#                 else:
#                     canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
#
#             scroll_x = tk.Scrollbar(master_frame, orient=tk.HORIZONTAL)
#             scroll_y = tk.Scrollbar(master_frame, orient=tk.VERTICAL)
#
#             canvas = tk.Canvas(master_frame,
#                                xscrollcommand=scroll_x.set,
#                                yscrollcommand=scroll_y.set)
#             scroll_x.config(command=canvas.xview)
#             scroll_y.config(command=canvas.yview)
#
#             canvas_frame = Frame(canvas)
#
#             data['examination']['canvas_frame_scrolled'] = canvas
#
#             func(canvas_frame)
#             #
#             # canvas['width'] = int(canvas.winfo_geometry().split('x')[0])
#             # canvas_frame['width'] = int(canvas.winfo_geometry().split('x')[0])
#
#             canvas.grid(row=0, column=0, sticky="nsew")
#             scroll_x.grid(row=1, column=0, sticky="we")
#             scroll_y.grid(row=0, column=1, sticky="ns")
#
#             master_frame.rowconfigure(0, weight=1)
#             master_frame.columnconfigure(0, weight=1)
#
#             master_frame.bind("<Configure>", resize)
#             master_frame.update_idletasks()
#
#             canvas.bind("<Enter>", on_binds)
#             canvas.bind("<Leave>", off_binds)
#
#             canvas.create_window((0, 0), window=canvas_frame, anchor="nw",
#                                  width=canvas.winfo_width())
#
#         def create_drugs_frame(frame):
#
#             for drug_category in all_data_diagnosis.get("drugs"):
#                 all_drug_frame = Frame(frame, bg="#36566d")
#
#                 for drugs in all_data_diagnosis["drugs"].get(drug_category):
#                     drug_name = drugs[0]
#                     drug_frame = Frame(all_drug_frame)
#                     drug_name_btn_text = drug_name
#                     if drug_name == 'Амоксициллин + клавулановая кислота':
#                         drug_name_btn_text = 'Амоксициллин\n+ клавулановая кислота'
#                     elif drug_name == 'Бромгексин+Гвайфенезин+Сальбутамол+Ментол (Джосет)':
#                         drug_name_btn_text = 'Бромгексин + Гвайфенезин \n+ Сальбутамол + Ментол \n(Джосет)'
#                     elif '- капли' in drug_name_btn_text:
#                         drug_name_btn_text = drug_name_btn_text.replace('- капли', '\n- капли')
#                     elif '- мазь' in drug_name_btn_text:
#                         drug_name_btn_text = drug_name_btn_text.replace('- мазь', '\n- мазь')
#
#
#                     elif drug_name == 'Бромгексин+Гвайфенезин+Сальбутамол+Ментол (Джосет)':
#                         drug_name_btn_text = 'Бромгексин + Гвайфенезин \n+ Сальбутамол + Ментол \n(Джосет)'
#
#                     elif '(' in drug_name_btn_text:
#                         drug_name_btn_text = drug_name_btn_text.replace('(', '\n(')
#
#                     btn = Radiobutton(drug_frame, text=f'{drug_name_btn_text}',
#                                       font=('Comic Sans MS', user.get('text_size')),
#                                       value=f"{drug_category}__{drug_name}", variable=selected_button,
#                                       command=select_drugs_name,
#                                       indicatoron=False, selectcolor='#77f1ff')
#                     btn.pack(fill='both', expand=True)
#
#                     drug_frame_add = Frame(drug_frame)
#                     mark_flag = ''
#                     for mark in drugs[1:]:
#                         if mark in ("Форма", "Дозировка", "Кратность", "Длительность", "Способ применения"):
#                             mark_flag = mark
#                             Label(drug_frame_add, text=f"{mark}",
#                                   font=('Comic Sans MS', user.get('text_size')),
#                                   bg="#36566d", fg='white').pack(fill='both', expand=True)
#                         elif mark.startswith('Инструкция'):
#                             Label(drug_frame_add, text=f"{mark}",
#                                   font=('Comic Sans MS', user.get('text_size')),
#                                   bg="#36566d", fg='white').pack(fill='both', expand=True, pady=2)
#
#
#                         else:
#                             btn_text = ''
#                             for i in mark.split():
#                                 if len(btn_text.split('\n')[-1]) > 30:
#                                     btn_text += '\n'
#                                 btn_text += f"{i} "
#                             btn = Radiobutton(drug_frame_add, text=f'{btn_text}',
#                                               font=('Comic Sans MS', user.get('text_size')),
#                                               value=f"{drug_category}__{drug_name}__{mark_flag}__{mark}",
#                                               variable=selected_button,
#                                               command=select_drugs_item,
#                                               indicatoron=False, selectcolor='#77f1ff',
#                                               bg='#cdcdcd')
#                             btn.pack(fill='both', expand=True)
#                             data['examination']['all_drug_buttons'][f"{drug_category}__{drug_name}__{mark_flag}__" \
#                                                                     f"{mark}"] = btn
#
#                     Label(drug_frame_add, text="Рецепты:",
#                           font=('Comic Sans MS', user.get('text_size')),
#                           bg="#36566d", fg='white').pack(fill='both', expand=True)
#
#                     Radiobutton(drug_frame_add, text=f'Выписать простой рецепт',
#                                 font=('Comic Sans MS', user.get('text_size')),
#                                 value=f"{drug_category}__{drug_name}__простой_а6",
#                                 variable=selected_button,
#                                 command=create_recipe,
#                                 indicatoron=False, selectcolor='#77f1ff',
#                                 bg='#cdcdcd').pack(fill='both', expand=True)
#
#                     Radiobutton(drug_frame_add, text=f'Выписать льготный рецепт',
#                                 font=('Comic Sans MS', user.get('text_size')),
#                                 value=f"{drug_category}__{drug_name}__льготный_а6",
#                                 variable=selected_button,
#                                 command=create_recipe,
#                                 indicatoron=False, selectcolor='#77f1ff',
#                                 bg='#cdcdcd').pack(fill='both', expand=True)
#
#                     data['examination']['all_drug_frame'][f"{drug_category}__{drug_name}"] = [drug_frame_add, False]
#
#                     drug_frame_add.columnconfigure(index='all', minsize=40, weight=1)
#                     drug_frame_add.rowconfigure(index='all', minsize=20)
#
#                     drug_frame.columnconfigure(index='all', minsize=40, weight=1)
#                     drug_frame.rowconfigure(index='all', minsize=20)
#
#                     drug_frame.pack(fill='both', expand=True, pady=5)
#
#                 data['examination']['all_drug_frame'][drug_category] = all_drug_frame
#
#                 # if len(drugs[0]) > min_width:
#                 #     min_width = len(drugs[0])
#
#                 # all_drug_frame.pack(fill='both', expand=True)
#             drug_category_frame.columnconfigure(index='all', minsize=40, weight=1)
#             drug_category_frame.rowconfigure(index='all', minsize=20)
#
#             drugs_root_main.columnconfigure(index='all', minsize=40, weight=1)
#             drugs_root_main.rowconfigure(index='all', minsize=20)
#
#         data['examination']['all_drug_frame'] = dict()
#
#         drug_category_frame = Frame(drugs_root_main, bg="#36566d")
#         all_drugs_frame_scrolled = Frame(drugs_root_main, bg="#36566d")
#
#         Label(drug_category_frame, text="        Перечень лекарственных препаратов        ",
#               font=('Comic Sans MS', user.get('text_size')),
#               bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3)
#         Button(drug_category_frame, text=f"Закрыть окно препаратов",
#                font=('Comic Sans MS', user.get('text_size')),
#                command=open_drugs_root,
#                bg='#f0fffe').pack(fill='both', expand=True)
#
#         for drug_category in all_data_diagnosis.get("drugs"):
#             btn = Radiobutton(drug_category_frame, text=f'{drug_category}',
#                               font=('Comic Sans MS', user.get('text_size')),
#                               value=drug_category, variable=selected_button,
#                               command=select_drugs_category,
#                               indicatoron=False, selectcolor='#77f1ff',
#                               bg="#36566d", fg='white')
#
#             btn.pack(fill='x', expand=True)
#
#         drug_category_frame.pack(fill='x', anchor='nw')
#         all_drugs_frame_scrolled.pack(fill='both', expand=True)
#         data['examination']['is_drugs_root_open'] = False
#         data['examination']['all_drug_buttons'] = dict()
#
#
#
#         drugs_root_main.grid(row=0, column=3, sticky="nwse")
#         create_scroller_frame(master_frame=all_drugs_frame_scrolled, func=create_drugs_frame)
#
#         drugs_root_main.grid_remove()
#
#     drugs_root_main = Frame(master=root_examination, padx=3, pady=3)
#     drugs_root_main.update_idletasks()
#     create_drugs_root()
#
#
#     def open_dispanser_root():
#         if not data['examination'].get('is_dispanser_root_open'):
#             data['examination']['is_dispanser_root_open'] = True
#             dispanser_root_main.grid()
#         else:
#             data['examination']['is_dispanser_root_open'] = False
#             dispanser_root_main.grid_remove()
#
#     def create_dispanser_root():
#         def celect_dispanser():
#             txt_prescription.insert('end', f"\nОбсленование и наблюдение согласно постановлению МЗ РБ № 1201:"
#                                            f"\n{celected_code.get()}")
#             open_dispanser_root()
#
#         def search_mkb(event=None):
#             def resize(event=None):
#                 region = canvas.bbox(tk.ALL)
#                 canvas.configure(scrollregion=region)
#
#             def on_binds(event):
#                 canvas.idbind = canvas.bind_all("<MouseWheel>", on_mousewheel)
#
#             def off_binds(event=None):
#                 canvas.unbind_all("<MouseWheel>")
#
#             def on_mousewheel(event):
#
#                 region = canvas.bbox(tk.ALL)
#                 canvas.configure(scrollregion=region)
#
#                 if os.name == 'posix':
#                     canvas.yview_scroll(int(-1 * event.delta), "units")
#                 else:
#                     canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
#
#             if data['examination'].get('frame_found_data_dispanser'):
#                 frame_found_data_dispanser = data['examination'].get('frame_found_data_dispanser')
#                 frame_found_data_dispanser.destroy()
#             master_frame = Frame(mkb_frame_scrolled)
#             data['examination']['frame_found_data_dispanser'] = master_frame
#             master_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#             found_data = list()
#             mkb_code_edit = ''
#             mkb_name_edit = mkb_name.get()
#
#             if mkb_code.get():
#                 word_list = ["qwertyuiopasdfghjkl;'zxcvbnm,.", "йцукенгшщзфывапролджэячсмитьбю"]
#
#                 for word in mkb_code.get().lower():
#                     if word in word_list[1]:
#                         mkb_code_edit += word_list[0][word_list[1].index(word)]
#                     elif word == ',':
#                         mkb_code_edit += '.'
#                     else:
#                         mkb_code_edit += word
#                 mkb_code_edit = mkb_code_edit.upper()
#
#             if mkb_code_edit and mkb_name_edit:
#                 for dispanser_data in post_1201:
#                     key = dispanser_data.get('mkb_key')
#                     value = dispanser_data.get('Наименование заболевания')
#
#                     if mkb_code_edit in key and mkb_name_edit.lower() in value.lower():
#                         found_data.append(dispanser_data)
#             elif mkb_code_edit:
#                 for dispanser_data in post_1201:
#                     key = dispanser_data.get('mkb_key')
#                     if mkb_code_edit in key:
#                         found_data.append(dispanser_data)
#             elif mkb_name_edit:
#                 for dispanser_data in post_1201:
#                     value = dispanser_data.get('Наименование заболевания')
#                     if mkb_name_edit.lower() in value.lower():
#                         found_data.append(dispanser_data)
#
#             if found_data:
#
#                 scroll_x = tk.Scrollbar(master_frame, orient=tk.HORIZONTAL)
#                 scroll_y = tk.Scrollbar(master_frame, orient=tk.VERTICAL)
#
#                 canvas = tk.Canvas(master_frame,
#                                    xscrollcommand=scroll_x.set,
#                                    yscrollcommand=scroll_y.set)
#                 scroll_x.config(command=canvas.xview)
#                 scroll_y.config(command=canvas.yview)
#
#                 canvas_frame = Frame(canvas)
#
#                 for dispanser_data in found_data:
#                     dispanser_data = f"Наименование заболевания: " \
#                                      f"{dispanser_data.get('Наименование заболевания')}\n" \
#                                      f"Сроки и кратность медицинских обследований: " \
#                                      f"{dispanser_data.get('Сроки и кратность медицинских обследований')}\n" \
#                                      f"Сроки наблюдения за пациентом: " \
#                                      f"{dispanser_data.get('Сроки наблюдения за пациентом')}"
#
#                     but_text = ''
#                     for i in dispanser_data.split(" "):
#                         if len(but_text.split('\n')[-1]) > 60:
#                             but_text += '\n'
#                         but_text += i + ' '
#                     Radiobutton(canvas_frame, text=but_text,
#                                 font=('Comic Sans MS', user.get('text_size')),
#                                 value=f"{dispanser_data}",
#                                 variable=celected_code,
#                                 command=celect_dispanser,
#                                 indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                                 ).pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#                 # canvas_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#                 canvas['width'] = int(canvas.winfo_geometry().split('x')[0])
#                 canvas_frame['width'] = int(canvas.winfo_geometry().split('x')[0])
#                 canvas.grid(row=0, column=0, sticky="nsew")
#                 scroll_x.grid(row=1, column=0, sticky="we")
#                 scroll_y.grid(row=0, column=1, sticky="ns")
#
#                 master_frame.rowconfigure(0, weight=1)
#                 master_frame.columnconfigure(0, weight=1)
#
#                 master_frame.bind("<Configure>", resize)
#                 master_frame.update_idletasks()
#                 canvas_frame['height'] = int(dispanser_root_main.winfo_height() - frame_main_dispanser.winfo_height())
#
#                 canvas.bind("<Enter>", on_binds)
#                 canvas.bind("<Leave>", off_binds)
#
#                 canvas.create_window((0, 0), window=canvas_frame, anchor="nw",
#                                      width=canvas.winfo_width())
#
#             else:
#                 Label(master_frame, text="Поиск не дал результатов!",
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#         mkb_code = StringVar()
#         mkb_name = StringVar()
#         celected_code = StringVar()
#
#         frame_main_dispanser = Frame(dispanser_root_main, bg="#36566d")
#         Label(frame_main_dispanser, text="Поиск по постановлению 1201",
#               font=('Comic Sans MS', user.get('text_size')),
#               bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#         Button(frame_main_dispanser, text=f"Закрыть окно",
#                font=('Comic Sans MS', user.get('text_size')),
#                command=open_dispanser_root,
#                bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#         mkb_title_frame = Frame(frame_main_dispanser, bg="#36566d")
#         Label(mkb_title_frame, text="Код (МКБ-10): ",
#               font=('Comic Sans MS', user.get('text_size')),
#               bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, side='left')
#         txt_mkb = Entry(mkb_title_frame, width=10,
#                         font=('Comic Sans MS', user.get('text_size')),
#                         justify="center",
#                         textvariable=mkb_code)
#         txt_mkb.pack(fill='x', expand=True, pady=3, padx=3, side='left')
#         txt_mkb.bind('<Return>', search_mkb)
#
#         Label(mkb_title_frame, text="Нозология: ",
#               font=('Comic Sans MS', user.get('text_size')),
#               bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, side='left')
#         txt_mkb = Entry(mkb_title_frame, width=30,
#                         font=('Comic Sans MS', user.get('text_size')),
#                         textvariable=mkb_name)
#         txt_mkb.pack(fill='x', expand=True, pady=3, padx=3, side='left')
#         txt_mkb.bind('<Return>', search_mkb)
#
#         mkb_title_frame.pack(fill='x', anchor='n')
#         frame_main_dispanser.pack(fill='x', anchor='n')
#
#         mkb_frame_scrolled = Frame(dispanser_root_main)
#         mkb_frame_scrolled.pack(fill='both', expand=True)
#
#         data['examination']['is_dispanser_root_open'] = False
#         dispanser_root_main.grid(row=0, column=3, sticky="nwse")
#
#         dispanser_root_main.grid_remove()
#
#     dispanser_root_main = Frame(master=root_examination, padx=3, pady=3, bg="#36566d")
#     dispanser_root_main.update_idletasks()
#     create_dispanser_root()
#
#     def paste_prescription_kb():
#
#         data['examination']['open_prescription_kb'] = 'open'
#         data['examination']['prescription_frame'] = dict()
#         data['examination']['prescription_buttons_color'] = dict()
#
#         data['examination']['prescription_but_ab_value'] = dict()
#
#         for mark_group_main in all_data_diagnosis.get('prescription'):
#             frame_loc = Frame(frame_prescription_buttons, borderwidth=1)
#             Radiobutton(frame_loc, text=f"{mark_group_main[0]}",
#                         font=('Comic Sans MS', user.get('text_size')),
#                         value=f"{mark_group_main[0]}",
#                         variable=selected_prescription_frame,
#                         command=select_prescription_frame,
#                         indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                         ).pack(fill='both', expand=True)
#             row, col = 0, 0
#             frame_loc_but = Frame(frame_loc, borderwidth=1)
#             data['examination']['prescription_frame'][mark_group_main[0]] = frame_loc_but
#             for mark_group in mark_group_main[1:]:
#                 frame = Frame(frame_loc_but)
#                 for mark_2 in mark_group:
#                     data['examination']['prescription_but'][f"{mark_group_main[0]}_{mark_2}"] = IntVar()
#                     btn = Radiobutton(frame, text=f"{mark_2}",
#                                       font=('Comic Sans MS', user.get('text_size')),
#                                       value=f"{mark_group_main[0]}_{mark_2}",
#                                       variable=selected_button,
#                                       command=select_prescription,
#                                       indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#                     btn.pack(fill='both', expand=True, side='left')
#                     data['examination']['prescription_buttons_color'][f"{mark_group_main[0]}_{mark_2}"] = btn
#                 frame.pack(fill='both', expand=True)
#
#             # if mark[0] == 'Разрешена вакцинация':
#             #     loc_vac_data_main = list()
#             #     loc_vac_data = list()
#             #     for mark_2 in mark[1:]:
#             #         if mark_2 == '\n':
#             #             loc_vac_data_main.append(loc_vac_data.copy())
#             #             loc_vac_data.clear()
#             #         else:
#             #             loc_vac_data.append(mark_2)
#             #     for mark_group in loc_vac_data_main:
#             #         loc_vac_frame = Frame(frame_loc_but)
#             #         for mark_2 in mark_group:
#             #             btn = Radiobutton(loc_vac_frame, text=f"{mark_2}",
#             #                               font=('Comic Sans MS', user.get('text_size')),
#             #                               value=f"{mark[0]}_{mark_2}",
#             #                               variable=selected_button,
#             #                               command=select_prescription,
#             #                               indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#             #
#             #             btn.pack(fill='both', expand=True, side='left')
#             #             data['examination']['prescription_buttons_color'][f"{mark[0]}_{mark_2}"] = btn
#             #         loc_vac_frame.pack(fill='both', expand=True)
#             # else:
#             #     for mark_2 in mark[1:]:
#             #         btn = Radiobutton(frame_loc_but, text=f"{mark_2}",
#             #                           font=('Comic Sans MS', user.get('text_size')),
#             #                           value=f"{mark[0]}_{mark_2}",
#             #                           variable=selected_button,
#             #                           command=select_prescription,
#             #                           indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#             #
#             #         btn.grid(row=row, column=col, sticky='ew')
#             #         data['examination']['prescription_buttons_color'][f"{mark[0]}_{mark_2}"] = btn
#             #
#             #         col += 1
#             #         if col == 6:
#             #             col = 0
#             #             row += 1
#
#             frame_loc_but.columnconfigure(index='all', minsize=40, weight=1)
#             frame_loc_but.rowconfigure(index='all', minsize=20)
#
#             frame_loc.columnconfigure(index='all', minsize=40, weight=1)
#             frame_loc.rowconfigure(index='all', minsize=20)
#             frame_loc.pack(fill='both', expand=True)
#
#         Button(frame_prescription_buttons, text=f"Анализы",
#                font=('Comic Sans MS', user.get('text_size')),
#                command=open_analyzes_root,
#                bg='#f0fffe').pack(fill='both', expand=True)
#
#         Button(frame_prescription_buttons, text=f"Консультация",
#                font=('Comic Sans MS', user.get('text_size')),
#                command=open_consultation_root,
#                bg='#f0fffe').pack(fill='both', expand=True)
#
#         Button(frame_prescription_buttons, text=f"Препараты",
#                font=('Comic Sans MS', user.get('text_size')),
#                command=open_drugs_root,
#                bg='#f0fffe').pack(fill='both', expand=True)
#
#         Button(frame_prescription_buttons, text=f"Диспансеризация \n(пост. 1201)",
#                font=('Comic Sans MS', user.get('text_size')),
#                command=open_dispanser_root,
#                bg='#f0fffe').pack(fill='both', expand=True)
#
#         Button(frame_prescription_buttons, text=f"Справка",
#                font=('Comic Sans MS', user.get('text_size')),
#                command=fast_certificate,
#                bg='#f0fffe').pack(fill='both', expand=True)
#
#         # data['examination']['prescription_frame']['Препараты'] = frame_prescription_buttons_drugs_buttons
#
#         frame_prescription_buttons.columnconfigure(index='all', minsize=40, weight=1)
#         frame_prescription_buttons.rowconfigure(index='all', minsize=20)
#         frame_prescription_buttons.pack(fill='both', expand=True, padx=2, pady=2)
#
#         # frame_prescription_buttons_drugs_main.columnconfigure(index='all', minsize=40, weight=1)
#         # frame_prescription_buttons_drugs_main.rowconfigure(index='all', minsize=20)
#         # frame_prescription_buttons_drugs_main.pack(fill='both', expand=True, padx=2, pady=2)
#
#     # def paste_prescription_kb():
#     #
#     #     data['examination']['open_prescription_kb'] = 'open'
#     #     data['examination']['prescription_frame'] = dict()
#     #     data['examination']['prescription_buttons_color'] = dict()
#     #
#     #     data['examination']['prescription_but_ab_value'] = dict()
#     #
#     #     for mark in all_data_diagnosis.get('prescription'):
#     #         frame_loc = Frame(frame_prescription_buttons, borderwidth=1)
#     #         btn = Radiobutton(frame_loc, text=f"{mark[0]}",
#     #                           font=('Comic Sans MS', user.get('text_size')),
#     #                           value=f"{mark[0]}", variable=selected_prescription_frame,
#     #                           command=select_prescription_frame,
#     #                           indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#     #         btn.pack(fill='both', expand=True)
#     #         row, col = 0, 0
#     #         frame_loc_but = Frame(frame_loc, borderwidth=1)
#     #         data['examination']['prescription_frame'][mark[0]] = frame_loc_but
#     #         if mark[0] == 'Разрешена вакцинация':
#     #             loc_vac_data_main = list()
#     #             loc_vac_data = list()
#     #             for mark_2 in mark[1:]:
#     #                 if mark_2 == '\n':
#     #                     loc_vac_data_main.append(loc_vac_data.copy())
#     #                     loc_vac_data.clear()
#     #                 else:
#     #                     loc_vac_data.append(mark_2)
#     #             for mark_group in loc_vac_data_main:
#     #                 loc_vac_frame = Frame(frame_loc_but)
#     #                 for mark_2 in mark_group:
#     #                     btn = Radiobutton(loc_vac_frame, text=f"{mark_2}",
#     #                                       font=('Comic Sans MS', user.get('text_size')),
#     #                                       value=f"{mark[0]}_{mark_2}",
#     #                                       variable=selected_button,
#     #                                       command=select_prescription,
#     #                                       indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#     #
#     #                     btn.pack(fill='both', expand=True, side='left')
#     #                     data['examination']['prescription_buttons_color'][f"{mark[0]}_{mark_2}"] = btn
#     #                 loc_vac_frame.pack(fill='both', expand=True)
#     #         else:
#     #             for mark_2 in mark[1:]:
#     #                 btn = Radiobutton(frame_loc_but, text=f"{mark_2}",
#     #                                   font=('Comic Sans MS', user.get('text_size')),
#     #                                   value=f"{mark[0]}_{mark_2}",
#     #                                   variable=selected_button,
#     #                                   command=select_prescription,
#     #                                   indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#     #
#     #                 btn.grid(row=row, column=col, sticky='ew')
#     #                 data['examination']['prescription_buttons_color'][f"{mark[0]}_{mark_2}"] = btn
#     #
#     #                 col += 1
#     #                 if col == 6:
#     #                     col = 0
#     #                     row += 1
#     #
#     #         frame_loc_but.columnconfigure(index='all', minsize=40, weight=1)
#     #         frame_loc_but.rowconfigure(index='all', minsize=20)
#     #
#     #         frame_loc.columnconfigure(index='all', minsize=40, weight=1)
#     #         frame_loc.rowconfigure(index='all', minsize=20)
#     #         frame_loc.pack(fill='both', expand=True)
#     #
#     #     Button(frame_prescription_buttons, text=f"Анализы",
#     #            font=('Comic Sans MS', user.get('text_size')),
#     #            command=open_analyzes_root,
#     #            bg='#f0fffe').pack(fill='both', expand=True)
#     #
#     #     Button(frame_prescription_buttons, text=f"Консультация",
#     #            font=('Comic Sans MS', user.get('text_size')),
#     #            command=open_consultation_root,
#     #            bg='#f0fffe').pack(fill='both', expand=True)
#     #
#     #
#     #     Button(frame_prescription_buttons, text=f"Препараты",
#     #            font=('Comic Sans MS', user.get('text_size')),
#     #            command=open_drugs_root,
#     #            bg='#f0fffe').pack(fill='both', expand=True)
#     #
#     #     Button(frame_prescription_buttons, text=f"Диспансеризация \n(пост. 1201)",
#     #            font=('Comic Sans MS', user.get('text_size')),
#     #            command=open_dispanser_root,
#     #            bg='#f0fffe').pack(fill='both', expand=True)
#     #
#     #     Button(frame_prescription_buttons, text=f"Справка",
#     #            font=('Comic Sans MS', user.get('text_size')),
#     #            command=fast_certificate,
#     #            bg='#f0fffe').pack(fill='both', expand=True)
#     #
#     #
#     #
#     #     # data['examination']['prescription_frame']['Препараты'] = frame_prescription_buttons_drugs_buttons
#     #
#     #     frame_prescription_buttons.columnconfigure(index='all', minsize=40, weight=1)
#     #     frame_prescription_buttons.rowconfigure(index='all', minsize=20)
#     #     frame_prescription_buttons.pack(fill='both', expand=True, padx=2, pady=2)
#     #
#     #     # frame_prescription_buttons_drugs_main.columnconfigure(index='all', minsize=40, weight=1)
#     #     # frame_prescription_buttons_drugs_main.rowconfigure(index='all', minsize=20)
#     #     # frame_prescription_buttons_drugs_main.pack(fill='both', expand=True, padx=2, pady=2)
#
#     def change_prescription_kb_status():
#         if data['examination'].get('open_prescription_kb') == 'open':
#             data['examination']['open_prescription_kb'] = 'closed'
#             change_prescription_kb_button['text'] = 'открыть клавиатуру рекомендаций'
#             txt_prescription['height'] = 4
#             txt_prescription['width'] = 70
#             frame_prescription_buttons.pack_forget()
#
#         else:
#             data['examination']['open_prescription_kb'] = 'open'
#             frame_prescription_buttons.pack(fill='both', expand=True, padx=2, pady=2)
#             change_prescription_kb_button['text'] = 'закрыть клавиатуру рекомендаций'
#             txt_prescription['height'] = 8
#             txt_prescription['width'] = 60
#
#             edit_examination_kb_text()
#
#     frame_prescription = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#     frame_prescription_main = Frame(frame_prescription, padx=1, pady=1)
#     frame_prescription_buttons = Frame(frame_prescription, padx=1, pady=1)
#     # frame_prescription_buttons_drugs_main = Frame(frame_prescription_buttons, padx=1, pady=1)
#     # frame_prescription_buttons_drugs_buttons = Frame(frame_prescription_buttons_drugs_main, padx=1, pady=1)
#
#     txt_prescription = ScrolledText(frame_prescription_main, width=15, height=16,
#                                     font=('Comic Sans MS', user.get('text_size')),
#                                     wrap="word")
#     change_prescription_kb_button = Button(frame_prescription_main, text='скрыть клавиатуру рекомендаций',
#                                            command=change_prescription_kb_status,
#                                            font=('Comic Sans MS', user.get('text_size')))
#
#     paste_frame_prescription()
#
#     def write_ln():
#         data['examination']['LN_data']['type_doc'] = selected_button.get()
#
#         def save():
#             def check_input():
#                 error_flag = False
#
#                 for marker in data['examination']['LN_data'].get('current_data'):
#                     if marker in ("Фамилия", "Имя", "Дата рождения", "Адрес места жительства",
#                                   'Место работы (службы, учебы)') and not data['examination']['LN_data']['current_data'].get(marker).get():
#                         messagebox.showerror('Ошибка', f"Ошибка!\nНе указан пункт\n'{marker}'")
#                         return False
#                     elif marker == "Дата рождения":
#                         try:
#                             if get_age(data['examination']['LN_data']['current_data'].get(marker).get()) < 0:
#                                 messagebox.showerror('Ошибка', f"Дата рождения не может быть больше текущей даты!")
#                                 return False
#                         except Exception:
#                             messagebox.showerror('Ошибка', f"Дата рождения должна быть в формате 'ДД.ММ.ГГ'")
#                             return False
#                     elif marker in ("Дата выдачи", "Дата начала ВН", "Дата окончания ВН"):
#                         try:
#                             get_age(data['examination']['LN_data']['current_data'].get(marker).get())
#                         except Exception:
#                             messagebox.showerror('Ошибка', f"{marker} должна быть в формате 'ДД.ММ.ГГ'")
#                             return False
#
#                 return True
#
#
#             if check_input():
#                 render_data.clear()
#                 txt_ln_from.delete(0, 'end')
#                 txt_ln_from.insert(0, data['examination']['LN_data']['current_data'].get("Дата начала ВН").get().strip())
#
#                 txt_ln_until.delete(0, 'end')
#                 txt_ln_until.insert(0, data['examination']['LN_data']['current_data'].get("Дата окончания ВН").get().strip())
#
#                 txt_second_examination.delete(0, 'end')
#                 txt_second_examination.insert(0, data['examination']['LN_data']['current_data'].get("Дата окончания ВН").get().strip())
#
#
#                 data['examination']['LN_data']['current_data']['save'] = True
#                 render_data['patient_info_1'] = \
#                     data['examination']['LN_data']['current_data'].get('Информация про ребенка (в корешок)').get().strip()
#                 render_data['patient_info_2'] = \
#                     data['examination']['LN_data']['current_data'].get('Особые отметки').get().strip()
#                 render_data['parent_name_full'] = \
#                     f"{data['examination']['LN_data']['current_data'].get('Фамилия').get().strip()} " \
#                     f"{data['examination']['LN_data']['current_data'].get('Имя').get().strip()} " \
#                     f"{data['examination']['LN_data']['current_data'].get('Отчество').get().strip()}"
#                 render_data['address'] = \
#                     data['examination']['LN_data']['current_data'].get('Адрес места жительства').get().strip()
#                 render_data['work'] = \
#                     data['examination']['LN_data']['current_data'].get('Место работы (службы, учебы)').get().strip()
#                 render_data['doctor_name'] = \
#                     user.get('doctor_name').split()[0]
#
#                 for marker_1, marker_2 in (('d_open', 'Дата выдачи'), ('d_from', 'Дата начала ВН'),
#                                            ('d_until', 'Дата окончания ВН'),
#                                            ('b_d_1', 'Дата рождения'), ('b_d_2', 'Дата рождения'),
#                                            ('parent_name_1', 'Фамилия'), ('parent_name_2', 'Имя'),
#                                            ('parent_name_3', 'Отчество')):
#                     if marker_1 in ('d_open', 'd_from', 'd_until', 'b_d_1', 'b_d_2'):
#                         date = ''
#                         for word in data['examination']['LN_data']['current_data'].get(marker_2).get().strip():
#                             if word.isdigit():
#                                 date += word
#                             else:
#                                 date += '.'
#                         date = date.split('.')
#                         if len(date[-1]) == 4:
#                             year = date.pop(-1)
#                             date.append(f"{year[-2]}{year[-1]}")
#                         date = ''.join(date)
#                         text = list()
#                         for word in date:
#                             text.append(word)
#                         render_data[marker_1] = '  '.join(text)
#                     else:
#                         text = list()
#                         for word in data['examination']['LN_data']['current_data'].get(marker_2).get().strip():
#                             text.append(word)
#                         if marker_1 in ('parent_name_1', 'parent_name_2', 'parent_name_3'):
#                             render_data[marker_1] = '  '.join(text)
#                         else:
#                             render_data[marker_1] = ' '.join(text)
#
#                 doc = DocxTemplate(f".{os.sep}example{os.sep}certificate{os.sep}"
#                                    f"БЛАНК_ВН_{selected_type_ln.get().replace(' ', '_'.capitalize())}.docx")
#                 doc.render(render_data)
#                 doc_name = f".{os.sep}generated{os.sep}БЛАНК_ВН_{patient.get('name', '').split()[0]}.docx"
#                 doc_name = save_document(doc=doc, doc_name=doc_name)
#
#                 render_data.clear()
#                 run_document(doc_name)
#                 new_root.destroy()
#                 data_base(command="statistic_write",
#                           insert_data="Документ ВН")
#
#         def select_last_data():
#             last_info = selected_button.get()
#             for marker in data['examination']['LN_data']['last_patient_ln'].get(last_info, []):
#                 if data['examination']['LN_data']['current_data'].get(marker):
#                     data['examination']['LN_data']['current_data'][marker].set(
#                         data['examination']['LN_data']['last_patient_ln'][last_info].get(marker))
#
#         def calendar_LN():
#             text_field = selected_button.get()
#             selected_button.set('')
#             paste_calendar(text_field=text_field)
#
#
#         if data['examination']['LN_data'].get('ln_root'):
#             data['examination']['LN_data']['ln_root'].destroy()
#
#         new_root = Toplevel()
#         data['examination']['LN_data']['ln_root'] = new_root
#         new_root.title(f"Генерация документа {selected_type_ln.get()} {data['examination']['LN_data'].get('type_doc')}")
#         new_root.bind("<Control-KeyPress>", keypress)
#         if not data['examination']['LN_data'].get('current_data'):
#             data['examination']['LN_data']['current_data'] = {
#                 "Дата выдачи": StringVar(),
#                 "Дата начала ВН": StringVar(),
#                 "Дата окончания ВН": StringVar(),
#                 "Фамилия": StringVar(),
#                 "Имя": StringVar(),
#                 "Отчество": StringVar(),
#                 "Дата рождения": StringVar(),
#                 "Адрес места жительства": StringVar(),
#                 "Место работы (службы, учебы)": StringVar(),
#                 "Информация про ребенка (в корешок)": StringVar(),
#                 "Особые отметки": StringVar(),
#             }
#
#         data['examination']['LN_data']['current_data']['Дата выдачи'].set(datetime.now().strftime("%d.%m.%y"))
#         if txt_ln_from.get().strip():
#             data['examination']['LN_data']['current_data']['Дата начала ВН'].set(txt_ln_from.get().strip())
#         else:
#             data['examination']['LN_data']['current_data']['Дата начала ВН'].set(datetime.now().strftime("%d.%m.%y"))
#         if txt_ln_until.get().strip():
#             data['examination']['LN_data']['current_data']['Дата окончания ВН'].set(txt_ln_until.get().strip())
#         data['examination']['LN_data']['current_data']['Адрес места жительства'].set(patient.get('address', ''))
#
#         if 'по уходу' in data['examination']['LN_data'].get('type_doc'):
#             try:
#                 data['examination']['LN_data']['current_data'][
#                     'Информация про ребенка (в корешок)'].set(
#                     f"{' '.join(patient.get('name', ' ').strip().split()[:-1])} {patient.get('birth_date', '')}")
#                 data['examination']['LN_data']['current_data'][
#                     'Особые отметки'].set(
#                     f"{patient.get('name', ' ').strip().split()[1]} {patient.get('birth_date', '')}")
#             except IndexError:
#                 data['examination']['LN_data']['current_data'][
#                     'Информация про ребенка (в корешок)'].set(
#                     f"{patient.get('name', ' ')} {patient.get('birth_date', '')}")
#                 data['examination']['LN_data']['current_data'][
#                     'Особые отметки'].set(
#                     f"{patient.get('name', ' ')} {patient.get('birth_date', '')}")
#
#
#         if 'по болезни' in data['examination']['LN_data'].get('type_doc'):
#             data['examination']['LN_data']['current_data']['Дата рождения'].set(patient.get('birth_date', ''))
#             if len(patient.get('name', ' ').strip().split()) == 3:
#                 data['examination']['LN_data']['current_data']['Фамилия'].set(
#                     patient.get('name').strip().split()[0])
#                 data['examination']['LN_data']['current_data']['Имя'].set(
#                     patient.get('name').strip().split()[1])
#                 data['examination']['LN_data']['current_data']['Отчество'].set(
#                     patient.get('name').strip().split()[2])
#
#             data['examination']['LN_data']['current_data']['Информация про ребенка (в корешок)'].set("")
#             data['examination']['LN_data']['current_data']['Особые отметки'].set("")
#
#         frame_title = Frame(new_root)
#         for marker in ('Дата выдачи', 'Дата начала ВН', 'Дата окончания ВН'):
#             frame = Frame(frame_title)
#             Label(frame, text=f"{marker}:",
#                   font=('Comic Sans MS', user.get('text_size')),
#                   bg="#36566d", fg='white').grid(column=0, row=0, sticky='nwse', padx=2, pady=2, ipadx=3)
#             Entry(frame, width=15, font=('Comic Sans MS', user.get('text_size')),
#                       textvariable=data['examination']['LN_data']['current_data'].get(marker)
#                       ).grid(column=1, row=0, sticky='nwse', ipadx=2, ipady=2)
#             Radiobutton(frame, text="Календарь",
#                         font=('Comic Sans MS', user.get('text_size')),
#                         value=f"ln_root_{marker}__{marker}",
#                         variable=selected_button,
#                         command=calendar_LN,
#                         indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                         ).grid(column=0, row=1, sticky='nwse', ipadx=2, ipady=2, columnspan=2)
#
#             frame.pack(fill='both', expand=True, padx=2, pady=2, side='left')
#         frame_title.pack(fill='both', expand=True, padx=2, pady=2)
#
#         row = 0
#         frame = Frame(new_root)
#         for marker in ('Фамилия', 'Имя', 'Отчество', 'Дата рождения',
#                        'Адрес места жительства', 'Место работы (службы, учебы)',
#                        'Информация про ребенка (в корешок)', 'Особые отметки'):
#             Label(frame, text=marker,
#                   font=('Comic Sans MS', user.get('text_size')),
#                   bg="#36566d", fg='white').grid(column=0, row=row, sticky='nwse', padx=2, pady=2)
#             Entry(frame, width=30, font=('Comic Sans MS', user.get('text_size')),
#                       textvariable=data['examination']['LN_data']['current_data'].get(marker)
#                       ).grid(column=1, row=row, sticky='nwse', ipadx=2, ipady=2)
#             row += 1
#         frame.pack(fill='both', expand=True, padx=2, pady=2)
#         frame.columnconfigure(index='all', minsize=40, weight=1)
#
#         Button(new_root, text='Создать документ', command=save,
#                font=('Comic Sans MS', user.get('text_size'))
#                ).pack(fill='both', expand=True, padx=2, pady=2)
#
#         if data['examination']['LN_data'].get('last_patient_ln'):
#             frame = Frame(new_root)
#             Label(frame, text="Прошлые данные",
#                   font=('Comic Sans MS', user.get('text_size')),
#                   bg="#36566d", fg='white').pack(fill='both', expand=True, padx=2, pady=2)
#
#             for key in data['examination']['LN_data'].get('last_patient_ln'):
#                 Radiobutton(frame, text=key,
#                             font=('Comic Sans MS', user.get('text_size')),
#                             value=f"{key}",
#                             variable=selected_button,
#                             command=select_last_data,
#                             indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                             ).pack(fill='both', expand=True, padx=2, pady=2)
#             frame.pack(fill='both', expand=True, padx=2, pady=2)
#
#         new_root.mainloop()
#
#     def paste_frame_ln():
#         def calendar_ln_from():
#             paste_calendar(text_field='ln_from__Больничный с ...')
#
#         def calendar_ln_until():
#             paste_calendar(text_field='ln_until__Больничный по ...')
#
#         def calendar_second_examination():
#             paste_calendar(text_field='second_examination__Повторный осмотр')
#
#         def select_type_ln():
#             if data['examination'].get('open_frame_ln_my_blanks', '') == 'open':
#                 data['examination']['open_frame_ln_my_blanks'] = 'closed'
#                 frame_ln_my_blanks.pack_forget()
#
#             type_ln = selected_type_ln.get()
#             ln_num = ''
#
#             if type_ln in ("Справка ВН", "Лист ВН"):
#                 last_visit = data['examination']['get_last_patient_ln'].get(type_ln)
#
#                 if last_visit:
#                     ln_num = last_visit.split('__')[1].replace('_', '')
#                     try:
#                         date_from_cont = datetime.strptime(f"{last_visit.split('__')[3]}",
#                                                            "%d.%m.%Y") + timedelta(days=1)
#                         txt_ln_from.delete(0, 'end')
#                         txt_ln_from.insert(0, date_from_cont.strftime("%d.%m.%Y"))
#
#                     except Exception:
#                         txt_ln_from.delete(0, 'end')
#                         txt_ln_from.insert(0, datetime.now().strftime("%d.%m.%Y"))
#
#                 if not ln_num:
#                     open_frame_ln_my_blanks()
#                 else:
#                     txt_ln_num.delete(0, 'end')
#                     if ln_num:
#                         txt_ln_num.insert(0, ln_num)
#
#
#             if type_ln in ("Справка ВН", "Лист ВН"):
#                 lbl_type_ln['text'] = f"{type_ln} номер:"
#                 frame_ln_add.grid(row=0, column=3, rowspan=2, sticky='ew')
#                 but_ln_my_blanks.grid(row=1, column=0, columnspan=3, sticky='ew')
#             else:
#                 frame_ln_add.grid_remove()
#                 but_ln_my_blanks.grid_remove()
#
#
#
#
#         col = 0
#         for but in ("Справка ВН", "Лист ВН", "Уход обеспечен"):
#             btn = Radiobutton(frame_ln, text=but,
#                               font=('Comic Sans MS', user.get('text_size')),
#                               value=but, variable=selected_type_ln, command=select_type_ln,
#                               indicatoron=False, selectcolor='#77f1ff')
#             btn.grid(row=0, column=col, sticky='ew')
#             col += 1
#         selected_type_ln.set('Уход обеспечен')
#         lbl_type_ln.grid(row=0, column=0, sticky='ew')
#
#         txt_ln_num.grid(row=0, column=1, sticky='ew')
#         but_ln_closed.grid(row=1, column=0, columnspan=2, sticky='ew')
#         lbl_ln_from.grid(row=0, column=2, sticky='ew')
#         txt_ln_from.grid(row=0, column=3, sticky='ew')
#         Button(frame_ln_add, text='Календарь', font=('Comic Sans MS', user.get('text_size')),
#                command=calendar_ln_from).grid(row=1, column=3, sticky='ew')
#         Label(master=frame_ln_add, text=" по ",
#               font=('Comic Sans MS', user.get('text_size')), bg='white').grid(row=0, column=4, sticky='ew')
#         txt_ln_until.grid(row=0, column=5, sticky='ew')
#         Button(frame_ln_add, text='Календарь', font=('Comic Sans MS', user.get('text_size')),
#                command=calendar_ln_until).grid(row=1, column=5, sticky='ew')
#
#         Radiobutton(frame_ln_add, text="Создать документ по уходу",
#                     font=('Comic Sans MS', user.get('text_size')),
#                     value=f"по уходу",
#                     variable=selected_button,
#                     command=write_ln,
#                     indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                     ).grid(column=0, row=2, sticky='nwse', ipadx=2, ipady=2, columnspan=2)
#
#         Radiobutton(frame_ln_add, text="Создать документ по болезни",
#                     font=('Comic Sans MS', user.get('text_size')),
#                     value=f"по болезни",
#                     variable=selected_button,
#                     command=write_ln,
#                     indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                     ).grid(column=2, row=2, sticky='nwse', ipadx=2, ipady=2, columnspan=4)
#
#
#
#         Label(master=frame_second_examination, text="Повторный осмотр",
#               font=('Comic Sans MS', user.get('text_size')), bg='white').grid(row=1, column=0, sticky='ew')
#         txt_second_examination.grid(row=1, column=1, sticky='ew', columnspan=2)
#         Button(frame_second_examination, text='Календарь', font=('Comic Sans MS', user.get('text_size')),
#                command=calendar_second_examination).grid(row=1, column=3, sticky='ew')
#
#
#         frame_ln.columnconfigure(index='all', minsize=40, weight=1)
#         frame_ln.rowconfigure(index='all', minsize=20)
#         frame_ln.pack(fill='both', expand=True, padx=2, pady=2)
#
#         frame_second_examination.columnconfigure(index='all', minsize=40, weight=1)
#         frame_second_examination.rowconfigure(index='all', minsize=20)
#         frame_second_examination.pack(fill='both', expand=True, padx=2, pady=2)
#
#         frame_ln_main.columnconfigure(index='all', minsize=40, weight=1)
#         frame_ln_main.rowconfigure(index='all', minsize=20)
#         frame_ln_main.pack(fill='both', expand=True, padx=2, pady=2)
#
#     def ln_closed():
#         if not data['examination'].get('ln_closed'):
#             data['examination']['ln_closed'] = True
#             lbl_ln_from.grid_configure(columnspan=3)
#             lbl_ln_from.tkraise()
#             lbl_ln_from['text'] = f"{selected_type_ln.get()} закрыт к труду c "
#             but_ln_closed['text'] = "отменить закрытие"
#             txt_ln_until.delete(0, 'end')
#             txt_ln_until.insert(0, (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y"))
#
#
#         else:
#             data['examination']['ln_closed'] = False
#             lbl_ln_from.grid_configure(columnspan=1)
#             lbl_ln_from['text'] = " с "
#             but_ln_closed['text'] = "закрыть к труду"
#             txt_ln_until.delete(0, 'end')
#
#
#     def open_frame_ln_my_blanks():
#         def select_ln_num():
#             txt_ln_num.delete(0, 'end')
#             txt_ln_num.insert(0, selected_ln_num.get())
#
#             txt_ln_from.delete(0, 'end')
#             txt_ln_from.insert(0, datetime.now().strftime("%d.%m.%Y"))
#
#         def add_my_new_ln():
#             if not my_new_txt_ln_num.get():
#                 messagebox.showerror('Ошибка!', "Не указан номер первого ЛН")
#             else:
#                 if type_ln == 'Лист ВН':
#                     insert_data = f"{my_new_txt_ln_text.get()}__{my_new_txt_ln_num.get()}"
#                 else:
#                     insert_data = f"__{my_new_txt_ln_num.get()}"
#
#                 data_base(command='examination__edit_doctor_LN',
#                                        insert_data=[type_ln, insert_data])
#
#
#
#                 data['examination']['open_frame_ln_my_blanks'] = 'closed'
#                 frame_ln_my_blanks.pack_forget()
#
#         def is_valid__new_ln(num_ln):
#             if num_ln.isdigit():
#                 return True
#             else:
#                 return False
#
#         selected_ln_num = StringVar()
#
#         if data['examination'].get('open_frame_ln_my_blanks', '') == 'open':
#             data['examination']['open_frame_ln_my_blanks'] = 'closed'
#             frame_ln_my_blanks.pack_forget()
#         elif data['examination'].get('open_frame_ln_my_blanks', '') == 'closed':
#             data['examination']['open_frame_ln_my_blanks'] = 'open'
#
#         elif not data['examination'].get('open_frame_ln_my_blanks'):
#             data['examination']['open_frame_ln_my_blanks'] = 'open'
#
#         if data['examination'].get('open_frame_ln_my_blanks', '') == 'open':
#             if data['examination'].get('frame_ln_my_blanks'):
#                 data['examination']['frame_ln_my_blanks'].destroy()
#
#             frame_ln_my_blanks_local = Frame(frame_ln_my_blanks, padx=1, pady=1)
#
#             data['examination']['frame_ln_my_blanks'] = frame_ln_my_blanks_local
#
#             active_ln = False
#             type_ln = selected_type_ln.get()
#
#
#             found_info = None
#
#             if user.get('my_LN'):
#                 for ln_data in user.get('my_LN'):
#                     if type_ln == ln_data[0]:
#                         found_info = ln_data[1]
#
#             row, col = 0, 0
#             if found_info:
#                 found_info_past = data['examination']['get_last_doc_LN'].get(type_ln)
#
#                 frame_ln_my_blanks_local_1 = Frame(frame_ln_my_blanks_local, padx=1, pady=1)
#                 first_ln_num = int(found_info.split('__')[-1])
#                 first_ln_text = found_info.split('__')[0]
#                 for ln_num in range(first_ln_num, first_ln_num + 10, 1):
#                     btn = Radiobutton(frame_ln_my_blanks_local_1, text=f"{first_ln_text} {first_ln_num}",
#                                       font=('Comic Sans MS', user.get('text_size')),
#                                       value=f"{first_ln_text} {first_ln_num}",
#                                       variable=selected_ln_num, command=select_ln_num,
#                                       indicatoron=False, selectcolor='#77f1ff')
#                     btn.grid(row=row, column=col, sticky='ew')
#                     if found_info_past:
#                         for i in found_info_past:
#                             if isinstance(i, tuple):
#                                 i = i[0]
#                             if str(first_ln_num) in i:
#                                 btn['bg'] = '#cdcdcd'
#                                 break
#                         else:
#                             btn['bg'] = "#cefeed"
#                             if not active_ln:
#                                 active_ln = True
#                                 txt_ln_num.delete(0, 'end')
#                                 txt_ln_num.insert(0, f"{first_ln_text} {first_ln_num}")
#
#                                 txt_ln_from.delete(0, 'end')
#                                 txt_ln_from.insert(0, datetime.now().strftime("%d.%m.%Y"))
#                     else:
#                         btn['bg'] = "#cefeed"
#
#
#
#                     col += 1
#                     first_ln_num += 1
#                     if col == 5:
#                         col = 0
#                         row += 1
#                 frame_ln_my_blanks_local_1.columnconfigure(index='all', minsize=40, weight=1)
#                 frame_ln_my_blanks_local_1.rowconfigure(index='all', minsize=20)
#
#                 frame_ln_my_blanks_local_1.pack(fill='both', expand=True)
#
#             frame_ln_my_blanks_local_1 = Frame(frame_ln_my_blanks_local, padx=1, pady=1)
#             if type_ln == 'Лист ВН':
#                 Label(master=frame_ln_my_blanks_local_1, text="Новый десяток Листков ВН",
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg='white').grid(row=row, column=col, sticky='ew', columnspan=2)
#                 col += 2
#                 Label(master=frame_ln_my_blanks_local_1, text="Серия:",
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg='white').grid(row=row, column=col, sticky='ew')
#                 col += 1
#
#                 my_new_txt_ln_text = Entry(frame_ln_my_blanks_local_1, width=5,
#                                            justify="center",
#                                            font=('Comic Sans MS', user.get('text_size')))
#                 my_new_txt_ln_text.grid(row=row, column=col, sticky='ew')
#                 my_new_txt_ln_text.insert(0, 'ВА')
#                 col += 1
#                 Label(master=frame_ln_my_blanks_local_1, text="Номер:",
#                       font=('Comic Sans MS', user.get('text_size')), bg='white').grid(row=row, column=col, sticky='ew')
#                 col += 1
#
#             else:
#                 Label(master=frame_ln_my_blanks_local_1, text="Новый десяток Справок ВН",
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg='white').grid(row=row, column=col, sticky='ew', columnspan=2)
#                 col += 2
#                 Label(master=frame_ln_my_blanks_local_1, text="Номер:",
#                       font=('Comic Sans MS', user.get('text_size')), bg='white').grid(row=row, column=col, sticky='ew')
#                 col += 1
#             check_new_ln = (root_examination.register(is_valid__new_ln), "%P")
#             my_new_txt_ln_num = Entry(frame_ln_my_blanks_local_1, width=15,
#                                       font=('Comic Sans MS', user.get('text_size')),
#                                       justify="center",
#                                       validatecommand=check_new_ln,
#                                       validate="all")
#
#             my_new_txt_ln_num.grid(row=row, column=col, sticky='ew')
#             col += 1
#             Button(frame_ln_my_blanks_local_1, text='Применить', font=('Comic Sans MS', user.get('text_size')),
#                    command=add_my_new_ln).grid(row=row, column=col, sticky='ew')
#
#             frame_ln_my_blanks_local_1.columnconfigure(index='all', minsize=40, weight=1)
#             frame_ln_my_blanks_local_1.rowconfigure(index='all', minsize=20)
#             frame_ln_my_blanks_local_1.pack(fill='both', expand=True)
#
#             frame_ln_my_blanks_local.columnconfigure(index='all', minsize=40, weight=1)
#             frame_ln_my_blanks_local.rowconfigure(index='all', minsize=20)
#             frame_ln_my_blanks_local.pack(fill='both', expand=True, padx=2, pady=2)
#
#             frame_ln_my_blanks.pack(fill='both', expand=True, padx=2, pady=2)
#
#     frame_ln_main = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#     frame_ln = Frame(frame_ln_main, relief="solid", padx=1, pady=1)
#     frame_ln_add = Frame(frame_ln, borderwidth=1, relief="solid", padx=1, pady=1)
#     frame_ln_my_blanks = Frame(frame_ln_main, borderwidth=1, relief="solid", padx=1, pady=1)
#     but_ln_my_blanks = Button(frame_ln, text='Мои бланки',
#                               font=('Comic Sans MS', user.get('text_size')),
#                               command=open_frame_ln_my_blanks)
#
#     frame_second_examination = Frame(examination_root, relief="solid", padx=1, pady=1)
#
#     txt_ln_num = Entry(frame_ln_add, width=15, font=('Comic Sans MS', user.get('text_size')))
#     txt_ln_from = Entry(frame_ln_add, width=15, font=('Comic Sans MS', user.get('text_size')))
#     txt_ln_until = Entry(frame_ln_add, width=15, font=('Comic Sans MS', user.get('text_size')))
#     txt_second_examination = Entry(frame_second_examination, width=15,
#                                    font=('Comic Sans MS', user.get('text_size')))
#     lbl_type_ln = Label(master=frame_ln_add, text="",
#                         font=('Comic Sans MS', user.get('text_size')), bg='white')
#     lbl_ln_from = Label(master=frame_ln_add, text=" с ",
#                         font=('Comic Sans MS', user.get('text_size')), bg='white')
#     but_ln_closed = Button(frame_ln_add, text='закрыть к труду',
#                            font=('Comic Sans MS', user.get('text_size')),
#                            command=ln_closed)
#
#     paste_frame_ln()
#
#     def paste_frame_button_create():
#         def create_examination_doc_a5():
#             create_examination_doc('а5')
#
#         def create_examination_doc_a5_rec():
#             create_examination_doc('а5_рек')
#
#         def create_examination_doc_a6_rec():
#             create_examination_doc('а6_рек')
#
#         def create_examination_doc_a5_disp():
#             create_examination_doc('а5_child_disp')
#
#         def create_examination_doc_a6():
#             create_examination_doc('а6')
#
#         def create_examination_doc_none():
#             create_examination_doc()
#
#         frame_button = Frame(examination_root, relief="solid", padx=1, pady=1)
#
#
#         Button(frame_button, text='Загрузить\nпрошлые\nосмотры',
#                command=paste_past_examination,
#                font=('Comic Sans MS', user.get('text_size'))).grid(column=1, row=0, rowspan=3, sticky='nswe')
#
#         Button(frame_button, text='Печать А5',
#                command=create_examination_doc_a5,
#                font=('Comic Sans MS', user.get('text_size'))).grid(column=2, row=0, columnspan=2, sticky='nswe')
#
#         Button(frame_button, text='Печать А6',
#                command=create_examination_doc_a6,
#                font=('Comic Sans MS', user.get('text_size'))).grid(column=2, row=1, columnspan=2, sticky='nswe')
#
#         Button(frame_button, text='Печать А5 + рекомендации',
#                command=create_examination_doc_a5_rec,
#                font=('Comic Sans MS', user.get('text_size'))).grid(column=4, row=0, columnspan=2, sticky='nswe')
#
#         Button(frame_button, text='Печать А6 + рекомендации',
#                command=create_examination_doc_a6_rec,
#                font=('Comic Sans MS', user.get('text_size'))).grid(column=4, row=1, columnspan=2, sticky='nswe')
#
#
#         Button(frame_button, text='Сохранить без печати',
#                command=create_examination_doc_none,
#                font=('Comic Sans MS', user.get('text_size'))).grid(column=2, row=2, columnspan=4, sticky='nswe')
#
#
#         if child_marker:
#             Button(frame_button, text='Печать А5 \nежемесячный',
#                    command=create_examination_doc_a5_disp,
#                    font=('Comic Sans MS', user.get('text_size'))).grid(column=6, row=0, rowspan=3, sticky='nswe')
#
#
#
#         frame_button.columnconfigure(index='all', minsize=40, weight=1)
#         frame_button.rowconfigure(index='all', minsize=20)
#         frame_button.pack(fill='both', expand=True, side=tk.LEFT)
#
#     paste_frame_button_create()
#
#
#     def paste_calendar(text_field):
#         command, marker = text_field.split('__')
#         if data['examination'].get('calendar_root'):
#             data['examination']['calendar_root'].destroy()
#
#         calendar_root = Toplevel()
#         data['examination']['calendar_root'] = calendar_root
#         calendar_root.title(f'Календарь {marker}')
#         calendar_root.config(bg='white')
#
#         selected_day = StringVar()
#         actual_data = dict()
#
#         now = datetime.now()
#         actual_data['year'] = now.year
#         actual_data['month'] = now.month
#
#         def prev_month():
#             curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
#             new = curr - timedelta(days=1)
#             actual_data['year'] = int(new.year)
#             actual_data['month'] = int(new.month)
#             create_calendar()
#
#         def next_month():
#             curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
#             new = curr + timedelta(days=31)
#             actual_data['year'] = int(new.year)
#             actual_data['month'] = int(new.month)
#             create_calendar()
#
#         def select_day():
#             day = selected_day.get()
#             edit_day = list()
#             for i in day.split('.'):
#                 if len(i) == 1:
#                     i = f"0{i}"
#                 edit_day.append(i)
#             answer = '.'.join(edit_day)
#             if command.startswith('ln_root_'):
#                 data['examination']['LN_data']['current_data'][command.split('_')[-1]].set(answer)
#
#             elif command == 'ln_from':
#                 txt_ln_from.delete(0, 'end')
#                 txt_ln_from.insert(0, answer)
#
#             elif command == 'ln_until':
#                 txt_ln_until.delete(0, 'end')
#                 txt_ln_until.insert(0, answer)
#
#                 txt_second_examination.delete(0, 'end')
#                 txt_second_examination.insert(0, answer)
#
#             elif command == 'second_examination':
#                 txt_second_examination.delete(0, 'end')
#                 txt_second_examination.insert(0, answer)
#
#
#
#             calendar_root.destroy()
#
#         frame_month_year = Frame(calendar_root, relief="solid", padx=1, pady=1)
#
#
#         frame_month_year.columnconfigure(index='all', minsize=40, weight=1)
#         frame_month_year.rowconfigure(index='all', minsize=20)
#         frame_month_year.pack(fill='both', expand=True)
#
#         def create_calendar():
#             if destroy_elements.get('loc_calendar_frame'):
#                 loc_calendar_frame = destroy_elements.get('loc_calendar_frame')
#                 loc_calendar_frame.destroy()
#
#             loc_calendar_frame = Frame(calendar_root, relief="solid", padx=1, pady=1)
#             destroy_elements['loc_calendar_frame'] = loc_calendar_frame
#
#             for calendar_mark in ('prev', 'curr', 'next'):
#                 row, col = 0, 0
#
#
#                 frame_days = Frame(loc_calendar_frame, relief="ridge", borderwidth=0.5, padx=1, pady=1)
#                 if calendar_mark == 'prev':
#                     but_prev_month = Button(frame_days, text='<', command=prev_month,
#                                             font=('Comic Sans MS', user.get('text_size')))
#                     but_prev_month.grid(row=row, column=0, sticky='ew', columnspan=7)
#
#
#                 elif calendar_mark == 'next':
#                     but_next_month = Button(frame_days, text='>', command=next_month,
#                                             font=('Comic Sans MS', user.get('text_size')))
#                     but_next_month.grid(row=row, column=0, sticky='ew', columnspan=7)
#
#
#                 else:
#                     btn = Radiobutton(frame_days, text="Сегодня",
#                                       font=('Comic Sans MS', user.get('text_size')),
#                                       value=datetime.now().strftime("%d.%m.%Y"),
#                                       variable=selected_day, command=select_day,
#                                       indicatoron=False, selectcolor='#77f1ff')
#                     btn.grid(row=row, column=0, sticky='ew', columnspan=7)
#
#
#                 if calendar_mark == 'prev':
#                     curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
#                     new = curr - timedelta(days=1)
#                     year = int(new.year)
#                     month = int(new.month)
#
#                 elif calendar_mark == 'next':
#                     curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
#                     new = curr + timedelta(days=31)
#                     year = int(new.year)
#                     month = int(new.month)
#
#                 else:
#                     year = actual_data.get('year')
#                     month = actual_data.get('month')
#
#                 month_name = {
#                     'January': 'Январь',
#                     'February': 'Февраль',
#                     'March': 'Март',
#                     'April': 'Апрель',
#                     'May': 'Май',
#                     'June': 'Июнь',
#                     'July': 'Июль',
#                     'August': 'Август',
#                     'September': 'Сентябрь',
#                     'October': 'Октябрь',
#                     'November': 'Ноябрь',
#                     'December': 'Декабрь'
#                 }
#
#                 row += 1
#                 lbl_month_year = Label(frame_days,
#                                        text=f"{month_name.get(calendar.month_name[month])}",
#                                        font=('Comic Sans MS', user.get('text_size')),
#                                        bg='white')
#                 lbl_month_year.grid(column=0, row=row, sticky='ew', columnspan=7)
#
#                 if calendar_mark == 'curr':
#                     lbl_month_year['text'] = f"{month_name.get(calendar.month_name[month])} {str(year)}"
#
#                 # Second row - Week Days
#                 column = 0
#                 row += 1
#                 for day in ["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"]:
#                     lbl = Label(frame_days, text=day,
#                                 relief="solid", borderwidth=0.5,
#                                 font=('Comic Sans MS', user.get('text_size')), bg='white')
#                     lbl.grid(column=column, row=row, sticky='ew', padx=2, pady=2)
#                     column += 1
#
#                 row += 1
#                 column = 0
#
#
#                 my_calendar = calendar.monthcalendar(year, month)
#                 for week in my_calendar:
#                     row += 1
#                     col = 0
#                     for day in week:
#                         if day == 0:
#                             col += 1
#                         else:
#                             # day = str(day)
#                             # day = str(day)
#                             # if len(day) == 1:
#                             #     day = f"0{day}"
#                             # if len(str(month)) == 1:
#                             #     month = f"0{month}"
#                             btn_value = ''
#
#                             btn = Radiobutton(frame_days, text=day,
#                                               font=('Comic Sans MS', user.get('text_size')),
#                                               value=f"{day}.{month}.{year}", variable=selected_day, command=select_day,
#                                               indicatoron=False, selectcolor='#77f1ff')
#                             btn.grid(row=row, column=col, sticky='ew')
#                             col += 1
#
#                             if datetime.strptime(f"{day}.{month}.{year}", "%d.%m.%Y").weekday() in (5, 6):
#                                 btn['bg'] = '#b4ffff'
#                             if datetime.now().year == year and datetime.now().month == month and datetime.now().day == int(
#                                     day):
#                                 btn['bg'] = '#ff7b81'
#
#
#                 frame_days.columnconfigure(index='all', minsize=40, weight=1)
#                 frame_days.rowconfigure(index='all', minsize=20)
#                 frame_days.pack(fill='both', expand=True, side='left')
#
#             loc_calendar_frame.columnconfigure(index='all', minsize=40, weight=1)
#             loc_calendar_frame.rowconfigure(index='all', minsize=20)
#             loc_calendar_frame.pack(fill='both', expand=True, side='left')
#
#         create_calendar()
#
#
#     age_txt = f"Возраст:"
#     if patient_age.get('year') in (2, 3, 4):
#         age_txt += f" {patient_age.get('year')} года"
#     elif patient_age.get('year') == 1:
#         age_txt += f" {patient_age.get('year')} год"
#     elif patient_age.get('year') > 1:
#         age_txt += f" {patient_age.get('year')} лет"
#
#     age_txt += f" {patient_age.get('month')} мес. "
#     if patient_age.get('year') == 0:
#         age_txt += f"{patient_age.get('day')} д."
#
#     # upload_last_data()
#     patient_banner.set(value=f"ФИО: {patient.get('name')}    Дата рождения: {patient.get('birth_date')}    "
#                              f"{age_txt}\n Адрес: {patient.get('address')}")



# def fast_examination(child_marker=False):
#     # root_examination: Toplevel, examination_root: Frame, child_marker = False
#     def start_action(func=None):
#         def check_thread(thread):
#             if thread.is_alive():
#                 animation.set(animation.get()[-1] + animation.get()[:-1])
#                 certificate_main_root.after(200, lambda: check_thread(thread))
#             else:
#                 animation.set("")
#
#         def run_action():
#             if func:
#                 func()
#                 time.sleep(1)
#             else:
#                 time.sleep(5)
#
#         animation.set("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░")
#         thread = threading.Thread(target=run_action)
#         thread.start()
#         check_thread(thread)
#
#     patient_age = get_age_d_m_y(patient.get('birth_date'))
#     root_examination = Toplevel()
#     root_examination.bind("<Control-KeyPress>", keypress)
#     root_examination.config(bg='white')
#     root_examination.title(f'Cоздание осмотра')
#     root_examination.geometry('+0+0')
#
#     selected_button = StringVar()
#
#     def create_variables():
#         data['examination'] = dict()
#         data['examination']['all_kb_status'] = 'open'
#         data['examination']['selected_drugs'] = dict()
#         data['examination']['buttons'] = dict()
#         data['examination']['ScrolledText'] = dict()
#         #        '': StringVar(),
#         #        data['examination']['var'].get('main_label')
#
#         data['examination']['var'] = {
#             'main_label': StringVar(),
#             'animation': StringVar(),
#             'txt_date_time': StringVar(),
#             'txt_ln_num': StringVar(),
#             'txt_ln_from': StringVar(),
#             'txt_ln_until': StringVar(),
#             'txt_second_examination': StringVar(),
#             'lbl_type_ln': StringVar(),
#             'but_ln_closed': StringVar(),
#         }
#
#
#     create_variables()
#
#     def paste_main_label():
#         age_txt = f"Возраст:"
#         if patient_age.get('year') in (2, 3, 4):
#             age_txt += f" {patient_age.get('year')} года"
#         elif patient_age.get('year') == 1:
#             age_txt += f" {patient_age.get('year')} год"
#         elif patient_age.get('year') > 1:
#             age_txt += f" {patient_age.get('year')} лет"
#
#         age_txt += f" {patient_age.get('month')} мес. "
#         if patient_age.get('year') == 0:
#             age_txt += f"{patient_age.get('day')} д."
#
#         data['examination']['var']['main_label'].set(f"ФИО: {patient.get('name')};    "
#                                               f"Дата рождения: {patient.get('birth_date')};   "
#                                               f"{age_txt};\n"
#                                               f"Адрес: {patient.get('address')};")
#
#         Label(master=root_examination,
#               textvariable=data['examination']['var'].get('main_label'),
#               font=('Comic Sans MS', user.get('text_size')),
#               bg="#36566d",
#               fg='white',
#               padx=4, pady=4
#               ).pack(fill='x', anchor='n')
#         Label(master=root_examination,
#               textvariable=data['examination']['var'].get('animation'),
#               bg="#36566d",
#               fg='white',
#               ).pack(fill='x', anchor='n')
#     paste_main_label()
#
#     def create_main_frames():
#         def create_scrolled_frame():
#             def resize(event=None):
#                 # print(f"\ncanvas_frame.winfo_width() {canvas_frame.winfo_width()}\n"
#                 #       f"canvas.winfo_width() {canvas.winfo_width()}\n")
#
#                 canvas.configure(width=canvas_frame.winfo_width())
#
#                 # if frame.winfo_height() < master_frame.winfo_height():
#                 #     frame.configure(height=master_frame.winfo_height())
#
#                 # print(f"------> canvas_frame.winfo_width() {canvas_frame.winfo_width()}\n"
#                 #       f"canvas.winfo_width() {canvas.winfo_width()}\n"
#                 #       f"root_examination.winfo_height() {root_examination.winfo_height()}\n")
#                 region = canvas.bbox(tk.ALL)
#                 canvas.configure(scrollregion=region)
#
#                 root_examination.minsize(width=int(canvas_frame.winfo_width()),
#                                          height=root_examination.winfo_screenheight() - 150)
#
#             def on_binds(event):
#                 canvas.idbind = canvas.bind_all("<MouseWheel>", on_mousewheel)
#
#             def off_binds(event=None):
#                 canvas.unbind_all("<MouseWheel>")
#
#             def on_mousewheel(event):
#                 if os.name == 'posix':
#                     canvas.yview_scroll(int(-1 * event.delta), "units")
#                 else:
#                     canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
#
#             scroll_x = tk.Scrollbar(frame_examination, orient=tk.HORIZONTAL)
#             scroll_y = tk.Scrollbar(frame_examination, orient=tk.VERTICAL, width=user.get('text_size', 10) * 2)
#             canvas = tk.Canvas(frame_examination, bg='green',
#                                xscrollcommand=scroll_x.set,
#                                yscrollcommand=scroll_y.set)
#             scroll_x.config(command=canvas.xview)
#             scroll_y.config(command=canvas.yview)
#
#             canvas_frame = Frame(canvas)
#             data['examination']['frames']['frame_examination']['canvas_frame'] = canvas_frame
#             data['examination']['frames']['frame_examination']['canvas'] = canvas
#
#             canvas.grid(row=0, column=0, sticky="nsew")
#
#             canvas.create_window((0, 0), window=canvas_frame, anchor="nw")
#             paste_examination()
#             scroll_x.grid(row=1, column=0, sticky="we")
#             scroll_y.grid(row=0, column=1, sticky="ns")
#
#             frame_examination.rowconfigure(0, weight=1)
#             frame_examination.columnconfigure(0, weight=1)
#             root_examination.bind("<Configure>", resize)
#
#             frame_examination.update_idletasks()
#             # frame_examination.minsize(frame_examination.winfo_width(), frame_examination.winfo_height())
#             canvas.bind("<Enter>", on_binds)
#             canvas.bind("<Leave>", off_binds)
#             resize()
#
#             # if marker == 'frame_examination':
#             #     root_examination.update_idletasks()
#             #     paste_examination()
#             #     canvas_frame.update_idletasks()
#             #     canvas_frame.columnconfigure(index='all', minsize=40, weight=1)
#             #     canvas_frame.rowconfigure(index='all', minsize=20)
#
#             # canvas_frame.pack(fill='both', expand=True)
#
#
#             # canvas_frame['height'] = height
#             # canvas_frame['height'] = canvas.winfo_width()
#
#             # root_examination.update_idletasks()
#             #
#             # canvas.create_window((0, 0), window=canvas_frame, anchor="nw",
#             #                      width=canvas.winfo_width())
#
#         data['examination']['frames'] = {
#             'frame_examination': dict(),
#             'frame_add': dict(),
#             'pasted_frame': dict()}
#
#         frame_main = Frame(root_examination, bg='red')
#         frame_main.pack(fill='both', expand=True)
#
#         frame_examination = Frame(frame_main)
#         # frame_examination.grid(row=0, column=0, sticky="nsew")
#         frame_examination.pack(fill='both', expand=True)
#
#         # create_scrolled_frame(master_frame=frame_examination, marker='frame_examination')
#         create_scrolled_frame()
#         root_examination.geometry('+0+0')
#
#         # frame_add = Frame(frame_main)
#         # frame_add_title = Frame(frame_add)
#         # frame_add_title.pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#         # data['examination']['frames']['frame_add']['frame_add_title'] = frame_add_title
#         # data['examination']['frames']['frame_add']['frame_add_main'] = frame_add
#         #
#         # frame_add_scrolled = Frame(frame_add)
#         # frame_add_scrolled.pack(fill='both', expand=True)
#         # frame_add.grid(row=0, column=1, sticky="nsew")
#         # create_scrolled_frame(master_frame=frame_add_scrolled, marker='frame_add')
#
#
#     # def create_scrolled_frame(master_frame, marker):
#     #     def resize(event=None):
#     #         # print(f"\ncanvas_frame.winfo_width() {canvas_frame.winfo_width()}\n"
#     #         #       f"canvas.winfo_width() {canvas.winfo_width()}\n"
#     #         #       f"frame.winfo_height() {frame.winfo_height()}\n"
#     #         #       f"master_frame.winfo_height() {master_frame.winfo_height()}")
#     #
#     #         if canvas.winfo_width() < canvas_frame.winfo_width():
#     #             canvas.configure(width=canvas_frame.winfo_width())
#     #
#     #         if frame.winfo_height() < master_frame.winfo_height():
#     #             frame.configure(height=master_frame.winfo_height())
#     #
#     #
#     #         # print(f"------> canvas_frame.winfo_width() {canvas_frame.winfo_width()}\n"
#     #         #       f"canvas.winfo_width() {canvas.winfo_width()}\n"
#     #         #       f"frame.winfo_height() {frame.winfo_height()}\n"
#     #         #       f"master_frame.winfo_height() {master_frame.winfo_height()}\n")
#     #         region = canvas.bbox(tk.ALL)
#     #         canvas.configure(scrollregion=region)
#     #
#     #         root_examination.minsize(width=int(canvas_frame.winfo_width()),
#     #                                  height=root_examination.winfo_screenheight() - 100)
#     #
#     #     def on_binds(event):
#     #         canvas.idbind = canvas.bind_all("<MouseWheel>", on_mousewheel)
#     #
#     #     def off_binds(event=None):
#     #         canvas.unbind_all("<MouseWheel>")
#     #
#     #     def on_mousewheel(event):
#     #         if os.name == 'posix':
#     #             canvas.yview_scroll(int(-1 * event.delta), "units")
#     #         else:
#     #             canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
#     #
#     #     root_examination.update_idletasks()
#     #     height = (root_examination.winfo_screenheight() - root_examination.winfo_height() - 200)
#     #
#     #     frame = Frame(master_frame)
#     #     frame.pack(fill='both', expand=True, side='left')
#     #
#     #     scroll_x = tk.Scrollbar(frame, orient=tk.HORIZONTAL)
#     #     scroll_y = tk.Scrollbar(frame, orient=tk.VERTICAL, width=user.get('text_size', 10) * 2)
#     #     canvas = tk.Canvas(frame, bg = 'green',
#     #                        xscrollcommand=scroll_x.set,
#     #                        yscrollcommand=scroll_y.set, height=height)
#     #     scroll_x.config(command=canvas.xview)
#     #     scroll_y.config(command=canvas.yview)
#     #
#     #     canvas.grid(row=0, column=0, sticky="nsew")
#     #     scroll_x.grid(row=1, column=0, sticky="we")
#     #     scroll_y.grid(row=0, column=1, sticky="ns")
#     #
#     #     canvas_frame = Frame(canvas)
#     #
#     #
#     #     data['examination']['frames'][marker]['canvas_frame'] = canvas_frame
#     #     data['examination']['frames'][marker]['canvas'] = canvas
#     #     if marker == 'frame_examination':
#     #         root_examination.update_idletasks()
#     #         paste_examination()
#     #         canvas_frame.update_idletasks()
#     #         print(f"------> canvas_frame.winfo_width() {canvas_frame.winfo_width()}\n"
#     #               f"canvas.winfo_width() {canvas.winfo_width()}\n"
#     #               f"frame.winfo_height() {frame.winfo_height()}\n"
#     #               f"master_frame.winfo_height() {master_frame.winfo_height()}\n")
#     #         canvas_frame.columnconfigure(index='all', minsize=40, weight=1)
#     #         canvas_frame.rowconfigure(index='all', minsize=20)
#     #
#     #     canvas_frame.pack(fill='both', expand=True)
#     #     frame.rowconfigure(0, weight=1)
#     #     frame.columnconfigure(0, weight=1)
#     #
#     #     root_examination.bind("<Configure>", resize)
#     #     frame.update_idletasks()
#     #
#     #     # canvas_frame['height'] = height
#     #     # canvas_frame['height'] = canvas.winfo_width()
#     #
#     #     canvas.bind("<Enter>", on_binds)
#     #     canvas.bind("<Leave>", off_binds)
#     #     root_examination.update_idletasks()
#     #
#     #     canvas.create_window((0, 0), window=canvas_frame, anchor="nw",
#     #                          width=canvas.winfo_width())
#
#
#     def paste_examination():
#
#         examination_root = data['examination']['frames']['frame_examination'].get('canvas_frame')
#
#         selected_place = StringVar()
#         selected_diagnosis = StringVar()
#         selected_type_ln = StringVar()
#         selected_examination_frame = StringVar()
#         selected_prescription_frame = StringVar()
#
#         selected_button = StringVar()
#         selected_examination_button = StringVar()
#         selected_diagnosis_button = StringVar()
#         selected_recommendation_button = StringVar()
#
#         age = patient_age.get('year')
#
#         examination_root.update()
#         destroy_elements = dict()
#
#         def upload_last_data():
#             # if type_ln in ("Справка ВН", "Лист ВН"):
#             #     last_visit = data['examination']['get_last_patient_ln'].get(type_ln)
#             #
#             #     if last_visit:
#             #         ln_num = last_visit.split('__')[1].replace('_', '')
#             #         try:
#             #             date_from_cont = datetime.strptime(f"{last_visit.split('__')[3]}",
#             #                                                "%d.%m.%Y") + timedelta(days=1)
#             #             txt_ln_from.delete(0, 'end')
#             #             txt_ln_from.insert(0, date_from_cont.strftime("%d.%m.%Y"))
#             #
#             #         except Exception:
#             #             txt_ln_from.delete(0, 'end')
#             #             txt_ln_from.insert(0, datetime.now().strftime("%d.%m.%Y"))
#             #
#             #     if not ln_num:
#             #         open_frame_ln_my_blanks()
#             #     else:
#             #         txt_ln_num.delete(0, 'end')
#             #         if ln_num:
#             #             txt_ln_num.insert(0, ln_num)
#
#             txt_anamnesis = data['examination']['ScrolledText'].get('txt_anamnesis')
#
#             found_info = data_base(command='examination__upload_last_data')
#             local_info = {
#                 'select_past_examination': list(),
#                 'get_last_doc_LN': {
#                     "Справка ВН": list(),
#                     "Лист ВН": list()},
#                 'get_last_patient_ln': {
#                     "Справка ВН": list(),
#                     "Лист ВН": list()},
#                 'get_last_anthro_data': dict(),
#                 'LN_data': {
#                     'last_patient_ln': dict()},
#                 'anamnesis': ''
#
#             }
#
#             if found_info.get('get_last_doc_LN'):
#                 for ln_info in found_info.get('get_last_doc_LN'):
#                     for ln_data in ("Справка ВН", "Лист ВН"):
#                         if ln_info[0].startswith(ln_data):
#                             local_info['get_last_doc_LN'][ln_data].append(ln_info[0])
#
#             if found_info.get('select_past_examination'):
#                 for rowid, date_time, doctor_name, status, LN_type, patient_info, examination_text, examination_key \
#                         in sorted(found_info.get('select_past_examination'),
#                                   key=lambda i: (datetime.now() -
#                                                  datetime.strptime(f"{i[1]}", "%d.%m.%Y %H:%M:%S")).total_seconds()):
#
#                     local_info['select_past_examination'].append((rowid, date_time, doctor_name, status, LN_type,
#                                                                   patient_info, examination_text, examination_key))
#                     for ln_data in ("Справка ВН", "Лист ВН"):
#                         if LN_type.startswith(ln_data):
#                             local_info['get_last_patient_ln'][ln_data].append((date_time, LN_type))
#
#                     if child_marker:
#                         if not local_info.get('get_last_anthro_data'):
#                             if ('type_examination:____child__' in examination_key
#                                     and 'txt_weight_variable' in examination_key):
#                                 for string in examination_key.split('__<end!>__\n'):
#                                     if string.startswith('patient_anthro_data:____'):
#                                         for marker in string.replace('patient_anthro_data:____', '').split("____"):
#                                             if len(marker.split('__')) == 2:
#                                                 name, variable = marker.split('__')
#                                                 if name in ('txt_weight_bir_variable', 'txt_weight_variable'):
#                                                     local_info['get_last_anthro_data'][name] = variable
#                         if not local_info.get('get_last_diagnosis_text'):
#                             for string in examination_key.split('__<end!>__\n'):
#                                 if string.startswith('diagnosis_text:____'):
#                                     local_info['get_last_diagnosis_text'] = string.replace('diagnosis_text:____', '')
#
#                     else:
#                         if not local_info.get('anamnesis'):
#                             if (datetime.now() - datetime.strptime(date_time,
#                                                                    "%d.%m.%Y %H:%M:%S")).total_seconds() < 2592000:
#                                 if 'anamnesis:____' in examination_key:
#                                     for string in examination_key.split('__<end!>__\n'):
#                                         if string.startswith('anamnesis:____'):
#                                             txt_anamnesis.insert(1.0, string.replace('anamnesis:____', ''))
#                                             local_info['anamnesis'] = 'True'
#                             else:
#                                 local_info['anamnesis'] = 'None'
#
#                         if not local_info.get('get_last_anthro_data'):
#                             if ('type_examination:____adult__' in examination_key
#                                     and 'txt_weight_variable' in examination_key):
#
#                                 for string in examination_key.split('__<end!>__\n'):
#                                     if string.startswith('patient_anthro_data:____'):
#                                         for marker in string.replace('patient_anthro_data:____', '').split("____"):
#                                             if len(marker.split('__')) == 2:
#                                                 name, variable = marker.split('__')
#                                                 if name == 'txt_weight_variable':
#                                                     local_info['get_last_anthro_data'][name] = variable
#
#                         if 'LN_blank_data:____' in examination_key:
#                             for string in examination_key.split('__<end!>__\n'):
#                                 if string.startswith('LN_blank_data:____'):
#                                     local_ln_data = {
#                                         "Дата осмотра": date_time,
#                                         "Фамилия": "",
#                                         "Имя": "",
#                                         "Отчество": "",
#                                         "Дата рождения": "",
#                                         "Место работы (службы, учебы)": "",
#                                         "Информация про ребенка (в корешок)": ""}
#                                     for marker in string.replace('LN_blank_data:____', '').split("____"):
#                                         if len(marker.split('__')) == 2:
#                                             name, variable = marker.split('__')
#                                             if name in local_ln_data:
#                                                 local_ln_data[name] = variable
#                                     if (local_ln_data.get('Фамилия')
#                                             and local_ln_data.get('Дата рождения')):
#                                         key = f"{local_ln_data.get('Фамилия')} " \
#                                               f"{local_ln_data.get('Имя')} " \
#                                               f"{local_ln_data.get('Отчество')} -- " \
#                                               f"{local_ln_data.get('Дата рождения')} -- " \
#                                               f"{local_ln_data.get('Место работы (службы, учебы)')} -- " \
#                                               f"{local_ln_data.get('Информация про ребенка (в корешок)')}"
#                                         local_info['LN_data']['last_patient_ln'][key] = local_ln_data.copy()
#
#             for ln_data in ("Справка ВН", "Лист ВН"):
#                 if local_info['get_last_patient_ln'].get(ln_data):
#                     last_visit = min(local_info['get_last_patient_ln'].get(ln_data),
#                                      key=lambda i: (datetime.now() -
#                                                     datetime.strptime(f"{i[0]}", "%d.%m.%Y %H:%M:%S")).total_seconds())
#
#                     local_info['get_last_patient_ln'][ln_data] = None
#                     if ((datetime.now() - datetime.strptime(f"{last_visit[0]}",
#                                                             "%d.%m.%Y %H:%M:%S")).total_seconds() / (
#                             60 * 60 * 24) < 14 and last_visit[1].split('__')[-1] != 'closed'):
#                         local_info['get_last_patient_ln'][ln_data] = last_visit[1]
#
#             for marker in local_info:
#                 data['examination'][marker] = local_info.get(marker)
#
#             if child_marker:
#                 if data['examination']['get_last_anthro_data'].get('txt_weight_bir_variable'):
#                     data['examination']['anthro']['txt_weight_bir_variable'].set(
#                         data['examination']['get_last_anthro_data'].get('txt_weight_bir_variable'))
#
#                 if data['examination']['get_last_anthro_data'].get('txt_weight_variable'):
#                     data['examination']['last_txt_weight_variable'] = data['examination']['get_last_anthro_data'].get(
#                         'txt_weight_variable')
#
#
#             else:
#                 if data['examination']['get_last_anthro_data'].get('txt_weight_variable'):
#                     data['examination']['anthro']['txt_weight_variable'].set(
#                         data['examination']['get_last_anthro_data'].get('txt_weight_variable'))
#
#         def paste_add_frame(frame_name=None):
#             frame_add_main = data['examination']['frames']['frame_add']['frame_add_main']
#             frame_add_main.grid_remove()
#             for marker in ('frame_title', 'frame_scrolled'):
#                 if data['examination']['frames']['pasted_frame'].get(marker):
#                     data['examination']['frames']['pasted_frame'][marker].pack_forget()
#                     data['examination']['frames']['pasted_frame'][marker] = None
#
#             if frame_name:
#                 master_frame_scrolled = data['examination']['frames']['frame_add'].get('canvas_frame')
#                 master_frame_title = data['examination']['frames']['frame_add'].get('frame_add_title')
#                 canvas = data['examination']['frames']['frame_add'].get('canvas')
#
#                 frame_add_title = data['examination']['frames'][frame_name].get('frame_title')
#                 frame_add_scrolled = data['examination']['frames'][frame_name].get('frame_scrolled')
#
#                 data['examination']['frames']['pasted_frame']['frame_title'] = frame_add_title
#                 data['examination']['frames']['pasted_frame']['frame_scrolled'] = frame_add_scrolled
#
#                 frame_add_title.pack(fill='both', expand=True)
#                 canvas.create_window((0, 0), window=frame_add_scrolled, anchor="nw",
#                                      width=canvas.winfo_width())
#
#         def paste_past_examination():
#             txt_epicrisis_add = data['examination']['ScrolledText'].get('txt_epicrisis_add')
#             txt_complaints = data['examination']['ScrolledText'].get('txt_complaints')
#             txt_anamnesis = data['examination']['ScrolledText'].get('txt_anamnesis')
#             txt_examination = data['examination']['ScrolledText'].get('txt_examination')
#             txt_diagnosis = data['examination']['ScrolledText'].get('txt_diagnosis')
#             txt_prescription = data['examination']['ScrolledText'].get('txt_prescription')
#
#
#             def selected_past_but():
#                 rowid_, command = selected_button.get().split('__')
#                 if command in ('Удалить осмотр', 'Удалить справку'):
#                     result = messagebox.askyesno(title='Удаление осмотра',
#                                                  message="Удалить осмотр?")
#                     if result:
#                         answer, message = data_base(command='examination__delete',
#                                                     insert_data=rowid_)
#                         if not answer:
#                             messagebox.showerror('Ошибка', f"Ошибка удаления записи: \n{message}")
#                         else:
#                             past_examination_data['destroy_elements'][rowid_].destroy()
#                     past_examination_frame.focus()
#
#                 elif command == 'Загрузить в текущий':
#
#                     for but_marker in ('complaints', 'examination', 'prescription'):
#                         for mark_ in data['examination'].get(f'{but_marker}_but'):
#                             data['examination'][f'{but_marker}_but'].get(mark_).set(0)
#                     if data['examination'].get('selected_drugs'):
#                         data['examination']['selected_drugs'].clear()
#                     txt_epicrisis_add.delete(1.0, 'end')
#                     all_markers = past_examination_data['found_info'].get(rowid_). \
#                         get('examination_key').split('__<end!>__\n')
#                     for selected_marker in all_markers:
#                         if 'selected_diagnosis_get:____' in selected_marker:
#                             selected_diagnosis.set(selected_marker.split(':____')[-1])
#
#                         elif "drugs:____" in selected_marker:
#                             all_buttons = selected_marker.replace('drugs:____', '').split("____")
#
#                             for drugs_but in all_buttons:
#                                 if len(drugs_but.split('__')) == 4:
#                                     select_drugs_item(drug_name=drugs_but)
#
#                         elif "epicrisis_add_text:____" in selected_marker:
#                             txt_epicrisis_add.insert(1.0,
#                                                      selected_marker.replace("epicrisis_add_text:____", ""))
#                             txt_epicrisis_add["height"] = len(selected_marker.split('\n')) + 1
#
#
#                         elif "patient_anthro_data:____" in selected_marker:
#                             for marker in selected_marker.replace('patient_anthro_data:____', '').split("____"):
#                                 if len(marker.split('__')) == 2:
#                                     name, variable = marker.split('__')
#                                     if name in data['examination'].get('anthro'):
#                                         data['examination']['anthro'][name].set(variable)
#
#                         elif "selected_place:____" in selected_marker:
#                             selected_place.set(selected_marker.replace('selected_place:____', ''))
#
#                         elif "anamnesis:____" in selected_marker:
#                             txt_anamnesis.delete(1.0, 'end')
#                             txt_anamnesis.insert(1.0, selected_marker.replace('anamnesis:____', ''))
#
#                         else:
#                             for but_marker in ('complaints', 'examination', 'prescription',
#                                                'diagnosis'):
#
#                                 if f"{but_marker}:____" in selected_marker:
#
#                                     all_buttons = selected_marker.replace(f"{but_marker}:____", '').split("__")
#                                     for button in all_buttons:
#                                         if button in data['examination'].get(f'{but_marker}_but'):
#                                             data['examination'][f'{but_marker}_but'].get(button).set(1)
#
#                                 elif f"{but_marker}_text:____" in selected_marker:
#                                     text_inserted = selected_marker.replace(f"{but_marker}_text:____", '')
#
#                                     if but_marker == 'complaints':
#                                         txt_complaints.delete(1.0, 'end')
#                                         txt_complaints.insert(1.0, text_inserted)
#                                     if but_marker == 'examination':
#                                         txt_examination.delete(1.0, 'end')
#                                         txt_examination.insert(1.0, text_inserted)
#                                     if but_marker == 'diagnosis':
#                                         txt_diagnosis.delete(1.0, 'end')
#                                         txt_diagnosis.insert(1.0, text_inserted)
#                                     if but_marker == 'prescription':
#                                         txt_prescription.delete(1.0, 'end')
#                                         txt_prescription.insert(1.0, text_inserted)
#
#                     examination_root.update()
#                     edit_examination_kb_text()
#                     edit_complaints_kb_color()
#
#                 elif command == 'Сохранить изменения':
#                     saved_text = past_examination_data['found_info'][f"{rowid_}"]. \
#                         get('txt_examination_past').get(1.0, 'end').strip()
#                     if saved_text == past_examination_data['found_info'][f"{rowid_}"].get("examination_text"):
#                         messagebox.showinfo('Инфо', f"Осмотры совпадают\n"
#                                                     f"Нет изменений для сохранения")
#                     else:
#                         answer, message = data_base(command='examination__delete',
#                                                     insert_data=rowid_)
#                         if not answer:
#                             messagebox.showerror('Ошибка', f"Ошибка удаления записи: \n{message}")
#                         else:
#
#                             save_info_examination = [
#                                 f"{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
#                                 f"{user.get('doctor_name')}",
#                                 None,
#                                 past_examination_data['found_info'][f"{rowid_}"].get("ln_type"),
#                                 past_examination_data['found_info'][f"{rowid_}"].get("patient_info_"),
#                                 saved_text,
#                                 past_examination_data['found_info'][f"{rowid_}"].get("examination_key"),
#                                 None]
#
#                             answer, message = data_base(command='examination__save',
#                                                         insert_data=save_info_examination)
#                             if not answer:
#                                 messagebox.showerror("Ошибка", f"Ошибка сохранения осмотра\n{message}")
#                             else:
#                                 messagebox.showinfo('Инфо', f"Осмотр успешно сохранен")
#                                 text = past_examination_data['found_info'][f"{rowid_}"].get("past_exam_text")
#                                 text.set(
#                                     f"Время редактирования: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}    "
#                                     f"Пользователь: {user.get('doctor_name')}")
#                                 past_examination_frame.update()
#
#                     past_examination_frame.focus()
#
#                 elif command in ('Печать А5', 'Печать А6'):
#                         if command == 'Печать А5':
#                             text_size = 11
#                         else:
#                             text_size = 8
#                         exam_text = past_examination_data['found_info'][f"{rowid_}"]. \
#                                         get('txt_examination_past').get(1.0, 'end')[:-1]
#
#                         document = Document()
#                         paragraph = document.add_paragraph()
#                         for text in exam_text.split('\n'):
#                             text = text.strip()
#
#                             for marker in ('Жалобы:', 'Данные объективного обследования:', 'Диагноз:'):
#                                 if text.startswith(marker):
#                                     text = text.replace(marker, '')
#                                     p = paragraph.add_run(marker)
#                                     r_fmt = p.font
#                                     r_fmt.name = 'Times New Roman'
#                                     r_fmt.size = Pt(text_size)
#                                     r_fmt.bold = True
#                             if text:
#                                 p = paragraph.add_run(f"{text}\n")
#                                 r_fmt = p.font
#                                 r_fmt.name = 'Times New Roman'
#                                 r_fmt.size = Pt(text_size)
#
#                         sections = document.sections
#                         for section in sections:
#                             section.top_margin = Cm(1.5)
#                             section.bottom_margin = Cm(1.5)
#                             section.left_margin = Cm(1.5)
#                             section.right_margin = Cm(1.5)
#                             if command == 'Печать А5':
#                                 section.page_height = Cm(14.8)
#                                 section.page_width = Cm(21)
#                             else:
#                                 section.page_height = Cm(10.5)
#                                 section.page_width = Cm(14.8)
#
#                         doc_name = f'.{os.sep}generated{os.sep}осмотр.docx'
#                         doc_name = save_document(doc=document, doc_name=doc_name)
#                         run_document(doc_name)
#
#
#             frame_scrolled = Frame(data['examination']['frames']['frame_add'].get('canvas_frame'))
#             frame_title = Frame(data['examination']['frames']['frame_add'].get('frame_add_title'))
#
#             data['examination']['frames']['past_examination']['frame_title'] = frame_title
#             data['examination']['frames']['past_examination']['frame_scrolled'] = frame_scrolled
#
#             past_exam_title = StringVar()
#             past_exam_title.set('Осмотры пациента')
#             Label(master=frame_title,
#                   textvariable=past_exam_title,
#                   bg="#36566d",
#                   fg='white',
#                   ).pack(fill='both', expand=True)
#
#             past_examination_data = {
#                 'found_info': dict(),
#                 'destroy_elements': dict(),
#                 'frame_info': dict()}
#
#             found_info = data['examination'].get('select_past_examination')
#
#             if not found_info:
#                 past_exam_title.set(f"{past_exam_title.get()}\n"
#                                     f"История о прошлых осмотрах пациента пуста")
#             else:
#                 for info in found_info:
#                     local_frame = Frame(frame_scrolled, borderwidth=1, relief="solid", padx=3, pady=3)
#                     rowid, date_time, doctor_name, status, ln_type, patient_info_, examination_text, examination_key = info
#
#                     past_examination_data['destroy_elements'][f"{rowid}"] = local_frame
#
#                     past_examination_data['found_info'][f"{rowid}"] = {
#                         "date_time": date_time,
#                         "doctor_name": doctor_name,
#                         "ln_type": ln_type,
#                         "patient_info_": patient_info_,
#                         "examination_text": examination_text,
#                         "examination_key": examination_key
#                     }
#                     past_exam_text = StringVar()
#                     past_examination_data['found_info'][f"{rowid}"]['past_exam_text'] = past_exam_text
#                     past_exam_text.set(f"Время редактирования: {date_time}    "
#                                        f"Пользователь: {doctor_name}    "
#                                        f"Статус: {status}")
#                     Label(master=local_frame, width=100,
#                           textvariable=past_exam_text,
#                           justify='left',
#                           font=('Comic Sans MS', user.get('text_size')),
#                           bg='white').pack(fill='both', expand=True, side="top")
#
#                     txt_examination_past = ScrolledText(local_frame, width=100, height=20,
#                                                         font=('Comic Sans MS', user.get('text_size')),
#                                                         wrap="word")
#
#                     txt_examination_past.insert(1.0, f"{examination_text}\n")
#                     txt_examination_past.pack(fill='both', expand=True, side="top")
#                     past_examination_data['found_info'][f"{rowid}"]['txt_examination_past'] = txt_examination_past
#
#                     if examination_key.startswith('type_examination:____certificate__'):
#                         if doctor_name == user.get('doctor_name'):
#                             mark = 'Удалить справку'
#                             Radiobutton(local_frame, text=mark,
#                                         font=('Comic Sans MS', user.get('text_size')),
#                                         value=f"{rowid}__{mark}",
#                                         variable=selected_button,
#                                         command=selected_past_but,
#                                         indicatoron=False, selectcolor='#77f1ff'
#                                         ).pack(fill='both', expand=True)
#
#                     else:
#                         for mark in ('Удалить осмотр',
#                                      'Загрузить в текущий',
#                                      "Печать А5",
#                                      "Печать А6",
#                                      "Сохранить изменения"):
#
#                             if mark not in ("Сохранить изменения", 'Удалить осмотр') \
#                                     or doctor_name == user.get('doctor_name'):
#                                 Radiobutton(local_frame, text=mark,
#                                             font=('Comic Sans MS', user.get('text_size')),
#                                             value=f"{rowid}__{mark}",
#                                             variable=selected_button,
#                                             command=selected_past_but,
#                                             indicatoron=False, selectcolor='#77f1ff'
#                                             ).pack(fill='both', expand=True, side="left")
#
#
#                     local_frame.columnconfigure(index='all', minsize=40, weight=1)
#                     local_frame.rowconfigure(index='all', minsize=20)
#                     local_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#         def change_all_kb_status():
#             local_data = {
#                 'complaints': change_complaints_kb_status,
#                 'examination': change_examination_kb_status,
#                 'prescription': change_prescription_kb_status
#
#             }
#             button_change_all_kb_status = data['examination']['buttons'].get('button_change_all_kb_status')
#
#             if data['examination'].get('all_kb_status') == 'open':
#                 for marker in local_data:
#                     if data['examination'].get(f'open_{marker}_kb') != 'closed':
#                         local_data[marker]()
#                 data['examination']['all_kb_status'] = 'closed'
#                 button_change_all_kb_status['text'] = 'Открыть\nвсе\nклавиатуры'
#
#             elif data['examination'].get('all_kb_status') == 'closed':
#                 for marker in local_data:
#                     if not data['examination'].get(f'open_{marker}_kb') == 'open':
#                         local_data[marker]()
#                 data['examination']['all_kb_status'] = 'open'
#                 button_change_all_kb_status['text'] = 'Скрыть\nвсе\nклавиатуры'
#
#
#
#
#             # if data['examination'].get('all_kb_status') == 'open':
#             #     for marker in ('complaints', 'examination', 'prescription'):
#             #         if data['examination'].get(f'open_{marker}_kb') != 'closed':
#             #             if marker == 'complaints':
#             #                 change_complaints_kb_status()
#             #             elif marker == 'examination':
#             #                 change_examination_kb_status()
#             #             elif marker == 'prescription':
#             #                 change_prescription_kb_status()
#             #     data['examination']['all_kb_status'] = 'closed'
#             #     button_change_all_kb_status['text'] = 'Открыть\nвсе\nклавиатуры'
#             #
#             # elif data['examination'].get('all_kb_status') == 'closed':
#             #     for marker in ('complaints', 'examination', 'prescription'):
#             #         if not data['examination'].get(f'open_{marker}_kb') == 'open':
#             #             if marker == 'complaints':
#             #                 change_complaints_kb_status()
#             #             elif marker == 'examination':
#             #                 change_examination_kb_status()
#             #             elif marker == 'prescription':
#             #                 change_prescription_kb_status()
#             #     data['examination']['all_kb_status'] = 'open'
#             #     button_change_all_kb_status['text'] = 'Скрыть\nвсе\nклавиатуры'
#
#             root_examination.update()
#
#         def create_examination_doc(doc_size=None):
#             txt_epicrisis_add = data['examination']['ScrolledText'].get('txt_epicrisis_add')
#             txt_complaints = data['examination']['ScrolledText'].get('txt_complaints')
#             txt_anamnesis = data['examination']['ScrolledText'].get('txt_anamnesis')
#             txt_examination = data['examination']['ScrolledText'].get('txt_examination')
#             txt_diagnosis = data['examination']['ScrolledText'].get('txt_diagnosis')
#             txt_prescription = data['examination']['ScrolledText'].get('txt_prescription')
#
#
#
#             if doc_size == 'None':
#                 doc_size = None
#
#             type_ln = selected_type_ln.get()
#             if type_ln in ('Лист ВН', 'Справка ВН') and not txt_ln_num.get():
#                 messagebox.showerror('Ошибка!', 'Не указан номер документа ВН!')
#                 txt_ln_num.focus()
#             else:
#                 render_data.clear()
#
#                 date_time_str = data['examination']['var'].get('txt_date_time').get().strip()
#                 if date_time_str:
#                     render_data['date_time'] = f"Дата осмотра: {date_time_str}\n"
#                 else:
#                     render_data['date_time'] = ""
#
#                 render_data['patient_info'] = f"ФИО: {patient.get('name')}\t" \
#                                               f"Дата рождения: {patient.get('birth_date')}\t{age_txt}\n" \
#                                               f"Место осмотра: {selected_place.get()}"
#                 if selected_place.get() == 'в поликлинике':
#                     render_data[
#                         'patient_info'] = f"{render_data.get('patient_info')}\t" \
#                                           f"на приеме {data['examination']['combo_company'].get()}"
#                 render_data[
#                     'patient_info'] = f"{render_data.get('patient_info')}    {patient.get('patient_district')}-й уч"
#
#                 render_data['complaints'] = f"{txt_complaints.get(1.0, 'end').strip()}"
#                 examination_text = txt_examination.get(1.0, 'end').replace('\n', ' ').replace('  ', ' ').strip()
#                 render_data['examination'] = f" {examination_text}"
#                 render_data['diagnosis'] = f"{txt_diagnosis.get(1.0, 'end').strip()}"
#                 render_data['prescription'] = f"{txt_prescription.get(1.0, 'end').strip()}"
#
#                 add_info = ''
#                 if type_ln == 'Уход обеспечен':
#                     add_info += "Уход обеспечен\n"
#                 elif type_ln in ('Лист ВН', 'Справка ВН'):
#                     if data['examination'].get('ln_closed'):
#                         if type_ln == 'Лист ВН':
#                             add_info += f"{type_ln} № {txt_ln_num.get()} закрыт к труду c {txt_ln_until.get()}\n"
#                         else:
#                             add_info += f"{type_ln} № {txt_ln_num.get()} закрыта к труду c {txt_ln_until.get()}\n"
#                     else:
#                         add_info += f"{type_ln} № {txt_ln_num.get()} c {txt_ln_from.get()} по {txt_ln_until.get()}\n"
#                 if txt_second_examination.get():
#                     add_info += f"Повторный осмотр: {txt_second_examination.get()}\n"
#                     render_data['second_exam'] = f"Повторный осмотр: {txt_second_examination.get()}"
#                 else:
#                     render_data['second_exam'] = ''
#                 # add_info += f"Врач-педиатр: {user.get('doctor_name')}"
#
#                 render_data['doctor_name'] = user.get('doctor_name')
#                 render_data['add_info'] = add_info.strip()
#
#                 active_but = ""
#                 if child_marker:
#                     active_but += "type_examination:____child__<end!>__\n"
#                 else:
#                     active_but += "type_examination:____adult__<end!>__\n"
#                 if selected_diagnosis.get():
#                     active_but += f"selected_diagnosis_get:____{selected_diagnosis.get()}__<end!>__\n"
#
#                 active_but += f"selected_place:____{selected_place.get()}__<end!>__\n"
#
#                 for mark in ('complaints', 'examination', 'prescription'):
#                     active_but += f'{mark}:__'
#                     for but in data['examination'].get(f'{mark}_but'):
#                         if data['examination'][f'{mark}_but'].get(but).get() == 1:
#                             active_but += f'__{but}'
#                     active_but += '__<end!>__\n'
#
#                 local_drugs_text = ''
#                 for drug_category in data['examination'].get('selected_drugs', []):
#                     for drug_name in data['examination']['selected_drugs'].get(drug_category, []):
#                         for mark_flag in data['examination']['selected_drugs'][drug_category].get(drug_name, []):
#                             mark = data['examination']['selected_drugs'][drug_category][drug_name].get(mark_flag)
#                             if mark:
#                                 if isinstance(mark, list):
#                                     for mark_2 in mark:
#                                         local_drugs_text += f"____{drug_category}__{drug_name}__{mark_flag}__{mark_2}"
#                                 else:
#                                     local_drugs_text += f"____{drug_category}__{drug_name}__{mark_flag}__{mark}"
#                 if local_drugs_text:
#                     active_but += f"drugs:{local_drugs_text}__<end!>__\n"
#                 if data['examination']['anthro']['patient_anthro_data'].get():
#                     patient_anthro_data_loc = ''
#                     patient_anthro_data_but_loc = 'patient_anthro_data:____'
#
#                     npr_flag = False
#                     for mark in local_data_anthro:
#
#                         for name, variable in local_data_anthro.get(mark):
#                             select_name = data['examination']['anthro'][variable].get()
#                             if select_name:
#                                 if mark == 'anal' and not npr_flag:
#                                     patient_anthro_data_loc += '\nНПР: \n'
#                                     npr_flag = True
#
#                                 patient_anthro_data_loc += f"{name}".replace('_', select_name)
#                                 patient_anthro_data_but_loc += f"{variable}__{select_name}____".replace(',', '.')
#                                 if child_marker and doc_size == 'а5_child_disp':
#                                     patient_anthro_data_loc += '\n'
#                                 else:
#                                     patient_anthro_data_loc += '  '
#                     render_data['patient_anthro_data'] = f"{patient_anthro_data_loc}".strip()
#                     active_but = f"{active_but}" \
#                                  f"{patient_anthro_data_but_loc}__<end!>__\n"
#
#                     active_but += f"drugs:{local_drugs_text}__<end!>__\n"
#                 render_data['epicrisis_add_text'] = txt_epicrisis_add.get(1.0, 'end').strip()
#                 if (type_ln in ('Лист ВН', 'Справка ВН')
#                         and data['examination']['LN_data'].get('current_data')
#                         and data['examination']['LN_data']['current_data'].get('save')):
#                     local_ln_data = ''
#                     for marker in ('Фамилия', 'Имя', 'Отчество',
#                                    'Дата рождения', 'Место работы (службы, учебы)',
#                                    'Информация про ребенка (в корешок)'):
#                         local_ln_data += f"____{marker}__{data['examination']['LN_data']['current_data'].get(marker).get().strip()}"
#                     active_but += f"LN_blank_data:{local_ln_data}__<end!>__\n"
#
#                 active_but = f"{active_but}" \
#                              f"complaints_text:____{render_data.get('complaints')}__<end!>__\n" \
#                              f"examination_text:____{render_data.get('examination')}__<end!>__\n" \
#                              f"diagnosis_text:____{render_data.get('diagnosis')}__<end!>__\n" \
#                              f"prescription_text:____{render_data.get('prescription')}__<end!>__\n" \
#                              f"epicrisis_add_text:____{render_data.get('epicrisis_add_text')}__<end!>__\n"
#
#                 anamnesis = txt_anamnesis.get(1.0, 'end').strip()
#                 if not child_marker:
#                     active_but = f"{active_but}" \
#                                  f"anamnesis:____{anamnesis}__<end!>__\n"
#                     if anamnesis:
#                         anamnesis = f"\nАнамнез заболевания: {anamnesis}"
#                         print(anamnesis)
#                 render_data['anamnesis'] = anamnesis
#
#                 print(active_but)
#
#                 patient_anthro_data = render_data.get('patient_anthro_data', '').replace('\n', '  ')
#                 active_examination = f"{render_data.get('date_time')}{render_data.get('patient_info')}\n" \
#                                      f"{render_data.get('epicrisis_add_text')}\n" \
#                                      f"Жалобы: {render_data.get('complaints')}{anamnesis}\n" \
#                                      f"Данные объективного обследования: " \
#                                      f"{patient_anthro_data}\n" \
#                                      f"{render_data.get('examination')}\n" \
#                                      f"{render_data.get('diagnosis')}\n" \
#                                      f"{render_data.get('prescription')}\n" \
#                                      f"{render_data.get('add_info')}\n" \
#                                      f"Врач-педиатр: {user.get('doctor_name')}"
#
#                 if type_ln in ('Лист ВН', 'Справка ВН'):
#                     num_ln = ''
#                     for word in txt_ln_num.get().strip():
#                         if not word.isdigit():
#                             num_ln += word
#                     num_ln += '_'
#                     for word in txt_ln_num.get().strip():
#                         if word.isdigit():
#                             num_ln += word
#                     if data['examination'].get('ln_closed'):
#                         ln_data = f"{type_ln}__{num_ln}__closed"
#                     else:
#                         ln_data = f"{type_ln}__{num_ln}__{txt_ln_from.get().strip()}__{txt_ln_until.get().strip()}"
#
#                 else:
#                     ln_data = type_ln
#
#                 save_info_examination = [
#                     f"{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
#                     f"{user.get('doctor_name')}",
#                     'loc',
#                     ln_data,
#                     f"{patient.get('name').strip()}__{patient.get('birth_date').strip()}",
#                     active_examination,
#                     active_but,
#                     None]
#                 if doc_size:
#                     render_data['diagnosis'] = render_data.get('diagnosis', '').replace('Диагноз:', '')
#
#                     doc = DocxTemplate(f".{os.sep}example{os.sep}certificate{os.sep}осмотр_педиатра_{doc_size}.docx")
#                     doc.render(render_data)
#                     doc_name = f".{os.sep}generated{os.sep}{patient.get('name').split()[0]}_осмотр__" \
#                                f"{datetime.now().strftime('%d_%m_%Y_%H_%M')}.docx"
#                     doc_name = save_document(doc=doc, doc_name=doc_name)
#                     run_document(doc_name)
#
#                 answer, message = data_base(command='examination__save',
#                                             insert_data=save_info_examination)
#                 if not answer:
#                     messagebox.showerror("Ошибка", f"Ошибка сохранения осмотра\n{message}")
#
#                 render_data.clear()
#                 data.clear()
#                 root_examination.destroy()
#                 data_base(command="statistic_write",
#                           insert_data="Осмотр")
#
#         def paste_hr_br():
#             indicators = {
#                 '0-1': {
#                     'br': (26, 28),
#                     'hr': (104, 112),
#                     'bp': (90, 100, 60, 70)},
#
#                 '0-3': {
#                     'br': (24, 28),
#                     'hr': (96, 110),
#                     'bp': (90, 100, 60, 70)},
#                 '3-6': {
#                     'br': (22, 28),
#                     'hr': (80, 100),
#                     'bp': (96, 110, 60, 70)},
#                 '6-12': {
#                     'br': (20, 22),
#                     'hr': (70, 90),
#                     'bp': (100, 110, 60, 75)},
#                 '>12': {
#                     'br': (18, 22),
#                     'hr': (70, 80),
#                     'bp': (110, 120, 70, 78)},
#             }
#             print(type(age))
#             if age <= 1:
#                 indicator = indicators['0-1']
#             elif age <= 3:
#                 indicator = indicators['0-3']
#             elif age <= 6:
#                 indicator = indicators['3-6']
#             elif age <= 12:
#                 indicator = indicators['6-12']
#             else:
#                 indicator = indicators['>12']
#             br = random.randrange(start=indicator['br'][0], stop=indicator['br'][1], step=2)
#             hr = random.randrange(start=indicator['hr'][0], stop=indicator['hr'][1], step=2)
#             data['examination']['anthro']["txt_br_variable"].set(br)
#             data['examination']['anthro']["txt_hr_variable"].set(hr)
#             data['examination']['anthro']['txt_temp_variable'].set(random.choice(['36,6', '36,7', '36,5']))
#
#         def paste_frame_1():
#
#             def paste_frame_diagnosis():
#                 def select_diagnosis():
#                     txt_epicrisis_add = data['examination']['ScrolledText'].get('txt_epicrisis_add')
#                     txt_complaints = data['examination']['ScrolledText'].get('txt_complaints')
#                     txt_examination = data['examination']['ScrolledText'].get('txt_examination')
#                     txt_diagnosis = data['examination']['ScrolledText'].get('txt_diagnosis')
#                     txt_prescription = data['examination']['ScrolledText'].get('txt_prescription')
#
#                     data['examination']['diagnosis'] = selected_diagnosis.get()
#
#                     for mark_ in data['examination'].get('complaints_but'):
#                         data['examination']['complaints_but'].get(mark_).set(0)
#                     for mark_ in data['examination'].get('examination_but'):
#                         data['examination']['examination_but'].get(mark_).set(0)
#                     for mark_ in data['examination'].get('prescription_but'):
#                         data['examination']['prescription_but'].get(mark_).set(0)
#
#                     if data['examination'].get('selected_drugs'):
#                         data['examination']['selected_drugs'].clear()
#
#                     if child_marker:
#                         if selected_diagnosis.get() in ('Врачебно-сестринский патронаж', 'Патронаж'):
#                             for mark_ in data['examination'].get('anthro', []):
#                                 if mark_.startswith('txt_anal_'):
#                                     data['examination']['anthro'].get(mark_).set('')
#                         else:
#                             patient_age_month = patient_age.get('month')
#                             if patient_age.get('year') > 0:
#                                 patient_age_month = 12
#
#                             for mark_ in data['examination'].get('anthro', []):
#                                 if mark_.startswith('txt_anal_'):
#                                     data['examination']['anthro'].get(mark_).set(f"{patient_age_month} мес.")
#
#                     for complaints_but in all_diagnosis.get(selected_diagnosis.get()).get("complaints"):
#                         complaints_list = all_diagnosis.get(selected_diagnosis.get()).get("complaints").get(
#                             complaints_but)
#                         if isinstance(complaints_list, list):
#                             for complaints in complaints_list:
#                                 if f"{complaints_but}_{complaints}" in data['examination'].get('complaints_but'):
#                                     data['examination']['complaints_but'][f"{complaints_but}_{complaints}"].set(1)
#                         else:
#                             if complaints_but in data['examination'].get('complaints_but'):
#                                 data['examination']['complaints_but'][complaints_but].set(1)
#
#                     for examination_but in all_diagnosis.get(selected_diagnosis.get()).get("examination"):
#                         examination_list = all_diagnosis.get(selected_diagnosis.get()).get("examination").get(
#                             examination_but)
#                         if isinstance(examination_list, list):
#                             for examination in examination_list:
#                                 if f"{examination_but}_{examination}" in data['examination'].get('examination_but'):
#                                     data['examination']['examination_but'][f"{examination_but}_{examination}"].set(1)
#                         else:
#                             if examination_but in data['examination'].get('examination_but'):
#                                 data['examination']['examination_but'][examination_but].set(1)
#
#                     for prescription_but in all_diagnosis.get(selected_diagnosis.get()).get("prescription"):
#                         prescription_list = all_diagnosis.get(selected_diagnosis.get()).get("prescription").get(
#                             prescription_but)
#                         if isinstance(prescription_list, list):
#                             for prescription in prescription_list:
#                                 if f"{prescription_but}_{prescription}" in data['examination'].get('prescription_but'):
#                                     data['examination']['prescription_but'][f"{prescription_but}_{prescription}"].set(1)
#                         else:
#                             if prescription_but in data['examination'].get('prescription_but'):
#                                 data['examination']['prescription_but'][prescription_but].set(1)
#
#                     for drugs_but in all_diagnosis.get(selected_diagnosis.get()).get("drugs", []):
#
#                         if len(drugs_but.split('__')) == 4:
#                             select_drugs_item(drug_name=drugs_but)
#
#                     txt_complaints.delete(1.0, 'end')
#                     txt_complaints.insert(1.0, all_diagnosis.get(selected_diagnosis.get()).get("complaints_text", ''))
#
#                     txt_examination.delete(1.0, 'end')
#                     txt_examination.insert(1.0, all_diagnosis.get(selected_diagnosis.get()).get("examination_text", ''))
#
#                     txt_prescription.delete(1.0, 'end')
#                     txt_prescription.insert(1.0,
#                                             all_diagnosis.get(selected_diagnosis.get()).get("prescription_text", ''))
#
#                     txt_epicrisis_add.delete(1.0, 'end')
#
#                     if "Безопасность ____" in all_diagnosis.get(selected_diagnosis.get()).get(
#                             "epicrisis_add_text", ''):
#                         conversation = ("Ответственность родителей за детей",
#                                         "Безопасность сна",
#                                         "Безопасность в кроватке",
#                                         "Безопасность при купании",
#                                         "Безопасность детской одежды",
#                                         "Отравления детей",
#                                         "Домашние животные и безопасность ребёнка")
#
#                         txt_epicrisis_add.insert(1.0,
#                                                  all_diagnosis.get(selected_diagnosis.get()).get("epicrisis_add_text",
#                                                                                                  '').replace(
#                                                      'Проведена беседа: Безопасность ____',
#                                                      f"Проведена беседа: {random.choice(conversation)}"))
#                     else:
#                         txt_epicrisis_add.insert(1.0,
#                                                  all_diagnosis.get(selected_diagnosis.get()).get("epicrisis_add_text",
#                                                                                                  ''))
#                     txt_epicrisis_add["height"] = len(
#                         all_diagnosis.get(selected_diagnosis.get()).get("epicrisis_add_text", '\n').split('\n')) + 1
#
#                     if all_diagnosis.get(selected_diagnosis.get()).get("selected_place"):
#                         selected_place.set(all_diagnosis.get(selected_diagnosis.get()).get("selected_place"))
#
#                     txt_diagnosis.delete(1.0, 'end')
#                     if child_marker and data['examination'].get('get_last_diagnosis_text'):
#                         txt_diagnosis.insert(1.0, data['examination'].get('get_last_diagnosis_text'))
#
#                     elif all_diagnosis.get(selected_diagnosis.get()).get("diagnosis_text"):
#                         txt_diagnosis.insert(1.0, all_diagnosis.get(selected_diagnosis.get()).get("diagnosis_text"))
#                     else:
#                         txt_diagnosis.insert(1.0, f'Диагноз: {selected_diagnosis.get()} ')
#
#                     edit_examination_kb_text()
#                     if not data['examination'].get('all_kb_status'):
#                         change_all_kb_status()
#                     else:
#                         root_examination.update()
#
#                 frame_diagnosis = Frame(frame_main, borderwidth=1, relief="solid", padx=2, pady=2)
#
#                 loc_data = all_data_diagnosis.get('diagnosis')
#                 if child_marker:
#                     loc_data = all_data_diagnosis.get('diagnosis_child')
#
#                 Label(master=frame_diagnosis, text=f"{loc_data[0]}",
#                       font=('Comic Sans MS', user.get('text_size')), bg='white'
#                       ).pack(fill='both', expand=True, side='top')
#                 frame = Frame(frame_diagnosis, borderwidth=1)
#
#                 for mark in loc_data[1:]:
#                     side = 'left'
#                     if mark == 'Врачебно-сестринский патронаж':
#                         side = 'bottom'
#                     Radiobutton(frame, text=mark,
#                                 font=('Comic Sans MS', user.get('text_size')),
#                                 value=mark,
#                                 variable=selected_diagnosis, command=select_diagnosis,
#                                 indicatoron=False, selectcolor='#77f1ff'
#                                 ).pack(fill='both', expand=True, side=side)
#
#                 frame.columnconfigure(index='all', minsize=40, weight=1)
#                 frame.rowconfigure(index='all', minsize=20)
#                 frame.pack(fill='both', expand=True)
#
#                 frame_diagnosis.columnconfigure(index='all', minsize=40, weight=1)
#                 frame_diagnosis.rowconfigure(index='all', minsize=20)
#                 frame_diagnosis.pack(fill='both', expand=True, side='left')
#
#             def paste_frame_date_time():
#                 frame = Frame(frame_main, borderwidth=1, relief="solid", padx=2, pady=2)
#
#                 Label(master=frame, text="Дата и время осмотра:",
#                       font=('Comic Sans MS', user.get('text_size')), bg='white'
#                       ).pack(fill='both', expand=True)
#                 Entry(frame, width=15,
#                       textvariable=data['examination']['var'].get('txt_date_time'),
#                       font=('Comic Sans MS', user.get('text_size')),
#                       justify="center").pack(fill='both', expand=True)
#                 data['examination']['var']['txt_date_time'].set(datetime.now().strftime("%d.%m.%Y %H:%M"))
#
#                 frame.pack(fill='both', expand=True, side='left')
#
#             def paste_frame_button_create():
#                 def but_create_examination_doc():
#                     create_examination_doc(selected_button.get())
#
#                 frame_button = Frame(frame_main, borderwidth=1, relief="solid")
#
#                 button_change_all_kb_status = Button(frame_button, text='Скрыть\nвсе\nклавиатуры',
#                                                      command=change_all_kb_status,
#                                                      font=('Comic Sans MS', user.get('text_size')))
#                 button_change_all_kb_status.grid(column=0, row=0, rowspan=3, sticky='nswe')
#                 data['examination']['buttons']['button_change_all_kb_status'] = button_change_all_kb_status
#
#                 Button(frame_button, text='Загрузить\nпрошлые\nосмотры',
#                        command=paste_past_examination,
#                        font=('Comic Sans MS', user.get('text_size'))
#                        ).grid(column=1, row=0, rowspan=3, sticky='nswe')
#
#                 Radiobutton(frame_button, text='Печать А5',
#                             font=('Comic Sans MS', user.get('text_size')),
#                             value='а5_рек',
#                             variable=selected_button, command=but_create_examination_doc,
#                             indicatoron=False, selectcolor='#77f1ff'
#                             ).grid(column=2, row=0, columnspan=2, sticky='nswe')
#
#
#                 Radiobutton(frame_button, text='Печать А6',
#                             font=('Comic Sans MS', user.get('text_size')),
#                             value='а6',
#                             variable=selected_button, command=but_create_examination_doc,
#                             indicatoron=False, selectcolor='#77f1ff'
#                             ).grid(column=2, row=1, columnspan=2, sticky='nswe')
#
#                 Radiobutton(frame_button, text='Печать А5 + рекомендации',
#                             font=('Comic Sans MS', user.get('text_size')),
#                             value='а5',
#                             variable=selected_button, command=but_create_examination_doc,
#                             indicatoron=False, selectcolor='#77f1ff'
#                             ).grid(column=4, row=0, columnspan=2, sticky='nswe')
#
#
#                 Radiobutton(frame_button, text='Печать А6 + рекомендации',
#                             font=('Comic Sans MS', user.get('text_size')),
#                             value='а6_рек',
#                             variable=selected_button, command=but_create_examination_doc,
#                             indicatoron=False, selectcolor='#77f1ff'
#                             ).grid(column=4, row=1, columnspan=2, sticky='nswe')
#
#                 Radiobutton(frame_button, text='Сохранить без печати',
#                             font=('Comic Sans MS', user.get('text_size')),
#                             value='None',
#                             variable=selected_button, command=but_create_examination_doc,
#                             indicatoron=False, selectcolor='#77f1ff'
#                             ).grid(column=2, row=2, columnspan=4, sticky='nswe')
#
#                 if child_marker:
#                     Radiobutton(frame_button, text='Печать А5 \nежемесячный',
#                                 font=('Comic Sans MS', user.get('text_size')),
#                                 value='а5_child_disp',
#                                 variable=selected_button, command=but_create_examination_doc,
#                                 indicatoron=False, selectcolor='#77f1ff'
#                                 ).grid(column=6, row=0, rowspan=3, sticky='nswe')
#
#                 frame_button.columnconfigure(index='all', minsize=40, weight=1)
#                 frame_button.rowconfigure(index='all', minsize=20)
#                 frame_button.pack(fill='both', expand=True, side='left')
#
#
#             frame_main = Frame(examination_root, borderwidth=1, relief="solid")
#
#             paste_frame_diagnosis()
#             paste_frame_date_time()
#             paste_frame_button_create()
#
#             frame_main.columnconfigure(index='all', minsize=40, weight=1)
#             frame_main.rowconfigure(index='all', minsize=20)
#             frame_main.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#         paste_frame_1()
#
#         def my_saved_diagnosis():
#             txt_epicrisis_add = data['examination']['ScrolledText'].get('txt_epicrisis_add')
#             txt_complaints = data['examination']['ScrolledText'].get('txt_complaints')
#             txt_examination = data['examination']['ScrolledText'].get('txt_examination')
#             txt_diagnosis = data['examination']['ScrolledText'].get('txt_diagnosis')
#             txt_prescription = data['examination']['ScrolledText'].get('txt_prescription')
#
#
#             def delete_my_diagnosis():
#
#                 found_diagnosis = user.get('my_saved_diagnosis')
#                 if not found_diagnosis:
#                     messagebox.showerror('Ошибка!', f'История о сохраненных осмотрах пуста!\n')
#                     examination_root.focus()
#
#                 else:
#                     def delete_my_diagnosis_root(delete_my_diagnosis_root_main: Frame):
#                         def select_delete_diagnosis():
#                             answer, mess = data_base(command='examination__delete_my_diagnosis',
#                                                      delete_data=selected_delete_diagnosis.get())
#                             if answer:
#                                 messagebox.showinfo('Инфо', f'Осмотр успешно удален')
#                                 delete_my_diagnosis_root_main.focus()
#
#                                 destroy_elements['delete_my_diagnosis'][
#                                     f"{selected_delete_diagnosis.get()}"].destroy()
#
#                         selected_delete_diagnosis = StringVar()
#                         destroy_elements['delete_my_diagnosis'] = dict()
#
#                         for diagnosis_, examination_key_ in found_diagnosis:
#                             frame_loc = Frame(delete_my_diagnosis_root_main, borderwidth=1, relief="solid", padx=3,
#                                               pady=3)
#                             destroy_elements['delete_my_diagnosis'][f"{diagnosis_}"] = frame_loc
#                             text = f'Имя шаблона: {diagnosis_}\n'
#                             for info in examination_key_.split('__<end!>__\n'):
#                                 if 'complaints_text:____' in info:
#                                     for i in info.replace('complaints_text:____', 'Жалобы: ').split():
#                                         if len(text.split('\n')[-1]) > 90:
#                                             text += '\n'
#                                         text += f"{i} "
#                                     text += "\n"
#                                 if 'examination_text:____' in info:
#                                     for i in info.replace('examination_text:____', 'Осмотр: ').split():
#                                         if len(text.split('\n')[-1]) > 90:
#                                             text += '\n'
#                                         text += f"{i} "
#                                     text += "\n"
#                                 if 'diagnosis_text:____' in info:
#                                     for i in info.replace('diagnosis_text:____', 'Диагноз: ').split():
#                                         if len(text.split('\n')[-1]) > 90:
#                                             text += '\n'
#                                         text += f"{i} "
#                                     text += "\n"
#                                 if 'prescription_text:____' in info:
#                                     for i in info.replace('prescription_text:____', 'Рекомендации: ').split():
#                                         if len(text.split('\n')[-1]) > 90:
#                                             text += '\n'
#                                         text += f"{i} "
#                                     text += "\n"
#
#                             Label(master=frame_loc, text=text, justify="left",
#                                   font=('Comic Sans MS', user.get('text_size')),
#                                   bg='white').pack(fill='both', expand=True)
#
#                             Radiobutton(master=frame_loc, text=f"Удалить {diagnosis_}",
#                                         font=('Comic Sans MS', user.get('text_size')),
#                                         value=f"{diagnosis_}", variable=selected_delete_diagnosis,
#                                         command=select_delete_diagnosis,
#                                         indicatoron=False, selectcolor='#77f1ff').pack(fill='both', expand=True)
#
#                             frame_loc.pack(fill='both', expand=True)
#
#                     delete_diagnosis_root = ScrolledRoot(marker='delete_diagnosis_root',
#                                                          func=delete_my_diagnosis_root)
#                     delete_diagnosis_root.title(f"Удаление моих осмотров")
#                     delete_diagnosis_root.geometry('+0+0')
#                     delete_diagnosis_root.mainloop()
#
#             def select_my_saved_diagnosis():
#                 my_selected_diagnosis = \
#                     data['examination']['my_saved_diagnosis'].get(selected_diagnosis.get().replace('my__', ''))
#
#                 for but_marker in ('complaints', 'examination', 'prescription'):
#                     for mark_ in data['examination'].get(f'{but_marker}_but'):
#                         data['examination'][f'{but_marker}_but'].get(mark_).set(0)
#                 if data['examination'].get('selected_drugs'):
#                     data['examination']['selected_drugs'].clear()
#                 txt_epicrisis_add.delete(1.0, 'end')
#
#                 for selected_marker in my_selected_diagnosis.split('__<end!>__\n'):
#                     if 'selected_diagnosis_get:____' in selected_marker:
#                         selected_diagnosis.set(selected_marker.split(':____')[-1])
#                     elif "selected_place:____" in selected_marker:
#                         selected_place.set(selected_marker.replace('selected_place:____', ''))
#
#                     elif "drugs:____" in selected_marker:
#                         all_buttons = selected_marker.replace('drugs:____', '').split("____")
#
#                         for drugs_but in all_buttons:
#                             if len(drugs_but.split('__')) == 4:
#                                 select_drugs_item(drug_name=drugs_but)
#
#                     elif "epicrisis_add_text:____" in selected_marker:
#                         if "Безопасность ____" in selected_marker:
#                             conversation = ("Ответственность родителей за детей",
#                                             "Безопасность сна",
#                                             "Безопасность в кроватке",
#                                             "Безопасность при купании",
#                                             "Безопасность детской одежды",
#                                             "Отравления детей",
#                                             "Домашние животные и безопасность ребёнка")
#                             selected_marker = selected_marker.replace(
#                                                          'Безопасность ____',
#                                                          f"{random.choice(conversation)}")
#
#                         txt_epicrisis_add.insert(1.0, selected_marker.replace("epicrisis_add_text:____", ""))
#                         txt_epicrisis_add["height"] = len(selected_marker.split('\n')) + 1
#
#
#                     else:
#                         for but_marker in ('complaints', 'examination', 'prescription', 'diagnosis'):
#                             if f"{but_marker}:____" in selected_marker:
#                                 all_buttons = selected_marker.replace(f"{but_marker}:____", '').split("__")
#                                 for button in all_buttons:
#                                     if button in data['examination'].get(f'{but_marker}_but'):
#                                         data['examination'][f'{but_marker}_but'].get(button).set(1)
#
#
#                             elif f"{but_marker}_text:____" in selected_marker:
#                                 text_inserted = selected_marker.replace(f"{but_marker}_text:____", '')
#
#                                 if but_marker == 'complaints':
#                                     txt_complaints.delete(1.0, 'end')
#                                     txt_complaints.insert(1.0, text_inserted)
#                                 if but_marker == 'examination':
#                                     txt_examination.delete(1.0, 'end')
#                                     txt_examination.insert(1.0, text_inserted)
#                                 if but_marker == 'diagnosis':
#                                     txt_diagnosis.delete(1.0, 'end')
#                                     txt_diagnosis.insert(1.0, text_inserted)
#                                 if but_marker == 'prescription':
#                                     txt_prescription.delete(1.0, 'end')
#                                     txt_prescription.insert(1.0, text_inserted)
#
#                     edit_examination_kb_text()
#                     edit_complaints_kb_color()
#
#             def saved_new_diagnosis():
#                 def final_save_new_diagnosis():
#                     if data_base(command='save_new_diagnosis',
#                                  insert_data=[user.get('doctor_name'), new_diagnosis_name.get(), render_text]):
#                         messagebox.showinfo('Инфо', f'Осмотр успешно сохранен')
#                         saved_new_diagnosis_root.destroy()
#                         root_examination.destroy()
#                     else:
#                         messagebox.showerror('Ошибка!', f'Ошибка при сохранении!')
#
#                 if not new_diagnosis_name.get():
#                     messagebox.showerror('Ошибка!', 'Не указано имя осмотра для сохранения!')
#                 else:
#                     saved_new_diagnosis_root = Toplevel()
#                     saved_new_diagnosis_root.title('Проверка осмотра')
#                     saved_new_diagnosis_root.config(bg='white')
#
#                     text = f"Имя осмотра: {new_diagnosis_name.get()}\n"
#                     render_text = ''
#                     if selected_place.get():
#                         text += f"Место осмотра: {selected_place.get()}\n"
#                         render_text += f"selected_place:____{selected_place.get()}__<end!>__\n"
#                     text += f"Дополнительная информация: {txt_epicrisis_add.get(1.0, 'end').strip()}\n"
#                     for mark in ('complaints', 'examination', 'prescription'):
#                         render_text += f'{mark}:__'
#                         for but in data['examination'].get(f'{mark}_but'):
#
#                             if data['examination'][f'{mark}_but'].get(but).get() == 1:
#                                 render_text += f'__{but}'
#
#                         render_text += '__<end!>__\n'
#                     local_drugs_text = ''
#                     for drug_category in data['examination'].get('selected_drugs', []):
#                         for drug_name in data['examination']['selected_drugs'].get(drug_category, []):
#                             for mark_flag in data['examination']['selected_drugs'][drug_category].get(drug_name,
#                                                                                                       []):
#                                 mark = data['examination']['selected_drugs'][drug_category][drug_name].get(
#                                     mark_flag)
#                                 if mark:
#                                     if isinstance(mark, list):
#                                         for mark_2 in mark:
#                                             local_drugs_text += f"____{drug_category}__{drug_name}__{mark_flag}__{mark_2}"
#                                     else:
#                                         local_drugs_text += f"____{drug_category}__{drug_name}__{mark_flag}__{mark}"
#                     if local_drugs_text:
#                         render_text += f"drugs:{local_drugs_text}__<end!>__\n"
#                     examination_text = txt_examination.get(1.0, 'end').replace('\n', ' ').replace('  ', ' ').strip()
#                     render_text += f"complaints_text:____{txt_complaints.get(1.0, 'end').strip()}__<end!>__\n" \
#                                    f"examination_text:____{examination_text}__<end!>__\n" \
#                                    f"diagnosis_text:____{txt_diagnosis.get(1.0, 'end').strip()}__<end!>__\n" \
#                                    f"prescription_text:____{txt_prescription.get(1.0, 'end').strip()}__<end!>__\n" \
#                                    f"epicrisis_add_text:____{txt_epicrisis_add.get(1.0, 'end').strip()}__<end!>__\n"
#
#                     render_text = render_text.replace("'", '').replace("\"", '')
#                     if txt_complaints.get(1.0, 'end').strip():
#                         text += '\nЖалобы: '
#                         for word in txt_complaints.get(1.0, 'end').strip().split():
#                             if len(text.split('\n')[-1]) > 100:
#                                 text += '\n'
#                             text += word + " "
#                     if txt_examination.get(1.0, 'end').strip():
#                         text += '\nОсмотр: '
#                         for word in txt_examination.get(1.0, 'end').strip().split():
#                             if len(text.split('\n')[-1]) > 100:
#                                 text += '\n'
#                             text += word + " "
#                     if txt_diagnosis.get(1.0, 'end').strip():
#                         text += '\nДиагноз: '
#                         for word in txt_diagnosis.get(1.0, 'end').strip().split():
#                             if len(text.split('\n')[-1]) > 100:
#                                 text += '\n'
#                             text += word + " "
#                     if txt_prescription.get(1.0, 'end').strip():
#                         text += '\nНазначения: '
#                         for word in txt_prescription.get(1.0, 'end').strip().split():
#                             if len(text.split('\n')[-1]) > 100:
#                                 text += '\n'
#                             text += word + " "
#
#                     Label(master=saved_new_diagnosis_root, text=text, justify="left",
#                           font=('Comic Sans MS', user.get('text_size')),
#                           bg='white').pack(fill='both', expand=True)
#                     Button(saved_new_diagnosis_root, text='Сохранить',
#                            command=final_save_new_diagnosis,
#                            font=('Comic Sans MS', user.get('text_size'))).pack(fill='both', expand=True)
#
#                     saved_new_diagnosis_root.mainloop()
#
#             def add_frame_new_diagnosis():
#
#                 if not data['examination'].get('add_frame_new_diagnosis'):
#                     data['examination']['add_frame_new_diagnosis'] = 'closed'
#
#                 if data['examination'].get('add_frame_new_diagnosis') == "closed":
#                     data['examination']['add_frame_new_diagnosis'] = 'open'
#                     button_new_diagnosis['text'] = 'Не сохранять осмотр'
#
#                     frame_new_diagnosis.pack(fill='both', expand=True,
#                                              before=frame_my_diagnosis, side="bottom")
#
#                 elif data['examination'].get('add_frame_new_diagnosis') == "open":
#                     data['examination']['add_frame_new_diagnosis'] = 'closed'
#                     button_new_diagnosis['text'] = 'Сохранить текущий осмотр в шаблоны'
#                     frame_new_my_diagnosis.pack_forget()
#
#             new_diagnosis_name = StringVar()
#
#             frame_main = Frame(examination_root, borderwidth=1, relief="solid")
#             frame_title = Frame(frame_main, borderwidth=1, relief="solid")
#             frame_my_diagnosis = Frame(frame_main, borderwidth=1, relief="solid")
#             frame_new_diagnosis = Frame(frame_main, borderwidth=1, relief="solid")
#
#             button_new_diagnosis = Button(master=frame_title,
#                                           text='Сохранить текущий осмотр в шаблоны',
#                                           command=add_frame_new_diagnosis,
#                                           font=('Comic Sans MS', user.get('text_size')))
#
#             Label(master=frame_title,
#                   text="Мои шаблоны: ",
#                   font=('Comic Sans MS', user.get('text_size')), bg='white'
#                   ).pack(fill='both', expand=True, side='left')
#
#             if not user.get('my_saved_diagnosis'):
#                 Label(master=frame_title,
#                       text="История о сохраненных шаблонах пуста",
#                       font=('Comic Sans MS', user.get('text_size')), bg='white'
#                       ).pack(fill='both', expand=True, side='left')
#                 button_new_diagnosis.pack(fill='both', expand=True, side='left')
#
#
#             else:
#                 button_new_diagnosis.pack(fill='both', expand=True, side='left')
#
#                 Button(master=frame,
#                        text='Редактировать шаблоны',
#                        command=delete_my_diagnosis,
#                        font=('Comic Sans MS', user.get('text_size'))
#                        ).pack(fill='both', expand=True, side='left')
#
#                 local_data = [[]]
#                 for data_diagnosis in user.get('my_saved_diagnosis'):
#                     if len(local_data[-1]) == 5:
#                         local_data.append([])
#                     local_data[-1].append(data_diagnosis)
#
#                 data['examination']['my_saved_diagnosis'] = dict()
#                 for data_diagnosis in local_data:
#                     frame = Frame(frame_my_diagnosis)
#                     for diagnosis, examination_key in data_diagnosis:
#                         data['examination']['my_saved_diagnosis'][f"{diagnosis}"] = examination_key
#                         Radiobutton(master=frame,
#                                     text=diagnosis,
#                                     font=('Comic Sans MS', user.get('text_size')),
#                                     value=f"my__{diagnosis}", variable=selected_diagnosis,
#                                     command=select_my_saved_diagnosis,
#                                     indicatoron=False, selectcolor='#77f1ff'
#                                     ).pack(fill='both', expand=True, side='left')
#
#                     frame.pack(fill='both', expand=True)
#
#             frame_title.pack(fill='both', expand=True)
#             frame_my_diagnosis.pack(fill='both', expand=True)
#
#             Label(master=frame_new_diagnosis, text="Название осмотра: ",
#                   font=('Comic Sans MS', user.get('text_size')), bg='white'
#                   ).pack(fill='both', expand=True, side='left')
#
#             Entry(master=frame_new_diagnosis, width=30,
#                   textvariable=new_diagnosis_name,
#                   font=('Comic Sans MS', user.get('text_size'))
#                   ).pack(fill='both', expand=True, side='left')
#
#             Button(frame_new_diagnosis, text='Сохранить',
#                    command=saved_new_diagnosis,
#                    font=('Comic Sans MS', user.get('text_size'))
#                    ).pack(fill='both', expand=True, side='left')
#
#             frame_main.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#         my_saved_diagnosis()
#
#         def paste_frame_place_company():
#             def select_place():
#                 data['examination']['place'] = selected_place.get()
#                 label_place['text'] = f"Место осмотра: {selected_place.get()}"
#                 if selected_place.get() == 'в поликлинике':
#                     frame_company.pack(fill='both', expand=True, side="left")
#                 else:
#                     frame_company.pack_forget()
#
#             frame_place = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#
#
#             label_place = StringVar()
#             label_place.set('Место осмотра: в поликлинике')
#             selected_place.set('в поликлинике')
#
#             Label(master=frame_place,
#                   textvariable=label_place,
#                   font=('Comic Sans MS', user.get('text_size')),
#                   bg='white'
#                   ).pack(fill='both', expand=True, side="left")
#
#             for mark in all_data_diagnosis.get('place'):
#                 btn = Radiobutton(master=frame_place, text=mark,
#                                   font=('Comic Sans MS', user.get('text_size')),
#                                   value=mark, variable=selected_place, command=select_place,
#                                   indicatoron=False, selectcolor='#77f1ff')
#                 btn.pack(fill='both', expand=True, side="left")
#
#             frame_company = Frame(frame_place)
#             combo_company = Combobox(frame_company, font=('Comic Sans MS', user.get('text_size')),
#                                      state="readonly", justify="center")
#             data['examination']['combo_company'] = combo_company
#
#             Label(master=frame_company, text=" На осмотре ",
#                   font=('Comic Sans MS', user.get('text_size')),
#                   bg='white').pack(fill='both', expand=True, side="left")
#
#             combo_company['values'] = ['c мамой', 'c папой', 'c братом', 'c сестрой', 'c бабушкой', 'c дедушкой', 'без сопровождения']
#             combo_company.current(0)
#             combo_company.pack(fill='both', expand=True, side="left")
#
#             frame_company.columnconfigure(index='all', minsize=40, weight=1)
#             frame_company.rowconfigure(index='all', minsize=20)
#             frame_company.pack(fill='both', expand=True, side="left")
#
#             frame_place.columnconfigure(index='all', minsize=40, weight=1)
#             frame_place.rowconfigure(index='all', minsize=20)
#             frame_place.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#             frame_epicrisis_add = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#             txt_epicrisis_add = ScrolledText(frame_epicrisis_add, width=15, height=3,
#                                              font=('Comic Sans MS', user.get('text_size')),
#                                              wrap="word")
#             txt_epicrisis_add.insert(1.0, "Осмотрен на чесотку, педикулез, микроспорию\n"
#                                           "Согласие на простое медицинское вмешательство получено")
#             data['examination']['ScrolledText']['txt_epicrisis_add'] = txt_epicrisis_add
#             Label(master=frame_epicrisis_add,
#                   text="Дополнительная информация",
#                   font=('Comic Sans MS', user.get('text_size')), bg='white'
#                   ).pack(fill='both', expand=True, padx=2, pady=2)
#             txt_epicrisis_add.pack(fill='both', expand=True)
#             frame_epicrisis_add.pack(fill='both', expand=True, padx=2, pady=2)
#
#         paste_frame_place_company()
#
#         def is_valid__anthro(num, marker):
#             text = ''
#             mark, name, variable = marker.split('__')
#             if num:
#                 if variable in ("txt_weight_variable", "txt_weight_bir_variable", "txt_weight_must_variable",
#                                 "txt_weight_delta_variable", "txt_height_variable",
#                                 "txt_head_variable", "txt_chest_variable"):
#                     try:
#                         num = float(num.replace(',', '.'))
#                     except ValueError:
#                         return False
#
#             if not child_marker and variable in ("txt_weight_variable", "txt_height_variable"):
#                 if num:
#
#                     txt_imt_variable = None
#                     if variable == "txt_weight_variable" and data['examination']['anthro']["txt_height_variable"].get():
#                         height = float(data['examination']['anthro']["txt_height_variable"].get().replace(',', '.'))
#                         txt_imt_variable = round(num / float(height / 100) ** 2, 1)
#
#
#                     elif variable == "txt_height_variable" and data['examination']['anthro'][
#                         "txt_weight_variable"].get():
#                         weight = float(data['examination']['anthro']["txt_weight_variable"].get().replace(',', '.'))
#                         txt_imt_variable = round(weight / (num / 100) ** 2, 1)
#
#                     if txt_imt_variable:
#                         data['examination']['anthro']["txt_imt_variable"].set(txt_imt_variable)
#                 else:
#                     data['examination']['anthro']["txt_imt_variable"].set('')
#
#             if variable == "txt_weight_variable":
#                 if not num:
#                     edit_drugs_weight(weight='None')
#
#                 else:
#                     if child_marker:
#                         edit_drugs_weight(weight=num / 1000)
#                         if data['examination'].get('last_txt_weight_variable'):
#                             try:
#                                 last_txt_weight = float(data['examination'].get('last_txt_weight_variable'))
#                             except ValueError:
#                                 pass
#                             else:
#                                 data['examination']['anthro']['txt_weight_delta_variable'].set(
#                                     round(num - last_txt_weight))
#                     else:
#                         edit_drugs_weight(weight=num)
#
#             if variable == "txt_weight_bir_variable":
#                 if num:
#                     if patient_age.get('year') in (0, 1):
#                         loc_data = {
#                             0: 0,
#                             1: 600,
#                             2: 1400,
#                             3: 2200,
#                             4: 2950,
#                             5: 3650,
#                             6: 4300,
#                             7: 4900,
#                             8: 5450,
#                             9: 5950,
#                             10: 6400,
#                             11: 6800,
#                             12: 7150}
#                         if patient_age.get('year') == 0:
#                             age_month = patient_age.get('month')
#                             age_day = patient_age.get('day')
#
#                             weight_must = round(float(num) + loc_data.get(age_month) +
#                                                 ((loc_data.get(age_month + 1) - loc_data.get(
#                                                     age_month)) / 30 * age_day))
#                             data['examination']['anthro']['txt_weight_must_variable'].set(weight_must)
#                         else:
#                             data['examination']['anthro']['txt_weight_must_variable'].set(round(float(num) + 7150))
#                 else:
#                     data['examination']['anthro']['txt_weight_must_variable'].set('')
#
#             for mark in local_data_anthro:
#                 for name_, variable_ in local_data_anthro.get(mark):
#                     if variable_ == variable:
#                         select_name = str(num)
#                     else:
#                         select_name = data['examination']['anthro'][variable_].get()
#                     if select_name:
#                         if len(text.split('\n')[-1]) > 70:
#                             text += '\n'
#
#                         text += f"{name_}    ".replace('_', select_name)
#
#             if variable in ('txt_weight_variable', 'txt_height_variable'):
#
#                 if not data['examination']['anthro'].get('anthro_height_weight'):
#                     marker_age_y = 'после года'
#                     marker_age = patient_age.get('year')
#                     if marker_age > 17:
#                         marker_age = 17
#                     if child_marker:
#                         marker_age_y = 'до года'
#                         marker_age = patient_age.get('month')
#                         if patient_age.get('year') > 0:
#                             marker_age = 12
#                     print(f"marker_age_y {marker_age_y}, marker_age {marker_age}")
#
#                     data['examination']['anthro']['anthro_height_weight'] = dict()
#                     marker_gender = 'женский'
#                     if patient.get('gender').lower().startswith('м'):
#                         marker_gender = 'мужской'
#
#                     data['examination']['anthro']['anthro_height_weight']['anthro_height'] = \
#                         anthropometry[marker_age_y][marker_gender]['height'].get(marker_age)
#                     data['examination']['anthro']['anthro_height_weight']['anthro_weight'] = \
#                         anthropometry[marker_age_y][marker_gender]['weight'].get(marker_age)
#
#                 anthro_height = data['examination']['anthro']['anthro_height_weight'].get('anthro_height')
#                 anthro_weight = data['examination']['anthro']['anthro_height_weight'].get('anthro_weight')
#
#                 height, weight = None, None
#                 if variable == 'txt_weight_variable':
#                     if num:
#                         weight = num
#                 elif data['examination']['anthro'].get('txt_weight_variable').get():
#                     weight = float(data['examination']['anthro'].get('txt_weight_variable').get().replace(',', '.'))
#                 if variable == 'txt_height_variable':
#                     if num:
#                         height = num
#                 elif data['examination']['anthro'].get('txt_height_variable').get():
#                     height = float(data['examination']['anthro'].get('txt_height_variable').get().replace(',', '.'))
#
#                 print(
#                     f"anthro_weight {anthro_weight}, \nanthro_height {anthro_height} \nweight {weight}, height {height}")
#
#                 patient_physical_anthro = ""
#
#                 if height and weight:
#                     if anthro_height and anthro_weight:
#
#                         index_height, index_weight = 7, 7
#
#                         for a_height in anthro_height:
#                             if height < a_height:
#                                 index_height = anthro_height.index(a_height)
#                                 break
#
#                         for a_weight in anthro_weight:
#                             if weight <= a_weight:
#                                 index_weight = anthro_weight.index(a_weight)
#                                 break
#
#                         print(f"index_height {index_height}, index_weight {index_weight}\n")
#                         if index_height == 0:
#                             anthro = 'Низкое '
#                         elif index_height <= 2:
#                             anthro = 'Ниже среднего '
#                         elif index_height <= 4:
#                             anthro = 'Среднее '
#                         elif index_height <= 6:
#                             anthro = 'Выше среднего '
#                         elif index_height == 7:
#                             anthro = 'Высокое '
#
#                         if abs(index_weight - index_height) <= 1:
#                             anthro += 'гармоничное'
#                         else:
#                             if abs(index_weight - index_height) < 3:
#                                 anthro += 'дисгармоничное'
#                             else:
#                                 anthro += 'резко дисгармоничное'
#
#                             if not 2 < index_height < 5 and not 2 < index_weight < 5:
#                                 anthro += ' по росту и по весу'
#                             elif not 2 < index_height < 5:
#                                 anthro += ' по росту'
#                             elif not 2 < index_weight < 5:
#                                 anthro += ' по весу'
#
#                         patient_physical_anthro = f"Физическое развитие: {anthro}"
#                         text = f"{text.strip()}\nФизическое развитие: {anthro}"
#
#                 if weight:
#                     if anthro_weight:
#                         index_weight = 7
#                         for a_weight in anthro_weight:
#                             if weight <= a_weight:
#                                 index_weight = anthro_weight.index(a_weight)
#                                 break
#
#                         if index_weight == 0:
#                             anthro = f'Вес резко ниже нормы ({anthro_weight[0]} - {anthro_weight[-1]})'
#                         elif index_weight <= 2:
#                             anthro = 'Вес ниже среднего '
#                         elif index_weight <= 4:
#                             anthro = 'Вес в норме '
#                         elif index_weight <= 6:
#                             anthro = 'Вес выше среднего '
#                         elif index_weight == 7:
#                             anthro = f'Вес резко выше нормы ({anthro_weight[0]} - {anthro_weight[-1]})'
#
#                         patient_physical_anthro = f"{anthro} -- {patient_physical_anthro}"
#
#                 if height:
#                     if anthro_height:
#                         index_height = 7
#                         for a_height in anthro_height:
#                             if height < a_height:
#                                 index_height = anthro_height.index(a_height)
#                                 break
#
#                         if index_height == 0:
#                             anthro = f'Рост резко ниже нормы ({anthro_height[0]} - {anthro_height[-1]})'
#                         elif index_height <= 2:
#                             anthro = 'Рост ниже среднего '
#                         elif index_height <= 4:
#                             anthro = 'Рост в норме '
#                         elif index_height <= 6:
#                             anthro = 'Рост выше среднего '
#                         elif index_height == 7:
#                             anthro = f'Рост резко выше нормы ({anthro_height[0]} - {anthro_height[-1]})'
#
#                         patient_physical_anthro = f"{anthro} -- {patient_physical_anthro}"
#
#                 if not patient_physical_anthro:
#                     patient_physical_anthro = "Физическое развитие: нет данных"
#                 data['examination']['anthro']['patient_physical_anthro'].set(patient_physical_anthro)
#
#             data['examination']['anthro']['patient_anthro_data'].set(text.strip())
#
#             return True
#
#         def paste_frame_complaints():
#             def paste_complaints_kb():
#                 frame_complaints_buttons = Frame(frame_complaints, padx=1, pady=1)
#
#                 data['examination']['complaints_buttons'] = dict()
#                 data['examination']['open_complaints_kb'] = 'open'
#                 data['examination']['frames']['frame_complaints_buttons'] = frame_complaints_buttons
#                 data['examination']['complaints_but'] = dict()
#
#
#                 frame_1 = Frame(frame_complaints_buttons)
#                 frame_1.pack(fill='both', expand=True)
#
#
#                 for mark in all_data_diagnosis.get('complaints'):
#                     if isinstance(mark, tuple):
#                         frame_loc = Frame(frame_complaints_buttons)
#                         data['examination']['complaints_but'][f"{mark[0]}_main"] = IntVar()
#                         btn = Radiobutton(frame_loc, text=f"{mark[0]}",
#                                           font=('Comic Sans MS', user.get('text_size')),
#                                           value=f"{mark[0]}_main", variable=selected_button,
#                                           command=select_complaints,
#                                           indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#                         btn.pack(fill='both', expand=True, side='left')
#                         data['examination']['complaints_buttons'][f"{mark[0]}_main"] = btn
#
#                         for mark_2 in mark[1:]:
#                             data['examination']['complaints_but'][f"{mark[0]}_{mark_2}"] = IntVar()
#                             btn = Radiobutton(frame_loc, text=f"{mark_2}",
#                                               font=('Comic Sans MS', user.get('text_size')),
#                                               value=f"{mark[0]}_{mark_2}", variable=selected_button,
#                                               command=select_complaints,
#                                               indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#                             btn.pack(fill='both', expand=True, side='left')
#                             data['examination']['complaints_buttons'][f"{mark[0]}_{mark_2}"] = btn
#
#
#                         frame_loc.pack(fill='both', expand=True)
#
#                     else:
#                         data['examination']['complaints_but'][mark] = IntVar()
#                         btn = Radiobutton(frame_1, text=f"{mark}",
#                                           font=('Comic Sans MS', user.get('text_size')),
#                                           value=f"{mark}", variable=selected_button,
#                                           command=select_complaints,
#                                           indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#
#                         btn.pack(fill='both', expand=True, side='left')
#                         data['examination']['complaints_buttons'][mark] = btn
#
#
#                 frame_complaints_buttons.columnconfigure(index='all', minsize=10, weight=1)
#                 frame_complaints_buttons.rowconfigure(index='all', minsize=10)
#                 frame_complaints_buttons.grid(row=0, column=1, sticky='nsew')
#
#             def select_complaints():
#                 local_complaints = dict()
#                 text = txt_complaints.get(1.0, 'end').strip()
#                 if text and text[-1] == '.':
#                     text = text[:-1] + ', '
#                 for mark in all_data_diagnosis.get('complaints')[1:]:
#                     if isinstance(mark, tuple):
#                         text = text.replace(mark[0], f"\n__!__{mark[0]}")
#                         local_complaints[mark[0]] = ""
#                 for string in text.split('\n__!__'):
#                     for i in local_complaints.keys():
#                         if i in string:
#                             local_complaints[i] = string
#                             if data['examination']['complaints_but'].get(f"{i}_main"):
#                                 data['examination']['complaints_but'].get(f"{i}_main").set(1)
#
#                             break
#                     else:
#                         if not local_complaints.get("add"):
#                             local_complaints["add"] = ""
#                         local_complaints["add"] += string
#
#                 complaints_button = selected_button.get()
#                 if text == 'нет, ':
#                     text = ''
#
#                 selected_button.set('')
#                 if complaints_button:
#                     if complaints_button == 'нет':
#                         for mark_ in data['examination'].get('complaints_but'):
#                             data['examination']['complaints_but'].get(mark_).set(0)
#                         text = 'нет, '
#
#                     else:
#                         if data['examination']['complaints_but'].get(complaints_button):
#                             if data['examination']['complaints_but'].get(complaints_button).get() == 1:
#                                 data['examination']['complaints_but'].get(complaints_button).set(0)
#
#                             else:
#                                 data['examination']['complaints_but'].get(complaints_button).set(1)
#
#                 if complaints_button != 'нет':
#                     if '_' in complaints_button:
#                         mark_1, mark_2 = complaints_button.split('_')
#                         if data['examination']['complaints_but'].get(complaints_button).get() == 1:
#                             if not data['examination']['complaints_but'].get(f"{mark_1}_main").get() == 1:
#                                 data['examination']['complaints_but'].get(f"{mark_1}_main").set(1)
#                             text += ' '
#                             if mark_2 == 'main':
#                                 text += f"{mark_1}, "
#                             elif not local_complaints.get(mark_1):
#
#                                 text += f"{mark_1} {mark_2}, "
#                             else:
#                                 if local_complaints.get(mark_1) == f"{mark_1}, ":
#                                     local_complaints[mark_1] = f"{mark_1} "
#                                 if mark_1 == 'температура':
#                                     if local_complaints.get(mark_1).strip()[-1] in (",", "."):
#                                         local_complaints[mark_1] = local_complaints.get(mark_1).strip()[:-1]
#                                     if local_complaints.get(mark_1).strip()[-1].isdigit():
#
#                                         text = text.replace(local_complaints.get(mark_1),
#                                                             local_complaints.get(mark_1) + f" - {mark_2}, ")
#                                     else:
#                                         text = text.replace(local_complaints.get(mark_1),
#                                                             f"{local_complaints.get(mark_1)} {mark_2}, ")
#                                 else:
#
#                                     text = text.replace(local_complaints.get(mark_1),
#                                                         local_complaints.get(mark_1, f"{mark_1} ") + f"{mark_2}, ")
#
#                         else:
#                             if mark_2 == 'main':
#                                 text = text.replace(local_complaints.get(mark_1, '').split('\n')[0], "")
#                                 for but in data['examination'].get('complaints_but'):
#                                     if mark_1 in but:
#                                         data['examination']['complaints_but'].get(but).set(0)
#                             elif mark_1 == 'температура':
#                                 for i in (f" - {mark_2}", f"{mark_2} - ", f"{mark_2}, ", f", {mark_2}", f"{mark_2}"):
#                                     if i in text:
#                                         text = text.replace(i, '')
#                                         break
#
#                             else:
#                                 for i in (f"{mark_2}, ", f"{mark_2},", f", {mark_2}", f"{mark_2}"):
#                                     if i in text:
#                                         text = text.replace(i, '')
#                                         break
#                     else:
#                         if data['examination']['complaints_but'].get(complaints_button).get() == 1:
#                             if local_complaints.get("add"):
#                                 text = text.replace(local_complaints.get("add"),
#                                                     local_complaints.get("add") + f"{complaints_button}, ")
#                             else:
#                                 text = f"{complaints_button}, " + text
#
#                         else:
#                             if local_complaints.get("add"):
#                                 for i in (f"{mark_2}, ", f"{mark_2},", f", {mark_2}", f"{mark_2}"):
#                                     if i in local_complaints.get("add"):
#                                         text = text.replace(local_complaints.get("add"),
#                                                             local_complaints.get("add").replace(i, ''))
#                                         break
#                             else:
#                                 for i in (f"{mark_2}, ", f"{mark_2},", f", {mark_2}", f"{mark_2}"):
#                                     if i in text:
#                                         text = text.replace(i, '')
#                                         break
#
#                 text = text.replace('\n__!__', ' ').strip().replace(', ,', ',').replace('  ', ' ')
#                 txt_complaints.delete(1.0, 'end')
#                 if text != 'нет' and text[-2:] == ', ':
#                     text = text[:-2] + '. '
#                 txt_complaints.insert(1.0, text)
#
#                 edit_complaints_kb_color()
#
#
#             frame_complaints = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#             frame_complaints_main = Frame(frame_complaints, padx=1, pady=1)
#
#             Label(master=frame_complaints_main, text="Жалобы",
#                   font=('Comic Sans MS', user.get('text_size')), bg='white'
#                   ).grid(row=0, column=0, sticky='ew')
#
#
#
#             change_complaints_kb_button = Button(frame_complaints_main, text='скрыть клавиатуру жалоб',
#                                                  command=change_complaints_kb_status,
#                                                  font=('Comic Sans MS', user.get('text_size')))
#             change_complaints_kb_button.grid(column=1, row=0, sticky='ew')
#
#
#             txt_complaints = ScrolledText(frame_complaints_main, width=15, height=8,
#                                           font=('Comic Sans MS', user.get('text_size')),
#                                           wrap="word")
#             txt_complaints.grid(column=0, row=1, sticky='ew', columnspan=2)
#
#             frame_complaints_main.columnconfigure(index='all', minsize=10, weight=1)
#             frame_complaints_main.rowconfigure(index='all', minsize=10)
#             frame_complaints_main.grid(row=0, column=0, sticky='nsew')
#
#             data['examination']['ScrolledText']['txt_complaints'] = txt_complaints
#             data['examination']['buttons']['change_complaints_kb_button'] = change_complaints_kb_button
#
#
#             paste_complaints_kb()
#             frame_complaints.columnconfigure(index='all', minsize=40, weight=1)
#             frame_complaints.rowconfigure(index='all', minsize=20)
#             frame_complaints.pack(fill='both', expand=True, padx=2, pady=2)
#
#         def change_complaints_kb_status():
#             txt_complaints = data['examination']['ScrolledText'].get('txt_complaints')
#             frame_complaints_buttons = data['examination']['frames'].get('frame_complaints_buttons')
#             change_complaints_kb_button = data['examination']['buttons'].get('change_complaints_kb_button')
#
#             if data['examination'].get('open_complaints_kb') == 'open':
#                 data['examination']['open_complaints_kb'] = 'closed'
#                 change_complaints_kb_button['text'] = 'открыть клавиатуру жалоб'
#                 txt_complaints['height'] = 4
#                 txt_complaints['width'] = 100
#                 frame_complaints_buttons.grid_forget()
#                 # frame_complaints_main.grid_configure(row=0, column=0, sticky='ew', columnspan=3)
#             else:
#                 data['examination']['open_complaints_kb'] = 'open'
#                 change_complaints_kb_button['text'] = 'скрыть клавиатуру жалоб'
#                 txt_complaints['height'] = 8
#                 txt_complaints['width'] = 15
#                 frame_complaints_buttons.grid(row=0, column=1, sticky='ew', columnspan=2)
#                 # frame_complaints_main.grid_configure(row=0, column=0, sticky='ew', columnspan=1)
#
#         def edit_complaints_kb_color():
#             for but in data['examination'].get('complaints_buttons'):
#                 if data['examination']['complaints_but'].get(but).get() == 1:
#                     data['examination']['complaints_buttons'][but]['bg'] = '#77f1ff'
#                 else:
#                     data['examination']['complaints_buttons'][but]['bg'] = '#cdcdcd'
#
#         paste_frame_complaints()
#
#         def paste_frame_anamnesis():
#             frame_anamnesis = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#             Label(master=frame_anamnesis,
#                   text="Анамнез заболевания",
#                   font=('Comic Sans MS', user.get('text_size')), bg='white'
#                   ).pack(fill='both', expand=True, padx=2, pady=2)
#
#             txt_anamnesis = ScrolledText(frame_anamnesis, width=15, height=3,
#                                          font=('Comic Sans MS', user.get('text_size')),
#                                          wrap="word")
#             data['examination']['ScrolledText']['txt_anamnesis'] = txt_anamnesis
#
#             txt_anamnesis.pack(fill='both', expand=True)
#             frame_anamnesis.pack(fill='both', expand=True, padx=2, pady=2)
#
#         paste_frame_anamnesis()
#
#         def paste_patient_anthro_data():
#             def paste_npr_root():
#                 def selected_age_month(event=None):
#                     for age_month in data['examination'].get('npr_frame'):
#                         frame = data['examination']['npr_frame'].get(age_month)
#                         frame.pack_forget()
#
#                     frame = data['examination']['npr_frame'].get(int(combo_age_month.get()))
#                     frame.pack(fill='both', expand=True)
#
#                 local_data_npr = {
#                     1: {
#                         "Аз": "Плавное прослеживание движущегося предмета",
#                         "Ас": "Длительное слуховое сосредоточение (прислушивается к голосу взрослого, звуку игрушки и .т д.)",
#                         "Э": "Первая улыбка в ответ на речь взрослого",
#                         "ДР": "Ручки чаще слегка раскрыты",
#                         "ДО": "Лежа на животе, пытается поднимать и удерживать голову",
#                         "ПР": "Не оценивается",
#                         "PA": "Издает отдельные звуки в ответ на разговор с ним",
#                         "Н": "Не оценивается"
#                     },
#                     2: {
#                         "Аз": "Длительное сосредоточение, смотрит на лицо взрослого или неподвижный предмет. \n"
#                               "Длительно следит за движущейся игрушкой или взрослым",
#                         "Ас": "Ищущие повороты головы при длительном звуке. Поворачивает голову в сторону взрослого",
#                         "Э": "Быстро отвечает улыбкой на речь взрослого",
#                         "ДР": "Ручки чаще слегка раскрыты",
#                         "ДО": "Лежа на животе,поднимает и некоторое время удерживает голову",
#                         "ПР": "Не оценивается",
#                         "PA": "Произносит отдельные звуки",
#                         "Н": "Не оценивается"},
#                     3: {
#                         "Аз": "Зрительное сосредоточение в вертикальном положении на руках взрослого \n"
#                               "(на лице говорящего, на игрушке), длительно рассматривает свои ручки",
#                         "Ас": "Ищущие повороты головы при длительном звуке. Поворачивает голову в сторону взрослого",
#                         "Э": "Отвечает «комплексом оживления» в ответ на эмоциональное общение со взрослым (разговор). \n"
#                              "Ищет глазами ребенка, издающего звуки",
#                         "ДР": "Случайно наталкивается ручками на игрушки, низко висящие над грудью",
#                         "ДО": "Лежит на животе несколько минут, опираясь на предплечья и высоко подняв голову. \n"
#                               "Удерживает голову в вертикальном положении",
#                         "ПР": "Не оценивается",
#                         "PA": "Произносит отдельные звуки",
#                         "Н": "Не оценивается"},
#                     4: {
#                         "Аз": "Узнает мать или близкого человека (радуется)",
#                         "Ас": "Поворачивает голову в сторону невидимого источника звука инаходит его глазами. \n"
#                               "Адекватно реагирует на спокойную и плясовую мелодию",
#                         "Э": "Комплекс «оживления» во время бодрствования. Громко смеется в ответ на эмоциональное речевое общение. \n"
#                              "Ищет взглядом другого ребенка, рассматривает, радуется, тянется к нему",
#                         "ДР": "Рассматривает, ощупывает и захватывает низко висящие над грудью игрушки",
#                         "ДО": "При поддержке под мышки крепко упирается о твердую опору ногами, согнутыми в тазобедренном суставе",
#                         "ПР": "Не оценивается",
#                         "PA": "Гулит",
#                         "Н": "Во время кормления придерживает ручками грудь матери или бутылочку"
#                     },
#                     5: {
#                         "Аз": "Отличает близких людей от чужих по внешнему виду \n"
#                               "(по разному реагирует на лицо знакомого и незнакомого)",
#                         "Ас": "Узнает голос матери или близкого человека. \n"
#                               "Различает строгую и ласковую интонацию обращенной к нему речи, по-разному реагирует",
#                         "Э": "Радуется ребенку, берет унего из рук игрушку, гулит",
#                         "ДР": "Берет игрушку из рук взрослого иудерживает ее в ручке",
#                         "ДО": "Долго лежит на животе, подняв корпус и опираясь на ладони выпрямленных рук. \n"
#                               "Переворачивается со спины на живот. Ровно, устойчиво стоит при поддержке под мышки",
#                         "ПР": "Не оценивается",
#                         "PA": "Подолгу певуче гулит",
#                         "Н": "Ест с ложки полугустую и густую пищу"
#                     },
#                     6: {
#                         "Аз": "Не оценивается",
#                         "Ас": "По-разному реагирует на свое и чужое имя",
#                         "Э": "Не оценивается",
#                         "ДР": "Уверенно берет игрушки, находясь в любом положении, и подолгу занимается ими, \n"
#                               "перекладывает из одной ручки вдругую",
#                         "ДО": "Переворачивается с живота на спину. \n"
#                               "Передвигается, переставляя ручки или немного подползая",
#                         "ПР": "Не оценивается",
#                         "PA": "Произносит отдельные слоги (начало лепета)",
#                         "Н": "Хорошо ест с ложки, снимая пищу губами. \n"
#                              "Небольшое количество жидкой пищи пьет из блюдца или из чашки"},
#                     7: {
#                         "Аз": "Не оценивается",
#                         "Ас": "Не оценивается",
#                         "Э": "Не оценивается",
#                         "ДР": "Игрушкой стучит, размахивает, перекладывает, бросает ее и пр.",
#                         "ДО": "Хорошо ползает (много, быстро, в различном направлении)",
#                         "ПР": "На вопрос «где?» находит взглядом предмет на постоянном определенном месте \n"
#                               "(например, часы, куклу и пр.)",
#                         "PA": "Подолгу лепечет, произнося одни и те же слоги (2-3)",
#                         "Н": "Пьет из чашки, которую держит взрослый"},
#                     8: {
#                         "Аз": "Не оценивается",
#                         "Ас": "Не оценивается",
#                         "Э": "Смотрит на действия другого ребенка и смеется или лепечет",
#                         "ДР": "Игрушками занимается долго и разнообразно действует ими в зависимости от их свойств. \n"
#                               "Подражает действиям взрослого с игрушками (толкает мяч, стучит и тд.)",
#                         "ДО": "Сам садится, сидит, ложится. Держась за барьер, сам встает, стоит и опускается. \n"
#                               "Переступает, держась за барьер",
#                         "ПР": "На вопрос «где?» находит несколько предметов (2-3) на постоянных местах. \n"
#                               "По вербальной просьбе взрослого выполняет разученные ранее действия (без показа), \n"
#                               "например «ладушки», «дай ручку» и пр.",
#                         "PA": "Громко, четко, выразительно произносит различные слоги и повторяет их",
#                         "Н": "Ест корочку хлеба, которую сам держит в ручке. Пьет из чашки, которую держит взрослый"},
#                     9: {
#                         "Аз": "Не оценивается",
#                         "Ас": "Выполняет плясовые движения под музыку",
#                         "Э": "Подражает действиям другого ребенка. Догоняет ребенка или ползет ему навстречу",
#                         "ДР": "Выполняет различные действия с предметами в зависимости от их свойств "
#                               "(катает, открывает, гремит и т. д.)",
#                         "ДО": "Не оценивается",
#                         "ПР": "На вопрос «где?» находит несколько знакомых предметов независимо от их местоположения. "
#                               "Знает свое имя",
#                         "PA": "Подражает взрослому, повторяя за ним слоги, которые уже есть в лепете",
#                         "Н": "Пьет из чашки, слегка придерживая е руками, спокойно относится к высаживанию на горшок"},
#                     10: {
#                         "Аз": "Не оценивается",
#                         "Ас": "Выполняет плясовые движения под музыку",
#                         "Э": "Действует рядом с ребенком или одной игрушкой с ним",
#                         "ДР": "По просьбе выполняет разученные действия с игрушками, \n"
#                               "действия с предметами принимают устойчивый характер",
#                         "ДО": "Всходит на невысокую наклонную поверхность или горку, держась за перила, и сходит с нее. \n"
#                               "Идет вперед с поддержкой за оберуки",
#                         "ПР": "По просьбе «дай» находит и дает знакомые предметы. \n"
#                               "При игре с ним выполняет разученные движения (догоню-догоню, игра в прятки и т.д.)",
#                         "PA": "Подражая взрослому, повторяет за ним новые слоги, которых нет в его лепете",
#                         "Н": "Закрепляет навыки иумения, приобретенные в 9 месяцев \n"
#                              "(Пьет из чашки, слегка придерживая е руками, спокойно относится к высаживанию на горшок)"},
#                     11: {
#                         "Аз": "Не оценивается",
#                         "Ас": "Выполняет плясовые движения под музыку",
#                         "Э": "Радуется приходу детей, относится к ним избирательно",
#                         "ДР": "Овладевает новыми движениями и начинает выполнять их по команде взрослого \n"
#                               "(снимает и надевает кольца на стержень, ставит кубик на кубик)",
#                         "ДО": "Стоит самостоятельно, делает первые самостоятельные шаги",
#                         "ПР": "Понимает речь и общается (по просьбе взрослого находит любую куклу, \n"
#                               "которую видит среди игрушек, любой мяч, все машины и пр.)",
#                         "PA": "Произносит первые слова-обозначения (например: «дай», «мама», «на» и др.)",
#                         "Н": "Закрепляет навыки и умения, приобретенные в 9 месяцев \n"
#                              "(Пьет из чашки, слегка придерживая ее руками, спокойно относится к высаживанию на горшок)"},
#                     12: {
#                         "Аз": "Различает предметы по форме (отличает кирпичик от кубика по просьбе взрослого). \n"
#                               "Узнает на фотографии знакомого взрослого",
#                         "Ас": "Выполняет плясовые движения под музыку",
#                         "Э": "Ищет игрушку, спрятанную другим ребенком. \n"
#                              "Протягивает другому ребенку игрушку, сопровождая свои действия смехом и лепетом",
#                         "ДР": "Выполняет самостоятельно разученные действия с игрушками (катает, кормит, возит и пр.). \n"
#                               "Переносит действия, разученные с одним предметом, на другой (всех кормит, всех баюкает и пр.)",
#                         "ДО": "Ходит самостоятельно, без опоры",
#                         "ПР": "Знает имена взрослых, названия нескольких предметов, выполняет отдельные поручения (принеси, найди и пр.). \n"
#                               "Понимает слово «нельзя». Некоторые слова в речи взрослых принимают обобщенный характер. \n"
#                               "По просьбе взрослого выполняет ранее разученные действия с игрушками",
#                         "PA": "Легко подражает новым слогам. Произносит 5-10 облегченных слов",
#                         "Н": "Самостоятельно пьет из чашки"}
#                 }
#                 npr_name = {
#                     "Аз": "анализатор зрительный",
#                     "Ас": "анализатор слуховой",
#                     "Э": "эмоции",
#                     "ДР": "движения руки",
#                     "ДО": "движения общие",
#                     "ПР": "понимаемая речь",
#                     "PA": "речь активная",
#                     "Н": "навыки"
#                 }
#
#                 local_data_npr_anthro = {
#                     "Аз": ("Аз: _ ", "txt_anal_1_variable"),
#                     "Ас": ("Ас: _ ", "txt_anal_2_variable"),
#                     "Э": ("Э: _ ", "txt_anal_3_variable"),
#                     "ДР": ("ДР: _ ", "txt_anal_4_variable"),
#                     "ДО": ("ДО: _ ", "txt_anal_5_variable"),
#                     "ПР": ("ПР: _ ", "txt_anal_6_variable"),
#                     "PA": ("PA: _ ", "txt_anal_7_variable"),
#                     "Н": ("Н: _ ", "txt_anal_8_variable")
#                 }
#                 patient_age_month = patient_age.get('month')
#                 if patient_age.get('year') > 0:
#                     patient_age_month = 12
#                 elif patient_age.get('month') == 0:
#                     patient_age_month = 1
#
#                 frame_npr = Frame(examination_root, borderwidth=0.5, relief="solid", padx=1, pady=1, bg="#36566d")
#
#                 data['examination']['npr_frame'] = dict()
#                 for age_month in local_data_npr:
#                     frame = Frame(frame_npr)
#                     row = 0
#                     for npr_marker in local_data_npr.get(age_month):
#                         name, variable = local_data_npr_anthro.get(npr_marker)
#
#                         check = (root_examination.register(is_valid__anthro), "%P",
#                                  f"anal__{name}__{variable}")
#
#                         Label(master=frame, text=name.replace(' _', ''),
#                               font=('Comic Sans MS', user.get('text_size')),
#                               bg='white'
#                               ).grid(column=0, row=row, sticky='nwse', pady=2)
#
#                         Entry(frame, width=10,
#                               font=('Comic Sans MS', user.get('text_size')),
#                               justify="center",
#                               validate="all",
#                               textvariable=data['examination']['anthro'][variable],
#                               validatecommand=check
#                               ).grid(column=1, row=row, sticky='nwse')
#
#                         data['examination']['anthro'][variable].set(f"{patient_age_month} мес.")
#
#                         Label(master=frame, text=f"{npr_name.get(npr_marker)}",
#                               font=('Comic Sans MS', user.get('text_size')), bg='white'
#                               ).grid(row=row, column=2, sticky='nwse', pady=2)
#
#                         Label(master=frame, text=f"{local_data_npr[age_month].get(npr_marker)}",
#                               font=('Comic Sans MS', user.get('text_size')),
#                               bg='white').grid(row=row, column=3, sticky='nwse', columnspan=2, pady=2)
#                         row += 1
#
#                     frame.columnconfigure(index='all', minsize=40, weight=1)
#                     frame.rowconfigure(index='all', minsize=20)
#                     data['examination']['npr_frame'][age_month] = frame
#
#                 frame = Frame(frame_npr)
#                 Label(master=frame, text="Показатели НПР для возраста (месяцев): ",
#                       font=('Comic Sans MS', user.get('text_size')), bg='white').grid(row=0, column=0, sticky='ew')
#
#                 combo_age_month = Combobox(frame, font=('Comic Sans MS', user.get('text_size')), state="readonly",
#                                            width=10)
#                 combo_age_month['values'] = [i for i in range(1, 13)]
#                 combo_age_month.set(patient_age_month)
#                 combo_age_month.grid(row=0, column=1, sticky='ew')
#                 combo_age_month.bind("<<ComboboxSelected>>", selected_age_month)
#
#                 frame.columnconfigure(index='all', minsize=40, weight=1)
#                 frame.rowconfigure(index='all', minsize=20)
#                 frame.pack(fill='both', expand=True)
#                 data['examination']['npr_frame'][patient_age_month].pack(fill='both', expand=True)
#
#                 frame_npr.pack(fill='both', expand=True, padx=2, pady=2)
#
#             frame_patient_anthro_main = Frame(examination_root, borderwidth=0.5, relief="solid", padx=1, pady=1)
#             Label(master=frame_patient_anthro_main,
#                   text="Данные обследования",
#                   font=('Comic Sans MS', user.get('text_size')), bg='white'
#                   ).pack(fill='both', expand=True, padx=2,pady=2)
#
#             frame_patient_anthro = Frame(frame_patient_anthro_main, borderwidth=0.5, relief="solid",
#                                          padx=1, pady=1,bg="#36566d")
#
#             data['examination']['anthro'] = dict()
#             data['examination']['anthro']['patient_anthro_data'] = StringVar()
#             data['examination']['anthro']['patient_physical_anthro'] = StringVar()
#
#             for mark in local_data_anthro:
#                 for name, variable in local_data_anthro.get(mark):
#                     data['examination']['anthro'][variable] = StringVar()
#             paste_hr_br()
#             counter_col = 0
#             for mark in local_data_anthro:
#                 if mark == 'anal':
#                     continue
#
#                 frame = Frame(frame_patient_anthro, padx=3, pady=3)
#                 row = 0
#                 for name, variable in local_data_anthro.get(mark):
#                     check = (root_examination.register(is_valid__anthro), "%P",
#                              f"{mark}__{name}__{variable}")
#
#                     Label(master=frame, text=name.replace(' _', ''),
#                           font=('Comic Sans MS', user.get('text_size')),
#                           bg='white'
#                           ).grid(column=0, row=row, sticky='ew')
#
#                     Entry(frame, width=10,
#                           font=('Comic Sans MS', user.get('text_size')),
#                           justify="center",
#                           validate="all",
#                           textvariable=data['examination']['anthro'][variable],
#                           validatecommand=check
#                           ).grid(column=1, row=row, sticky='ew')
#
#                     row += 1
#
#                 frame.columnconfigure(index='all', minsize=40, weight=1)
#                 frame.rowconfigure(index='all', minsize=20)
#                 frame.grid(column=counter_col, row=0, sticky='nwse')
#                 if child_marker and mark == 'weight':
#                     frame.grid_configure(rowspan=2)
#                 counter_col += 1
#                 # frame.pack(fill='both', expand=True, side="left")
#
#             lbl = Label(master=frame_patient_anthro,
#                         textvariable=data['examination']['anthro'].get('patient_physical_anthro'),
#                         font=('Comic Sans MS', user.get('text_size')),
#                         bg='white')
#             if child_marker:
#                 lbl.grid(column=1, row=1, sticky='nwse', columnspan=3)
#             else:
#                 lbl.grid(column=0, row=1, sticky='nwse', columnspan=4)
#
#             frame_patient_anthro.columnconfigure(index='all', minsize=40, weight=1)
#             frame_patient_anthro.rowconfigure(index='all', minsize=20)
#             frame_patient_anthro.pack(fill='both', expand=True)
#             frame_patient_anthro_main.pack(fill='both', expand=True, padx=2, pady=2)
#
#             if child_marker:
#                 paste_npr_root()
#
#         local_data_anthro = {
#             "weight":
#                 (("Вес: _ кг.", "txt_weight_variable"),
#                  ("Рост: _ см.", "txt_height_variable")),
#             "hr_br":
#                 (("ЧД: _ /мин.", "txt_br_variable"),
#                  ("ЧСС: _ /мин.", "txt_hr_variable")),
#             "temp":
#                 (("Температура: _ ℃.", "txt_temp_variable"),
#                  ("sp O₂: _ %.", "txt_sp02_variable")),
#             "bp":
#                 (("АД: _ мм.рт.ст.", "txt_bp_variable"),
#                  ("ИМТ: _ кг/м²", "txt_imt_variable"))
#
#         }
#
#         if child_marker:
#             local_data_anthro = {
#                 "weight":
#                     (("Фактическиий вес: _ гр.", "txt_weight_variable"),
#                      ("Вес при рождении: _ гр.", "txt_weight_bir_variable"),
#                      ("Должный вес: _ гр.", "txt_weight_must_variable"),
#                      ("Прибавка: _ гр.", "txt_weight_delta_variable")),
#                 "height":
#                     (("Длинна тела: _ см.", "txt_height_variable"),
#                      ("Окр. головы: _ см.", "txt_head_variable"),
#                      ("Окр. груди: _  см.", "txt_chest_variable")),
#                 "other":
#                     (("Родничок: _ ", "txt_hole_head_variable"),
#                      ("Зубы: _ ", "txt_teeth_variable"),
#                      ("БЦЖ _ ", "txt_tubic_variable")),
#                 "hr_br":
#                     (("ЧД: _ /мин.", "txt_br_variable"),
#                      ("ЧСС: _ /мин.", "txt_hr_variable"),
#                      ("Температура: _ ℃.", "txt_temp_variable")),
#                 "anal":
#                     (("Аз: _ ", "txt_anal_1_variable"),
#                      ("Ас: _ ", "txt_anal_2_variable"),
#                      ("Э: _ ", "txt_anal_3_variable"),
#                      ("ДР: _ ", "txt_anal_4_variable"),
#                      ("ДО: _ ", "txt_anal_5_variable"),
#                      ("ПР: _ ", "txt_anal_6_variable"),
#                      ("PA: _ ", "txt_anal_7_variable"),
#                      ("Н: _ ", "txt_anal_8_variable")),
#
#             }
#
#         def edit_drugs_weight(weight):
#             for drug_category in ['Антибиотики', 'ОРИ']:
#                 if data['examination'].get('selected_drugs', dict()).get(drug_category):
#                     for drug_name in data['examination']['selected_drugs'].get(drug_category):
#                         drug_form = data['examination']['selected_drugs'][drug_category][drug_name].get('Форма')
#                         if drug_form:
#                             select_drugs_item(weight=weight,
#                                               drug_name=f"{drug_category}__{drug_name}__Форма__{drug_form}")
#
#         paste_patient_anthro_data()
#
#         def paste_frame_examination():
#             def paste_examination_kb():
#
#                 local_examination = all_data_diagnosis.get('examination')
#                 if child_marker:
#                     local_examination = all_data_diagnosis.get('examination_child')
#
#
#                 for mark in local_examination:
#                     frame_loc = Frame(frame_examination_buttons, borderwidth=1)
#
#                     btn = Radiobutton(frame_loc, text=f"{mark[0]}",
#                                       font=('Comic Sans MS', user.get('text_size')),
#                                       value=f"{mark[0]}", variable=selected_examination_frame,
#                                       command=select_examination_frame,
#                                       indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff',
#                                       justify='left', anchor='w', padx=10)
#                     btn.pack(fill='both', expand=True)
#                     data['examination']['examination_buttons'][mark[0]] = btn
#
#                     row, col = 0, 0
#
#                     frame_loc_but = Frame(frame_loc, borderwidth=1)
#
#                     data['examination']['examination_frame'][mark[0]] = frame_loc_but
#
#                     if mark[0] in ('Глаза', 'Отоскопия'):
#                         loc_data = {
#                             'Глаза': ("OD", "OS", "OU"),
#                             'Отоскопия': ("AD", "AS", "AU")}
#                         for mark_3 in loc_data.get(mark[0], []):
#
#                             frame_loc_but_side = Frame(frame_loc_but, borderwidth=1)
#                             row_counter, col = 1, 0
#                             loc_lbl = Label(master=frame_loc_but_side, text=f"{mark_3}",
#                                             font=('Comic Sans MS', user.get('text_size')),
#                                             bg='white')
#                             loc_lbl.grid(row=row, column=col, sticky='nwse', pady=2, padx=2)
#                             col += 1
#
#                             for mark_2 in mark[1:]:
#                                 if col == 5:
#                                     row_counter += 1
#                                     col = 1
#                                     row += 1
#                                     loc_lbl.grid_configure(rowspan=row_counter)
#                                 data['examination']['examination_but'][f"{mark[0]}_{mark_3}_{mark_2}"] = IntVar()
#                                 btn = Radiobutton(frame_loc_but_side, text=f"{mark_2}",
#                                                   font=('Comic Sans MS', user.get('text_size')),
#                                                   value=f"{mark[0]}_{mark_3}_{mark_2}",
#                                                   variable=selected_button,
#                                                   command=select_examination,
#                                                   indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#                                 btn.grid(row=row, column=col, sticky='ew')
#                                 data['examination']['examination_buttons_2_color'][
#                                     f"{mark[0]}_{mark_3}_{mark_2}"] = btn
#
#                                 col += 1
#
#                             frame_loc_but_side.columnconfigure(index='all', minsize=40, weight=1)
#                             frame_loc_but_side.rowconfigure(index='all', minsize=20)
#                             frame_loc_but_side.pack(fill='both', expand=True, padx=2, pady=3)
#
#
#                     else:
#                         frame_loc_but_string = Frame(frame_loc_but)
#                         for mark_2 in mark[1:]:
#                             if mark_2 != '\n':
#                                 data['examination']['examination_but'][f"{mark[0]}_{mark_2}"] = IntVar()
#                                 btn = Radiobutton(frame_loc_but_string, text=f"{mark_2}",
#                                                   font=('Comic Sans MS', user.get('text_size')),
#                                                   value=f"{mark[0]}_{mark_2}",
#                                                   variable=selected_button,
#                                                   command=select_examination,
#                                                   indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#                                 btn.pack(fill='both', expand=True, side='left')
#                                 data['examination']['examination_buttons_2_color'][f"{mark[0]}_{mark_2}"] = btn
#
#                                 col += 1
#
#                             if mark_2 == '\n' or col == 5:
#                                 col = 0
#
#                                 frame_loc_but_string.columnconfigure(index='all', minsize=40, weight=1)
#                                 frame_loc_but_string.rowconfigure(index='all', minsize=20)
#                                 frame_loc_but_string.pack(fill='both', expand=True)
#                                 frame_loc_but_string = Frame(frame_loc_but)
#
#                         frame_loc_but_string.columnconfigure(index='all', minsize=40, weight=1)
#                         frame_loc_but_string.rowconfigure(index='all', minsize=20)
#                         frame_loc_but_string.pack(fill='both', expand=True)
#
#                     frame_loc_but.columnconfigure(index='all', minsize=40, weight=1)
#                     frame_loc_but.rowconfigure(index='all', minsize=20)
#
#                     frame_loc.columnconfigure(index='all', minsize=40, weight=1)
#                     frame_loc.rowconfigure(index='all', minsize=20)
#                     frame_loc.pack(fill='both', expand=True)
#
#                 frame_examination_buttons.columnconfigure(index='all', minsize=40, weight=1)
#                 frame_examination_buttons.rowconfigure(index='all', minsize=20)
#                 frame_examination_buttons.pack(fill='both', expand=True, padx=2, pady=2, side='left')
#
#             def select_examination_frame():
#
#                 if data['examination']['examination_frame'].get('open_frame'):
#                     data['examination']['examination_frame'].get('open_frame').pack_forget()
#
#                 frame_loc = data['examination']['examination_frame'].get(selected_examination_frame.get())
#                 data['examination']['examination_frame']['open_frame'] = frame_loc
#                 frame_loc.pack(fill='both', expand=True)
#
#             def select_examination():
#
#                 local_examination = dict()
#
#                 text = txt_examination.get(1.0, 'end').strip()
#                 if text and text[-1] == '.':
#                     text = text[:-1] + ', '
#
#                 loc_examination = all_data_diagnosis.get('examination')
#                 if child_marker:
#                     loc_examination = all_data_diagnosis.get('examination_child')
#
#                 for mark in loc_examination:
#                     if isinstance(mark, tuple):
#                         text = text.replace(mark[0], f"\n__!__{mark[0]}")
#                         local_examination[mark[0]] = ""
#                 for string in text.split('\n__!__'):
#                     for i in local_examination.keys():
#                         if i in string:
#                             local_examination[i] = string
#                             break
#
#                 examination_button = selected_button.get()
#                 selected_button.set('')
#                 if examination_button:
#                     if data['examination']['examination_but'].get(examination_button):
#                         if data['examination']['examination_but'].get(examination_button).get() == 1:
#                             data['examination']['examination_but'].get(examination_button).set(0)
#                         else:
#                             data['examination']['examination_but'].get(examination_button).set(1)
#
#                 if len(examination_button.split('_')) == 3:
#                     mark_1, side, mark_2 = examination_button.split('_')
#                 else:
#                     mark_1, mark_2 = examination_button.split('_')
#
#                 if (data['examination']['examination_but'].get(examination_button).get() == 1
#                         and not local_examination.get(mark_1)):
#                     text += '\n'
#                     if mark_1 in ('Глаза', 'Отоскопия'):
#                         text += f"{mark_1}: {side} - {mark_2}, "
#                     else:
#                         if mark_2[-1] != '-':
#                             text += f"{mark_1}: {mark_2}, "
#                         else:
#                             text += f"{mark_1}: {mark_2} "
#                 else:
#                     if mark_1 in ('Глаза', 'Отоскопия'):
#                         loc_data = {
#                             'Глаза': ("OD", "OS", "OU"),
#                             'Отоскопия': ("AD", "AS", "AU")}
#                         for i in loc_data.get(mark_1):
#                             if i in local_examination.get(mark_1):
#                                 local_examination[mark_1] = local_examination.get(mark_1).replace(i, f"__!!__{i}")
#                         loc_data_side = dict()
#                         for side_str in local_examination.get(mark_1).split('__!!__'):
#                             for i in loc_data.get(mark_1):
#                                 if i in side_str:
#                                     loc_data_side[i] = side_str
#                         edited_text = ''
#                         for examination_but in data['examination'].get('examination_but'):
#                             if (examination_but.startswith(f"{mark_1}_{side}")
#                                     and data['examination']['examination_but'].get(examination_but).get() == 1):
#                                 edited_text += f"{examination_but.split('_')[-1]}, "
#                         if edited_text:
#                             edited_text = f"{side} - " + edited_text
#
#                             if loc_data_side.get(side):
#                                 text = text.replace(loc_data_side.get(side), edited_text)
#                             else:
#                                 local_examination[mark_1] = local_examination.get(mark_1).replace("__!!__", '')
#                                 text = text.replace(local_examination.get(mark_1), f"{local_examination.get(mark_1)}, "
#                                                                                    f"{edited_text}")
#
#                     else:
#                         edited_text = ''
#                         for examination_but in data['examination'].get('examination_but'):
#                             if (examination_but.startswith(f"{mark_1}")
#                                     and data['examination']['examination_but'].get(examination_but).get() == 1):
#                                 if examination_but[-1] != '-':
#                                     edited_text += f"{examination_but.split('_')[-1]}, "
#                                 else:
#                                     edited_text += f"{examination_but.split('_')[-1]} "
#
#                         if edited_text:
#                             edited_text = f"{mark_1}: " + edited_text
#
#                         text = text.replace(local_examination.get(mark_1), edited_text)
#
#                 if data['examination'].get('open_complaints_kb'):
#                     for but in data['examination'].get('complaints_buttons'):
#                         if data['examination']['complaints_but'].get(but).get() == 1:
#                             data['examination']['complaints_buttons'][but]['bg'] = '#77f1ff'
#                         else:
#                             data['examination']['complaints_buttons'][but]['bg'] = '#cdcdcd'
#
#                 text = text.replace('__!__', '').replace('  ', ' ').replace(' .', '.').replace(' ,', ',').replace(
#                     ',,', ',').replace('\n\n', '\n').replace(',.', ',').strip()
#                 if text[-1] == ',':
#                     text = text[:-1] + '.'
#
#                 txt_examination.delete(1.0, 'end')
#                 txt_examination.insert(1.0, text)
#                 edit_examination_kb_text()
#
#             data['examination']['open_examination_kb'] = 'open'
#             data['examination']['examination_frame'] = dict()
#             data['examination']['examination_buttons'] = dict()
#             data['examination']['examination_buttons_2_color'] = dict()
#             data['examination']['examination_but'] = dict()
#
#             frame_examination = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#             frame_examination_main = Frame(frame_examination, borderwidth=1)
#             frame_examination_buttons = Frame(frame_examination, borderwidth=1)
#
#
#             frame = Frame(frame_examination_main)
#             Label(master=frame,
#                   text="Осмотр",
#                   font=('Comic Sans MS', user.get('text_size')), bg='white'
#                   ).pack(fill='both', expand=True, side='left')
#             change_examination_kb_button = Button(frame, text='скрыть клавиатуру осмотра',
#                                                   command=change_examination_kb_status,
#                                                   font=('Comic Sans MS', user.get('text_size'))
#                                                   )
#             change_examination_kb_button.pack(fill='both', expand=True, side='left')
#             frame.pack(fill='both', expand=True)
#
#             Label(master=frame_examination_main,
#                   textvariable=data['examination']['anthro']['patient_anthro_data'],
#                   font=('Comic Sans MS', user.get('text_size')), bg='white'
#                   ).pack(fill='both', expand=True)
#
#             txt_examination = ScrolledText(frame_examination_main, width=20, height=30,
#                                            font=('Comic Sans MS', user.get('text_size')),
#                                            wrap="word")
#             txt_examination.pack(fill='both', expand=True)
#
#             frame_examination_main.pack(fill='both', expand=True, side='left')
#             paste_examination_kb()
#
#             data['examination']['ScrolledText']['txt_examination'] = txt_examination
#             data['examination']['buttons']['change_examination_kb_button'] = change_examination_kb_button
#             data['examination']['frames']['frame_examination_buttons'] = frame_examination_buttons
#
#
#             frame_examination.columnconfigure(index='all', minsize=40, weight=1)
#             frame_examination.rowconfigure(index='all', minsize=20)
#             frame_examination.pack(fill='both', expand=True, padx=2, pady=2)
#
#         def change_examination_kb_status():
#             txt_examination = data['examination']['ScrolledText'].get('txt_examination')
#             frame_examination_buttons = data['examination']['frames'].get('frame_examination_buttons')
#             change_examination_kb_button = data['examination']['buttons'].get('change_examination_kb_button')
#
#
#             if data['examination'].get('open_examination_kb') == 'open':
#                 data['examination']['open_examination_kb'] = 'closed'
#                 frame_examination_buttons.pack_forget()
#                 change_examination_kb_button['text'] = 'открыть клавиатуру осмотра'
#                 txt_examination['height'] = 8
#                 txt_examination['width'] = 100
#
#             else:
#                 data['examination']['open_examination_kb'] = 'open'
#                 frame_examination_buttons.pack(fill='both', expand=True, padx=2, pady=2)
#                 change_examination_kb_button['text'] = 'скрыть клавиатуру осмотра'
#                 txt_examination['height'] = 30
#                 txt_examination['width'] = 20
#                 edit_examination_kb_text()
#
#         def edit_examination_kb_text():
#             for button_name in data['examination'].get('examination_buttons'):
#                 text = f"{button_name}: "
#                 if button_name in ('Глаза', 'Отоскопия'):
#                     loc_data = dict()
#                     for examination_but in data['examination'].get('examination_but'):
#                         if (examination_but.startswith(button_name)
#                                 and data['examination']['examination_but'].get(examination_but).get() == 1):
#                             mark_1, side, mark_2 = examination_but.split('_')
#                             if not loc_data.get(side):
#                                 loc_data[side] = f"{side} - "
#
#                             if len(loc_data.get(side, '').split('\n')[-1]) > 70:
#                                 loc_data[side] += "\n"
#                             loc_data[side] += f"{mark_2}, "
#
#                     for side in loc_data.keys():
#                         text += loc_data.get(side, '') + '\n'
#                 else:
#                     for examination_but in data['examination'].get('examination_but'):
#                         if (examination_but.startswith(button_name)
#                                 and data['examination']['examination_but'].get(examination_but).get() == 1):
#                             if len(text.split('\n')[-1]) > 80:
#                                 text += "\n"
#
#                             text += f"{examination_but.split('_')[-1]}, "
#                 text = text[:-2]
#                 btn = data['examination']['examination_buttons'].get(button_name)
#                 btn['text'] = text.strip()
#
#             for button_name in data['examination'].get('examination_buttons_2_color'):
#                 if data['examination']['examination_but'].get(button_name):
#                     if data['examination']['examination_but'].get(button_name).get() == 1:
#                         data['examination']['examination_buttons_2_color'][button_name]['bg'] = '#77f1ff'
#                     else:
#                         data['examination']['examination_buttons_2_color'][button_name]['bg'] = '#cdcdcd'
#
#         paste_frame_examination()
#
#         def paste_diagnosis_kb():
#             def open_mkb_10_root():
#                 if not data['examination'].get('is_mkb_10_root_open'):
#                     data['examination']['is_mkb_10_root_open'] = True
#                     mkb_10_root_main.grid()
#                 else:
#                     data['examination']['is_mkb_10_root_open'] = False
#                     mkb_10_root_main.grid_remove()
#
#             def create_mkb_10_root():
#                 def celect_code():
#                     txt_diagnosis.insert('end', f"\n{celected_code.get()}")
#
#                 def search_mkb(event=None):
#                     def resize(event=None):
#                         region = canvas.bbox(tk.ALL)
#                         canvas.configure(scrollregion=region)
#
#                     def on_binds(event):
#                         canvas.idbind = canvas.bind_all("<MouseWheel>", on_mousewheel)
#
#                     def off_binds(event=None):
#                         canvas.unbind_all("<MouseWheel>")
#
#                     def on_mousewheel(event):
#
#                         region = canvas.bbox(tk.ALL)
#                         canvas.configure(scrollregion=region)
#
#                         if os.name == 'posix':
#                             canvas.yview_scroll(int(-1 * event.delta), "units")
#                         else:
#                             canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
#
#                     if data['examination'].get('frame_found_data_mkb'):
#                         frame_found_data_mkb = data['examination'].get('frame_found_data_mkb')
#                         frame_found_data_mkb.destroy()
#                     master_frame = Frame(mkb_frame_scrolled)
#                     data['examination']['frame_found_data_mkb'] = master_frame
#                     master_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#                     found_data = list()
#                     mkb_code_edit = ''
#                     mkb_name_edit = mkb_name.get()
#
#                     if mkb_code.get():
#                         word_list = ["qwertyuiopasdfghjkl;'zxcvbnm,.", "йцукенгшщзфывапролджэячсмитьбю"]
#
#                         for word in mkb_code.get().lower():
#                             if word in word_list[1]:
#                                 mkb_code_edit += word_list[0][word_list[1].index(word)]
#                             elif word == ',':
#                                 mkb_code_edit += '.'
#                             else:
#                                 mkb_code_edit += word
#                         mkb_code_edit = mkb_code_edit.upper()
#
#                     if mkb_code_edit and mkb_name_edit:
#                         for key, value in mkb_10.items():
#                             if mkb_code_edit in key and mkb_name_edit.lower() in value.lower():
#                                 found_data.append(f"{key} - {value}")
#                     elif mkb_code_edit:
#                         for key, value in mkb_10.items():
#                             if mkb_code_edit in key:
#                                 found_data.append(f"{key} - {value}")
#                     elif mkb_name_edit:
#                         for key, value in mkb_10.items():
#                             if mkb_name_edit.lower() in value.lower():
#                                 found_data.append(f"{key} - {value}")
#
#                     if found_data:
#
#                         scroll_x = tk.Scrollbar(master_frame, orient=tk.HORIZONTAL)
#                         scroll_y = tk.Scrollbar(master_frame, orient=tk.VERTICAL)
#
#                         canvas = tk.Canvas(master_frame,
#                                            xscrollcommand=scroll_x.set,
#                                            yscrollcommand=scroll_y.set)
#                         scroll_x.config(command=canvas.xview)
#                         scroll_y.config(command=canvas.yview)
#
#                         canvas_frame = Frame(canvas)
#
#                         for mkb_data in found_data:
#                             but_text = ''
#                             for i in mkb_data.split():
#                                 if len(but_text.split('\n')[-1]) > 40:
#                                     but_text += '\n'
#                                 but_text += i + ' '
#                             Radiobutton(canvas_frame, text=but_text,
#                                         font=('Comic Sans MS', user.get('text_size')),
#                                         value=f"{mkb_data}",
#                                         variable=celected_code,
#                                         command=celect_code,
#                                         indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                                         ).pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#                         # canvas_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#                         canvas['width'] = int(canvas.winfo_geometry().split('x')[0])
#                         canvas_frame['width'] = int(canvas.winfo_geometry().split('x')[0])
#                         canvas.grid(row=0, column=0, sticky="nsew")
#                         scroll_x.grid(row=1, column=0, sticky="we")
#                         scroll_y.grid(row=0, column=1, sticky="ns")
#
#                         master_frame.rowconfigure(0, weight=1)
#                         master_frame.columnconfigure(0, weight=1)
#
#                         master_frame.bind("<Configure>", resize)
#                         master_frame.update_idletasks()
#                         canvas_frame['height'] = int(mkb_10_root_main.winfo_height() - frame_main_mkb_10.winfo_height())
#
#                         canvas.bind("<Enter>", on_binds)
#                         canvas.bind("<Leave>", off_binds)
#
#                         canvas.create_window((0, 0), window=canvas_frame, anchor="nw",
#                                              width=canvas.winfo_width())
#
#                     else:
#                         Label(master_frame, text="Поиск не дал результатов!",
#                               font=('Comic Sans MS', user.get('text_size')),
#                               bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#                 mkb_code = StringVar()
#                 mkb_name = StringVar()
#                 celected_code = StringVar()
#
#                 mkb_10_root_main = Frame(master=root_examination, padx=3, pady=3, bg="#36566d")
#                 mkb_10_root_main.update_idletasks()
#
#                 frame_main_mkb_10 = Frame(mkb_10_root_main, bg="#36566d")
#                 Label(frame_main_mkb_10, text="Поиск по МКБ-10",
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#                 Button(frame_main_mkb_10, text=f"Закрыть окно",
#                        font=('Comic Sans MS', user.get('text_size')),
#                        command=open_mkb_10_root,
#                        bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#                 mkb_title_frame = Frame(frame_main_mkb_10, bg="#36566d")
#                 Label(mkb_title_frame, text="Код: ",
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, side='left')
#                 txt_mkb = Entry(mkb_title_frame, width=10,
#                                 font=('Comic Sans MS', user.get('text_size')),
#                                 justify="center",
#                                 textvariable=mkb_code)
#                 txt_mkb.pack(fill='x', expand=True, pady=3, padx=3, side='left')
#                 txt_mkb.bind('<Return>', search_mkb)
#
#                 Label(mkb_title_frame, text="Нозология: ",
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, side='left')
#                 txt_mkb = Entry(mkb_title_frame, width=30,
#                                 font=('Comic Sans MS', user.get('text_size')),
#                                 textvariable=mkb_name)
#                 txt_mkb.pack(fill='x', expand=True, pady=3, padx=3, side='left')
#                 txt_mkb.bind('<Return>', search_mkb)
#
#                 mkb_title_frame.pack(fill='x', anchor='n')
#                 frame_main_mkb_10.pack(fill='x', anchor='n')
#
#                 mkb_frame_scrolled = Frame(mkb_10_root_main)
#                 mkb_frame_scrolled.pack(fill='both', expand=True)
#
#                 data['examination']['is_mkb_10_root_open'] = False
#                 mkb_10_root_main.grid(row=0, column=3, sticky="nwse")
#
#                 mkb_10_root_main.grid_remove()
#
#             def paste_diagnosis_add_but():
#                 def select_button_risk():
#                     txt_prescription = data['examination']['ScrolledText'].get('txt_prescription')
#
#                     if data['examination']['diagnosis_add_but'].get('Группа риска__нет').get():
#                         for but_name in data['examination'].get('diagnosis_add_but'):
#                             if (but_name.startswith('Группа риска')
#                                     and data['examination']['diagnosis_add_but'].get(but_name).get()
#                                     and but_name.split('__')[-1] != 'нет'):
#                                 data['examination']['diagnosis_add_but'].get(but_name).set(0)
#
#                     select_button()
#                     risk_data = {
#                         "нет": {},
#                         "реализации ВУИ": {
#                             1: ("ОАК + ОАМ (даны направления)",),
#                             3: ("ОАК + ОАМ (даны направления)",)},
#                         "патологии ЦНС": {
#                             1: ('Консультация невролога + УЗИ ГМ',),
#                             3: ("Консультация невролога",),
#                             6: ("Консультация невролога",)},
#                         "Анемии": {
#                             1: ('ОАК + ретикулоциты',),
#                             3: ("ОАК + ретикулоциты",),
#                             6: ("ОАК + ретикулоциты",)},
#
#                         "Внезапной смерти": {
#                             1: ('ЭКГ',),
#                             12: ("ЭКГ",)},
#
#                         "Диспансеризация": {
#                             1: ("ОАК + ОАМ (даны направления)", "ОАЭ и ЭКГ при отсутствии данных о проведении",
#                                 "Консультация невролога (запись через справку)", "Консультация хирурга (ортопеда)"),
#                             6: ("Консультация офтальмолога и оториноларинголога (запись через справку)",),
#
#                             11: ("ОАК + ОАМ (даны направления)", "Консультация стоматолога в 12 мес")
#                         }
#                     }
#
#                     if patient_age.get('year') == 0:
#                         age_month = patient_age.get('month')
#                         if age_month == 0 and patient_age.get('day') > 20:
#                             age_month = 1
#                         elif age_month == 1 and patient_age.get('day') > 20:
#                             age_month = 2
#
#                         text = txt_prescription.get(1.0, 'end').strip()
#                         edited_string_risk = ''
#                         edited_string_disp = ''
#
#                         new_string_risk = ''
#                         new_string_disp = ''
#
#                         for string in text.split('\n'):
#                             if string.startswith('На основании групп риска:'):
#                                 edited_string_risk = string
#                             elif string.startswith('На основании диспансеризации:'):
#                                 edited_string_disp = string
#
#                         for but_name in data['examination'].get('diagnosis_add_but'):
#                             if (but_name.startswith('Группа риска')
#                                     and data['examination']['diagnosis_add_but'].get(but_name).get()):
#                                 risk_name = but_name.split('__')[-1]
#                                 if risk_data[risk_name].get(age_month):
#                                     if risk_name == 'Анемии' and 'ОАК' in new_string_risk:
#                                         new_string_risk = new_string_risk.replace('ОАК', "ОАК с ретикулоцитами")
#                                     elif risk_name in risk_data:
#                                         for mark in risk_data[risk_name].get(age_month):
#                                             new_string_risk += f"{mark}, "
#
#                         if risk_data["Диспансеризация"].get(age_month):
#                             for mark in risk_data["Диспансеризация"].get(age_month):
#                                 if mark not in new_string_risk:
#                                     new_string_disp += f"{mark}, "
#
#                         for mark, old_string, new_string in (
#                                 ("На основании групп риска:", edited_string_risk, new_string_risk),
#                                 ("На основании диспансеризации:", edited_string_disp, new_string_disp)):
#                             if not old_string:
#                                 if new_string:
#                                     text += f"\n{mark} {new_string}"
#                             else:
#                                 if new_string:
#                                     text = text.replace(old_string, f"{mark} {new_string}")
#                                 else:
#                                     text = text.replace(old_string, "")
#
#                         txt_prescription.delete(1.0, 'end')
#                         txt_prescription.insert(1.0, text)
#
#                 def select_button():
#                     text = txt_diagnosis.get(1.0, 'end').strip()
#                     edited_string = ''
#                     for string in text.split('\n'):
#                         for but_category in local_but_name:
#                             if string.startswith(but_category):
#                                 edited_string = string
#
#                     new_string = ''
#                     for but_name in data['examination'].get('diagnosis_add_but'):
#                         if but_name.startswith('Группа риска'):
#                             if data['examination']['diagnosis_add_but'].get(but_name).get():
#                                 if 'Группа риска' not in new_string:
#                                     new_string += "  Группа риска: "
#                                 new_string += f"{but_name.split('__')[-1]}"
#                                 if ((but_name.split('__')[-1] == 'реализации ВУИ' and patient_age.get(
#                                         'month') > 3)
#                                         or (but_name.split('__')[-1] != 'нет' and patient_age.get(
#                                             'year') > 0)):
#                                     new_string += " - риск не реализовался, "
#                                 else:
#                                     new_string += ", "
#
#
#                         else:
#                             if data['examination']['diagnosis_add_but'].get(but_name).get():
#                                 new_string += f"  {but_name}: {data['examination']['diagnosis_add_but'].get(but_name).get()}"
#
#                     if edited_string:
#                         text = text.replace(edited_string, new_string.strip())
#                     else:
#                         text += f"\n{new_string.strip()}"
#
#                     txt_diagnosis.delete(1.0, 'end')
#                     txt_diagnosis.insert(1.0, text)
#
#                 frame_diagnosis_add_but = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#                 data['examination']['diagnosis_add_but'] = dict()
#                 local_but_name = {
#                     'Группа здоровья': ("1", "2", "3", "4"),
#                     'Группа риска': ("нет", "реализации ВУИ", "патологии ЦНС", "Анемии", "Внезапной смерти"),
#                     'НПР': ("1-я группа", "2-я группа", "3-я группа", "4-я группа"),
#                     'Режим дня №': ("1", "2", "3", "4", "5"),
#                 }
#
#                 for but_category in local_but_name:
#                     frame = Frame(frame_diagnosis_add_but)
#
#                     Label(master=frame,
#                           text=but_category,
#                           font=('Comic Sans MS', user.get('text_size')), bg='white'
#                           ).pack(fill='both', expand=True, side='left', pady=2, padx=2)
#
#                     if but_category == 'Группа риска':
#
#                         for but_name in local_but_name.get(but_category):
#                             data['examination']['diagnosis_add_but'][f"{but_category}__{but_name}"] = IntVar()
#
#                             Checkbutton(frame, text=but_name,
#                                         font=('Comic Sans MS', user.get('text_size')),
#                                         variable=data['examination']['diagnosis_add_but'].get(
#                                             f"{but_category}__{but_name}"),
#                                         command=select_button_risk,
#                                         onvalue=1, offvalue=0, indicatoron=False, selectcolor='#77f1ff'
#                                         ).pack(fill='both', expand=True, side='left')
#
#                     else:
#                         data['examination']['diagnosis_add_but'][but_category] = StringVar()
#                         for but_name in local_but_name.get(but_category):
#                             Radiobutton(frame, text=but_name,
#                                         font=('Comic Sans MS', user.get('text_size')),
#                                         value=but_name,
#                                         variable=data['examination']['diagnosis_add_but'].get(but_category),
#                                         command=select_button,
#                                         indicatoron=False, selectcolor='#77f1ff'
#                                         ).pack(fill='both', expand=True, side='left')
#
#                     frame.columnconfigure(index='all', minsize=40, weight=1)
#                     frame.rowconfigure(index='all', minsize=20)
#                     frame.pack(fill='both', expand=True)
#
#                 data['examination']['diagnosis_add_but']['Группа здоровья'].set('2')
#                 if patient_age.get('month') > 0:
#                     data['examination']['diagnosis_add_but']['НПР'].set('1-я группа')
#                 if patient_age.get('month') < 3:
#                     data['examination']['diagnosis_add_but']['Режим дня №'].set('1')
#                 elif patient_age.get('month') < 6:
#                     data['examination']['diagnosis_add_but']['Режим дня №'].set('2')
#                 elif patient_age.get('month') < 9:
#                     data['examination']['diagnosis_add_but']['Режим дня №'].set('3')
#                 elif patient_age.get('year') == 0:
#                     data['examination']['diagnosis_add_but']['Режим дня №'].set('4')
#                 else:
#                     data['examination']['diagnosis_add_but']['Режим дня №'].set('4')
#                 select_button()
#
#                 frame_diagnosis_add_but.columnconfigure(index='all', minsize=40, weight=1)
#                 frame_diagnosis_add_but.rowconfigure(index='all', minsize=20)
#                 frame_diagnosis_add_but.pack(fill='both', expand=True)
#
#             def edit__txt_diagnosis(event=None):
#                 txt_diagnosis_info = txt_diagnosis.get(1.0, 'end').strip()
#                 txt_diagnosis_info = txt_diagnosis_info.replace('  ', ' ')
#                 txt_diagnosis.delete(1.0, 'end')
#                 txt_diagnosis.insert(1.0, txt_diagnosis_info)
#
#             def select_diagnosis_kb():
#                 diagnosis_button = selected_button.get()
#                 selected_button.set('')
#                 txt_diagnosis.insert("insert", f" {diagnosis_button} ")
#
#             frame_diagnosis_txt = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#             Label(master=frame_diagnosis_txt, text="Диагноз",
#                   font=('Comic Sans MS', user.get('text_size')), bg='white'
#                   ).pack(fill='both', expand=True, padx=2, pady=2)
#
#             txt_diagnosis = ScrolledText(frame_diagnosis_txt, width=70, height=3,
#                                          font=('Comic Sans MS', user.get('text_size')),
#                                          wrap="word")
#             data['examination']['ScrolledText']['txt_diagnosis'] = txt_diagnosis
#
#             txt_diagnosis.pack(fill='both', expand=True, side=tk.LEFT)
#             txt_diagnosis.insert(1.0, 'Диагноз: ')
#             frame_diagnosis_txt.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#             txt_diagnosis['width'] = 30
#             txt_diagnosis['height'] = 5
#             txt_diagnosis.bind("<FocusOut>", edit__txt_diagnosis)
#
#             frame_diagnosis_kb = Frame(frame_diagnosis_txt, borderwidth=1, relief="solid")
#             destroy_elements['frame_diagnosis_kb'] = frame_diagnosis_kb
#
#             row, col = 0, 0
#             local_diagnosis_kb = all_data_diagnosis.get('diagnosis_ori')
#             if child_marker:
#                 local_diagnosis_kb = all_data_diagnosis.get('diagnosis_key_child')
#
#             for mark_group in local_diagnosis_kb:
#                 mark_group_frame = Frame(frame_diagnosis_kb)
#                 for mark in mark_group:
#                     btn = Radiobutton(mark_group_frame, text=mark,
#                                       font=('Comic Sans MS', user.get('text_size')),
#                                       value=f"{mark}",
#                                       variable=selected_button,
#                                       command=select_diagnosis_kb,
#                                       indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#
#                     btn.grid(row=row, column=col, sticky='ew')
#                     col += 1
#                     # if col == 4:
#                     #     col = 0
#                     #     row += 1
#                 mark_group_frame.columnconfigure(index='all', minsize=40, weight=1)
#                 mark_group_frame.rowconfigure(index='all', minsize=20)
#
#                 mark_group_frame.pack(fill='both', expand=True)
#
#             Button(frame_diagnosis_kb, text='MKБ-10',
#                    command=open_mkb_10_root,
#                    font=('Comic Sans MS', user.get('text_size'))).pack(fill='both', expand=True)
#
#             frame_diagnosis_kb.columnconfigure(index='all', minsize=40, weight=1)
#             frame_diagnosis_kb.rowconfigure(index='all', minsize=20)
#             frame_diagnosis_kb.pack(fill='both', expand=True, side=tk.LEFT)
#
#             if child_marker:
#                 paste_diagnosis_add_but()
#
#         paste_diagnosis_kb()
#
#         def paste_frame_prescription():
#             def create_analyzes_root():
#                 txt_diagnosis = data['examination']['ScrolledText'].get('txt_diagnosis')
#
#                 def create_anal_doc():
#                     if not data['examination']['analyzes'].get('patient_anal'):
#                         messagebox.showerror('Ошибка!', "Выберите хотя бы один анализ!")
#                     else:
#
#                         render_data['ped_div'] = user.get('ped_div')
#                         render_data['doc_name'] = user.get('doctor_name')
#                         render_data['district'] = patient.get('patient_district')
#                         render_data['name'] = patient.get('name')
#                         render_data['birth_date'] = patient.get('birth_date')
#                         render_data['address'] = patient.get('address')
#                         render_data['gender'] = patient.get('gender')
#                         render_data['date'] = datetime.now().strftime("%d.%m.%Y")
#                         render_data['amb_cart'] = patient.get('amb_cart')
#
#                         print(data['examination']['analyzes'].get('patient_anal'))
#                         if 'blood-inf__ГЕПАТИТ' in data['examination']['analyzes'].get('patient_anal'):
#                             with sq.connect(f".{os.sep}data_base{os.sep}patient_data_base.db") as conn:
#                                 cur = conn.cursor()
#                                 cur.execute(
#                                     f"SELECT Прививки FROM patient_data WHERE amb_cart LIKE '{patient.get('amb_cart')}'")
#                                 vaccination = cur.fetchone()[0]
#                             if vaccination:
#                                 vaccination = vaccination.split('\n')
#                                 start = vaccination.index('Прививки против гепатита В')
#                                 stop = vaccination.index('Прививки против кори, эпидемического паротита и краснухи')
#                                 text = ''
#                                 counter = 0
#                                 for index in range(start + 1, stop):
#                                     counter += 1
#                                     if counter % 2 == 0:
#                                         end = '\n'
#                                     else:
#                                         end = '\t\t'
#
#                                     index_str = vaccination[index].split('__')
#                                     text += f"V_{counter}: {index_str[1]} --- {index_str[3]} --- {index_str[6]}{end}"
#                                 if not text:
#                                     text = 'Нет данных о вакцинации\n'
#
#                             else:
#                                 text = 'Нет данных о вакцинации\n'
#
#                             render_data['VGB_vaccination'] = text
#
#                         all_links = list()
#                         for anal_name in data['examination']['analyzes'].get('patient_anal'):
#                             category, anal_name = anal_name.split('__')
#
#                             doc = DocxTemplate(f".{os.sep}example{os.sep}{category}{os.sep}{anal_name}.docx")
#                             doc.render(render_data)
#                             doc.save(f".{os.sep}generated{os.sep}{anal_name}.docx")
#                             all_links.append(f".{os.sep}generated{os.sep}{anal_name}.docx")
#
#                         master = Document(all_links.pop(0))
#                         composer = Composer(master)
#                         for link in all_links:
#                             master.add_page_break()
#                             doc_temp = Document(link)
#                             composer.append(doc_temp)
#                         doc_name = f".{os.sep}generated{os.sep}Анализы.docx"
#                         doc_name = save_document(doc=composer, doc_name=doc_name)
#                         data['examination']['analyzes']['patient_anal'].clear()
#                         for btn_name in data['examination']['analyzes'].get('anal_name_buttons'):
#                             active_btn = data['examination']['analyzes']['anal_name_buttons'].get(btn_name)
#                             active_btn['bg'] = '#cdcdcd'
#                             active_btn['text'] = f"{btn_name.split('__')[-1]}"
#
#                         selected_anal.set('')
#                         render_data.clear()
#                         open_analyzes_root()
#
#                         run_document(doc_name)
#
#                         data_base(command="statistic_write",
#                                   insert_data="Анализы")
#
#                 def select_anal_name():
#
#                     category, anal_name = selected_button.get().split('__')
#                     if category == 'add':
#                         if anal_name == 'ОАК  +  ФОРМУЛА':
#                             anal_name = 'blood__ОАК + ФОРМУЛА'
#                             if anal_name not in data['examination']['analyzes'].get('patient_anal'):
#                                 data['examination']['analyzes']['patient_anal'].append("blood__ОАК + ФОРМУЛА")
#                                 active_btn = data['examination']['analyzes']['anal_name_buttons'].get(
#                                     "blood__ОАК + ФОРМУЛА")
#                                 active_btn['bg'] = '#77f1ff'
#                                 active_btn['text'] = f"✔{anal_name}"
#                         else:
#                             for marker in anal_name.split(' + '):
#                                 for btn_name in data['examination']['analyzes'].get('anal_name_buttons'):
#                                     if (marker in btn_name
#                                             and 'add' not in btn_name
#                                             and btn_name not in data['examination']['analyzes'].get('patient_anal')):
#                                         data['examination']['analyzes']['patient_anal'].append(btn_name)
#                                         active_btn = data['examination']['analyzes']['anal_name_buttons'].get(btn_name)
#                                         active_btn['bg'] = '#77f1ff'
#                                         active_btn['text'] = f"✔{marker}"
#                                         break
#                     else:
#                         btn_name = f"{category}__{anal_name}"
#                         active_btn = data['examination']['analyzes']['anal_name_buttons'].get(btn_name)
#
#                         if btn_name in data['examination']['analyzes'].get('patient_anal'):
#                             data['examination']['analyzes']['patient_anal'].remove(btn_name)
#                             active_btn['bg'] = '#cdcdcd'
#                             active_btn['text'] = f"{anal_name}"
#                         else:
#                             data['examination']['analyzes']['patient_anal'].append(btn_name)
#                             active_btn['bg'] = '#77f1ff'
#                             active_btn['text'] = f"✔{anal_name}"
#
#                     if 'blood__ОАК' in data['examination']['analyzes'].get('patient_anal') and \
#                             ('blood__ОАК + ФОРМУЛА' in data['examination']['analyzes'].get('patient_anal')
#                              or 'blood__ОАК + СВЕРТЫВАЕМОСТЬ' in data['examination']['analyzes'].get('patient_anal')):
#                         data['examination']['analyzes']['patient_anal'].remove("blood__ОАК")
#                         data['examination']['analyzes']['anal_name_buttons'][f"blood__ОАК"]['bg'] = '#cdcdcd'
#                         data['examination']['analyzes']['anal_name_buttons'][f"blood__ОАК"]['text'] = "ОАК"
#
#                     lbl_text = "Анализы: "
#                     for anal_name in data['examination']['analyzes'].get('patient_anal'):
#                         category, anal_name = anal_name.split('__')
#                         lbl_text += f"{anal_name}, "
#                         if len(lbl_text.split('\n')[-1]) > 40:
#                             lbl_text += '\n'
#
#                     lbl_text = lbl_text.strip()[:-1]
#                     selected_anal.set(lbl_text)
#                     lbl_text = lbl_text.replace('\n', '').lower().replace('анализы', 'Анализы')
#
#                     prescription_text = txt_prescription.get(1.0, 'end').strip()
#                     for string in prescription_text.split('\n'):
#                         if string.startswith("Анализы:"):
#                             prescription_text = prescription_text.replace(string, lbl_text)
#                             break
#                     else:
#                         prescription_text = f"{lbl_text}\n{prescription_text}"
#                     txt_prescription.delete(1.0, 'end')
#                     txt_prescription.insert(1.0, prescription_text)
#
#                 def select_anal_category():
#                     if data['examination']['analyzes'].get('frame_anal_active'):
#                         frame_anal_active = data['examination']['analyzes'].get('frame_anal_active')
#                         frame_anal_active.pack_forget()
#                     master_frame = data['examination']['analyzes']['anal_category_frames'].get(selected_button.get())
#                     data['examination']['analyzes']['frame_anal_active'] = master_frame
#                     master_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#                 data['examination']['analyzes'] = {
#                     'is_analyzes_root_open': False,
#                     'frame_anal_active': None,
#                     'anal_name_buttons': dict(),
#                     'anal_category_frames': dict(),
#                     'patient_anal': list()}
#                 analyzes_root_main = Frame(master=root_examination, padx=3, pady=3, bg="#36566d")
#                 analyzes_root_main.update_idletasks()
#
#                 frame_main_analyzes = Frame(analyzes_root_main, bg="#36566d")
#                 anal_frame_category = Frame(analyzes_root_main)
#
#                 selected_anal = StringVar()
#
#                 Label(frame_main_analyzes, textvariable=selected_anal,
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#                 Button(frame_main_analyzes, text=f"Закрыть окно",
#                        font=('Comic Sans MS', user.get('text_size')),
#                        command=open_analyzes_root,
#                        bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#                 Button(frame_main_analyzes, text=f"Создать документ",
#                        font=('Comic Sans MS', user.get('text_size')),
#                        command=create_anal_doc,
#                        bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#                 Label(frame_main_analyzes, text=f"Категории анализов:\n{'_' * 50}",
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#                 for category in all_blanks_anal:
#                     Radiobutton(frame_main_analyzes, text=all_blanks_anal.get(category)[0],
#                                 font=('Comic Sans MS', user.get('text_size')),
#                                 value=category, variable=selected_button,
#                                 command=select_anal_category,
#                                 indicatoron=False, selectcolor='#77f1ff',
#                                 bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3)
#
#                     master_frame = Frame(anal_frame_category)
#                     for anal_name in all_blanks_anal.get(category)[1:]:
#                         btn = Radiobutton(master_frame, text=f'{anal_name}',
#                                           font=('Comic Sans MS', user.get('text_size')),
#                                           value=f"{category}__{anal_name}", variable=selected_button,
#                                           command=select_anal_name,
#                                           indicatoron=False, selectcolor='#77f1ff',
#                                           bg='#cdcdcd')
#                         btn.pack(fill='both', expand=True, anchor='n')
#                         data['examination']['analyzes']['anal_name_buttons'][f"{category}__{anal_name}"] = btn
#                     data['examination']['analyzes']['anal_category_frames'][category] = master_frame
#
#                 frame_main_analyzes.pack(fill='x', anchor='n')
#                 anal_frame_category.pack(fill='both', expand=True)
#                 analyzes_root_main.grid(row=0, column=3, sticky="nwse")
#                 analyzes_root_main.grid_remove()
#
#             def create_consultation_root():
#                 txt_diagnosis = data['examination']['ScrolledText'].get('txt_diagnosis')
#
#                 cons_doc = ("офтальмолога", "хирурга", "оториноларинголога",
#                             "гастроэнтеролога", "пульмонолога", "невролога",
#                             "R-грамма ОГК", "R-грамма ППН", "ЭКГ")
#
#                 def create_consult_doc():
#                     if not data['examination']['consultation'].get('patient_consult'):
#                         messagebox.showerror('Ошибка!', "Выберите хотя бы одного специалиста!")
#                     else:
#
#                         render_data['address_hospital'] = ' '
#                         render_data['hospital'] = 'УЗ 19-я Городская детская поликлиника'
#                         render_data['diagnosis'] = txt_diagnosis.get(1.0, 'end').strip().replace('Диагноз:', "")
#
#                         render_data['ped_div'] = user.get('ped_div')
#                         render_data['doc_name'] = user.get('doctor_name')
#                         render_data['district'] = patient.get('patient_district')
#                         render_data['name'] = patient.get('name')
#                         render_data['birth_date'] = patient.get('birth_date')
#                         render_data['address'] = patient.get('address')
#                         render_data['gender'] = patient.get('gender')
#                         render_data['date'] = datetime.now().strftime("%d.%m.%Y")
#                         render_data['amb_cart'] = patient.get('amb_cart')
#
#                         print(data['examination']['consultation'].get('patient_consult'))
#
#                         all_links = list()
#                         for consult_name in data['examination']['consultation'].get('patient_consult'):
#                             render_data['doctor'] = consult_name
#
#                             doc = DocxTemplate(f".{os.sep}example{os.sep}direction{os.sep}НА КОНСУЛЬТАЦИЮ.docx")
#                             doc.render(render_data)
#                             doc.save(f".{os.sep}generated{os.sep}напр_{consult_name}.docx")
#                             all_links.append(f".{os.sep}generated{os.sep}напр_{consult_name}.docx")
#
#                         master = Document(all_links.pop(0))
#                         composer = Composer(master)
#                         for link in all_links:
#                             master.add_page_break()
#                             doc_temp = Document(link)
#                             composer.append(doc_temp)
#                         doc_name = f".{os.sep}generated{os.sep}Направление.docx"
#                         doc_name = save_document(doc=composer, doc_name=doc_name)
#                         data['examination']['consultation']['patient_consult'].clear()
#                         for btn_name in data['examination']['consultation'].get('consult_name_buttons'):
#                             active_btn = data['examination']['consultation']['consult_name_buttons'].get(btn_name)
#                             active_btn['bg'] = '#cdcdcd'
#                             active_btn['text'] = f"{btn_name.split('__')[-1]}"
#
#                         selected_consult.set('')
#                         render_data.clear()
#                         open_consultation_root()
#                         run_document(doc_name)
#
#                         data_base(command="statistic_write",
#                                   insert_data="Направление")
#
#                 def select_consult_name():
#
#                     consult_name = selected_button.get()
#                     active_btn = data['examination']['consultation']['consult_name_buttons'].get(consult_name)
#
#                     if consult_name in data['examination']['consultation'].get('patient_consult'):
#                         data['examination']['consultation']['patient_consult'].remove(consult_name)
#                         active_btn['bg'] = '#cdcdcd'
#                         active_btn['text'] = f"{consult_name}"
#                     else:
#                         data['examination']['consultation']['patient_consult'].append(consult_name)
#                         active_btn['bg'] = '#77f1ff'
#                         active_btn['text'] = f"✔{consult_name}"
#
#                     lbl_text = "Консультация: "
#                     for consult_name in data['examination']['consultation'].get('patient_consult'):
#                         lbl_text += f"{consult_name}, "
#                         if len(lbl_text.split('\n')[-1]) > 40:
#                             lbl_text += '\n'
#
#                     lbl_text = lbl_text.strip()[:-1]
#                     selected_consult.set(lbl_text)
#                     lbl_text = lbl_text.replace('\n', '')
#                     prescription_text = txt_prescription.get(1.0, 'end').strip()
#                     for string in prescription_text.split('\n'):
#                         if string.startswith("Консультация:"):
#                             prescription_text = prescription_text.replace(string, lbl_text)
#                             break
#                     else:
#                         prescription_text = f"{lbl_text}\n{prescription_text}"
#                     txt_prescription.delete(1.0, 'end')
#                     txt_prescription.insert(1.0, prescription_text)
#
#                 data['examination']['consultation'] = {
#                     'is_consultation_root_open': False,
#                     'consult_name_buttons': dict(),
#                     'patient_consult': list()}
#                 consultation_root_main = Frame(master=root_examination, padx=3, pady=3, bg="#36566d")
#                 consultation_root_main.update_idletasks()
#
#                 frame_main_consultation = Frame(consultation_root_main, bg="#36566d")
#                 consult_frame_category = Frame(consultation_root_main)
#
#                 selected_consult = StringVar()
#
#                 Label(frame_main_consultation, textvariable=selected_consult,
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#                 Button(frame_main_consultation, text=f"Закрыть окно",
#                        font=('Comic Sans MS', user.get('text_size')),
#                        command=open_consultation_root,
#                        bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#                 Button(frame_main_consultation, text=f"Создать документ",
#                        font=('Comic Sans MS', user.get('text_size')),
#                        command=create_consult_doc,
#                        bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#                 Label(frame_main_consultation, text=f"Специалисты:\n{'_' * 50}",
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#                 for consult_name in cons_doc:
#                     btn = Radiobutton(consult_frame_category, text=consult_name,
#                                       font=('Comic Sans MS', user.get('text_size')),
#                                       value=consult_name, variable=selected_button,
#                                       command=select_consult_name,
#                                       indicatoron=False, selectcolor='#77f1ff',
#                                       bg='#cdcdcd')
#                     btn.pack(fill='both', expand=True, anchor='n')
#                     data['examination']['consultation']['consult_name_buttons'][consult_name] = btn
#
#                 frame_main_consultation.pack(fill='x', anchor='n')
#                 consult_frame_category.pack(fill='both', expand=True)
#                 consultation_root_main.grid(row=0, column=3, sticky="nwse")
#                 consultation_root_main.grid_remove()
#
#             def create_drugs_root():
#
#                 def create_recipe():
#                     drug_category, drug_name, marker_rp = selected_button.get().split('__')
#                     selected_button.set('')
#
#                     print(drug_name, marker_rp)
#                     prescription_text = txt_prescription.get(1.0, 'end').strip().split('\n')
#                     edited_string = ''
#                     for string in prescription_text:
#                         if string.startswith(f"{drug_name}: "):
#                             edited_string = string
#                     if not edited_string:
#                         messagebox.showerror("Ошибка!", "Перед созданием рецепта выберите препарат \n"
#                                                         "(форма/дозировка/способ применения)")
#                     elif (drug_category == 'ОРИ'
#                           and drug_name in ('Парацетамол', 'Ибупрофен')
#                           and data['examination']['selected_drugs'][drug_category][drug_name].get("Форма",
#                                                                                                   '') == 'автоматически'):
#                         messagebox.showerror("Ошибка!", "Выберите определенную форму лекарства")
#
#                     else:
#
#                         d_t_d_n = '1 (одна упаковка)'
#                         drug_name_short = edited_string.split('--')[0].strip()
#
#                         if data['examination']['selected_drugs'][drug_category][drug_name].get("Форма", ''):
#                             form = data['examination']['selected_drugs'][drug_category][drug_name].get("Форма", '')
#                             if recipe_data.get(drug_category, dict()).get(drug_name, dict()).get(form):
#                                 d_t_d_n = recipe_data[drug_category][drug_name].get(form)
#
#                         signatura = edited_string.replace(drug_name_short, '').replace('--', '-').replace('  ', ' ')
#                         signatura = signatura.replace('выписан рецепт', '').replace('выписан льготный рецепт',
#                                                                                     '').strip()
#                         if signatura.startswith('-'):
#                             signatura = signatura[1:]
#                         signatura = signatura.replace(' ,', '').strip()
#                         if 'суппозитории' in edited_string:
#                             signatura = f"Ректально {signatura}"
#                         elif (drug_category != 'Бронхолитики'
#                               and drug_category != 'Глазные капли'
#                               and 'капли' not in drug_name
#                               and 'спрей' not in drug_name
#                               and 'Внутримышечно' not in signatura
#                               and 'ингалляц' not in signatura):
#                             signatura = f"Принимать внутрь {signatura}"
#
#                         render_data.clear()
#
#                         render_data['date'] = datetime.now().strftime("%d.%m.%Y")
#                         patient_name = ''
#                         for i in patient.get('name').strip().split():
#                             if not patient_name:
#                                 patient_name += f"{i} "
#                             else:
#                                 patient_name += f"{i[0]}."
#                         render_data['name_short'] = patient_name
#                         render_data['birth_date'] = patient.get('birth_date')
#                         render_data['doc_name'] = user.get('doctor_name')
#                         render_data['rp'] = f"{drug_name_short}\nD.t.d.n {d_t_d_n}\nS.: {signatura}"
#                         render_data['address'] = patient.get('address')
#                         render_data['drug_name'] = drug_name_short
#
#                         age_txt = ""
#                         if patient_age.get('year') in (2, 3, 4):
#                             age_txt += f" {patient_age.get('year')} года"
#                         elif patient_age.get('year') == 1:
#                             age_txt += f" {patient_age.get('year')} год"
#                         elif patient_age.get('year') > 1:
#                             age_txt += f" {patient_age.get('year')} лет"
#
#                         age_txt += f" {patient_age.get('month')} мес."
#                         render_data['age'] = age_txt
#
#                         doc = DocxTemplate(f".{os.sep}example{os.sep}certificate{os.sep}рецепт_{marker_rp}.docx")
#                         doc.render(render_data)
#                         doc_name = f".{os.sep}generated{os.sep}{patient.get('name').split()[0]}_рецепт.docx"
#                         doc_name = save_document(doc=doc, doc_name=doc_name)
#                         run_document(doc_name)
#
#                         render_data.clear()
#                         data_base(command="statistic_write",
#                                   insert_data="Рецепт")
#
#                 def select_drugs_category():
#                     for drug_category in data['examination'].get("all_drug_frame"):
#                         if '__' not in drug_category:
#                             data['examination']['all_drug_frame'][drug_category].pack_forget()
#                     all_drug_frame = data['examination']['all_drug_frame'].get(selected_button.get())
#                     all_drug_frame.pack(fill='both', expand=True)
#                     all_drug_frame.update_idletasks()
#                     print("all_drug_frame", all_drug_frame.winfo_width())
#                     data['examination']['canvas_frame_scrolled'].yview_moveto(0)
#
#                 def select_drugs_name():
#                     if data['examination']['all_drug_frame'].get(selected_button.get()):
#                         edit_frame, marker = data['examination']['all_drug_frame'].get(selected_button.get())
#                         if marker:
#                             edit_frame.pack_forget()
#                             data['examination']['all_drug_frame'][selected_button.get()][1] = False
#                             edit_frame = data['examination']['all_drug_frame'][selected_button.get().split("__")[0]]
#                             edit_frame.columnconfigure(index='all', minsize=40, weight=1)
#                             edit_frame.rowconfigure(index='all', minsize=20)
#                             for drug_category in data['examination'].get("all_drug_frame"):
#                                 if '__' not in drug_category:
#                                     data['examination']['all_drug_frame'][drug_category].rowconfigure(index='all',
#                                                                                                       minsize=20)
#                                 else:
#                                     data['examination']['all_drug_frame'][drug_category][0].rowconfigure(index='all',
#                                                                                                          minsize=20)
#
#
#
#                         else:
#                             data['examination']['all_drug_frame'][selected_button.get()][1] = True
#                             edit_frame.columnconfigure(index='all', minsize=40, weight=1)
#                             edit_frame.rowconfigure(index='all', minsize=20)
#
#                             edit_frame.pack(fill='both', expand=True)
#
#                 def create_scroller_frame(master_frame, func):
#                     def resize(event):
#                         region = canvas.bbox(tk.ALL)
#                         canvas.configure(scrollregion=region)
#
#                     def on_binds(event):
#                         canvas.idbind = canvas.bind_all("<MouseWheel>", on_mousewheel)
#
#                     def off_binds(event=None):
#                         canvas.unbind_all("<MouseWheel>")
#
#                     def on_mousewheel(event):
#
#                         region = canvas.bbox(tk.ALL)
#                         canvas.configure(scrollregion=region)
#
#                         if os.name == 'posix':
#                             canvas.yview_scroll(int(-1 * event.delta), "units")
#                         else:
#                             canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
#
#                     scroll_x = tk.Scrollbar(master_frame, orient=tk.HORIZONTAL)
#                     scroll_y = tk.Scrollbar(master_frame, orient=tk.VERTICAL)
#
#                     canvas = tk.Canvas(master_frame,
#                                        xscrollcommand=scroll_x.set,
#                                        yscrollcommand=scroll_y.set)
#                     scroll_x.config(command=canvas.xview)
#                     scroll_y.config(command=canvas.yview)
#
#                     canvas_frame = Frame(canvas)
#
#                     data['examination']['canvas_frame_scrolled'] = canvas
#
#                     func(canvas_frame)
#                     #
#                     # canvas['width'] = int(canvas.winfo_geometry().split('x')[0])
#                     # canvas_frame['width'] = int(canvas.winfo_geometry().split('x')[0])
#
#                     canvas.grid(row=0, column=0, sticky="nsew")
#                     scroll_x.grid(row=1, column=0, sticky="we")
#                     scroll_y.grid(row=0, column=1, sticky="ns")
#
#                     master_frame.rowconfigure(0, weight=1)
#                     master_frame.columnconfigure(0, weight=1)
#
#                     master_frame.bind("<Configure>", resize)
#                     master_frame.update_idletasks()
#
#                     canvas.bind("<Enter>", on_binds)
#                     canvas.bind("<Leave>", off_binds)
#
#                     canvas.create_window((0, 0), window=canvas_frame, anchor="nw",
#                                          width=canvas.winfo_width())
#
#                 def create_drugs_frame(frame):
#
#                     for drug_category in all_data_diagnosis.get("drugs"):
#                         all_drug_frame = Frame(frame, bg="#36566d")
#
#                         for drugs in all_data_diagnosis["drugs"].get(drug_category):
#                             drug_name = drugs[0]
#                             drug_frame = Frame(all_drug_frame)
#                             drug_name_btn_text = drug_name
#                             if drug_name == 'Амоксициллин + клавулановая кислота':
#                                 drug_name_btn_text = 'Амоксициллин\n+ клавулановая кислота'
#                             elif drug_name == 'Бромгексин+Гвайфенезин+Сальбутамол+Ментол (Джосет)':
#                                 drug_name_btn_text = 'Бромгексин + Гвайфенезин \n+ Сальбутамол + Ментол \n(Джосет)'
#                             elif '- капли' in drug_name_btn_text:
#                                 drug_name_btn_text = drug_name_btn_text.replace('- капли', '\n- капли')
#                             elif '- мазь' in drug_name_btn_text:
#                                 drug_name_btn_text = drug_name_btn_text.replace('- мазь', '\n- мазь')
#
#
#                             elif drug_name == 'Бромгексин+Гвайфенезин+Сальбутамол+Ментол (Джосет)':
#                                 drug_name_btn_text = 'Бромгексин + Гвайфенезин \n+ Сальбутамол + Ментол \n(Джосет)'
#
#                             elif '(' in drug_name_btn_text:
#                                 drug_name_btn_text = drug_name_btn_text.replace('(', '\n(')
#
#                             btn = Radiobutton(drug_frame, text=f'{drug_name_btn_text}',
#                                               font=('Comic Sans MS', user.get('text_size')),
#                                               value=f"{drug_category}__{drug_name}", variable=selected_button,
#                                               command=select_drugs_name,
#                                               indicatoron=False, selectcolor='#77f1ff')
#                             btn.pack(fill='both', expand=True)
#
#                             drug_frame_add = Frame(drug_frame)
#                             mark_flag = ''
#                             for mark in drugs[1:]:
#                                 if mark in ("Форма", "Дозировка", "Кратность", "Длительность", "Способ применения"):
#                                     mark_flag = mark
#                                     Label(drug_frame_add, text=f"{mark}",
#                                           font=('Comic Sans MS', user.get('text_size')),
#                                           bg="#36566d", fg='white').pack(fill='both', expand=True)
#                                 elif mark.startswith('Инструкция'):
#                                     Label(drug_frame_add, text=f"{mark}",
#                                           font=('Comic Sans MS', user.get('text_size')),
#                                           bg="#36566d", fg='white').pack(fill='both', expand=True, pady=2)
#
#
#                                 else:
#                                     btn_text = ''
#                                     for i in mark.split():
#                                         if len(btn_text.split('\n')[-1]) > 30:
#                                             btn_text += '\n'
#                                         btn_text += f"{i} "
#                                     btn = Radiobutton(drug_frame_add, text=f'{btn_text}',
#                                                       font=('Comic Sans MS', user.get('text_size')),
#                                                       value=f"{drug_category}__{drug_name}__{mark_flag}__{mark}",
#                                                       variable=selected_button,
#                                                       command=select_drugs_item,
#                                                       indicatoron=False, selectcolor='#77f1ff',
#                                                       bg='#cdcdcd')
#                                     btn.pack(fill='both', expand=True)
#                                     data['examination']['all_drug_buttons'][
#                                         f"{drug_category}__{drug_name}__{mark_flag}__" \
#                                         f"{mark}"] = btn
#
#                             Label(drug_frame_add, text="Рецепты:",
#                                   font=('Comic Sans MS', user.get('text_size')),
#                                   bg="#36566d", fg='white').pack(fill='both', expand=True)
#
#                             Radiobutton(drug_frame_add, text=f'Выписать простой рецепт',
#                                         font=('Comic Sans MS', user.get('text_size')),
#                                         value=f"{drug_category}__{drug_name}__простой_а6",
#                                         variable=selected_button,
#                                         command=create_recipe,
#                                         indicatoron=False, selectcolor='#77f1ff',
#                                         bg='#cdcdcd').pack(fill='both', expand=True)
#
#                             Radiobutton(drug_frame_add, text=f'Выписать льготный рецепт',
#                                         font=('Comic Sans MS', user.get('text_size')),
#                                         value=f"{drug_category}__{drug_name}__льготный_а6",
#                                         variable=selected_button,
#                                         command=create_recipe,
#                                         indicatoron=False, selectcolor='#77f1ff',
#                                         bg='#cdcdcd').pack(fill='both', expand=True)
#
#                             data['examination']['all_drug_frame'][f"{drug_category}__{drug_name}"] = [drug_frame_add,
#                                                                                                       False]
#
#                             drug_frame_add.columnconfigure(index='all', minsize=40, weight=1)
#                             drug_frame_add.rowconfigure(index='all', minsize=20)
#
#                             drug_frame.columnconfigure(index='all', minsize=40, weight=1)
#                             drug_frame.rowconfigure(index='all', minsize=20)
#
#                             drug_frame.pack(fill='both', expand=True, pady=5)
#
#                         data['examination']['all_drug_frame'][drug_category] = all_drug_frame
#
#                         # if len(drugs[0]) > min_width:
#                         #     min_width = len(drugs[0])
#
#                         # all_drug_frame.pack(fill='both', expand=True)
#                     drug_category_frame.columnconfigure(index='all', minsize=40, weight=1)
#                     drug_category_frame.rowconfigure(index='all', minsize=20)
#
#                     drugs_root_main.columnconfigure(index='all', minsize=40, weight=1)
#                     drugs_root_main.rowconfigure(index='all', minsize=20)
#
#                 data['examination']['all_drug_frame'] = dict()
#                 drugs_root_main = Frame(master=root_examination, padx=3, pady=3)
#                 drugs_root_main.update_idletasks()
#
#                 drug_category_frame = Frame(drugs_root_main, bg="#36566d")
#                 all_drugs_frame_scrolled = Frame(drugs_root_main, bg="#36566d")
#
#                 Label(drug_category_frame, text="        Перечень лекарственных препаратов        ",
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3)
#                 Button(drug_category_frame, text=f"Закрыть окно препаратов",
#                        font=('Comic Sans MS', user.get('text_size')),
#                        command=open_drugs_root,
#                        bg='#f0fffe').pack(fill='both', expand=True)
#
#                 for drug_category in all_data_diagnosis.get("drugs"):
#                     btn = Radiobutton(drug_category_frame, text=f'{drug_category}',
#                                       font=('Comic Sans MS', user.get('text_size')),
#                                       value=drug_category, variable=selected_button,
#                                       command=select_drugs_category,
#                                       indicatoron=False, selectcolor='#77f1ff',
#                                       bg="#36566d", fg='white')
#
#                     btn.pack(fill='x', expand=True)
#
#                 drug_category_frame.pack(fill='x', anchor='nw')
#                 all_drugs_frame_scrolled.pack(fill='both', expand=True)
#                 data['examination']['is_drugs_root_open'] = False
#                 data['examination']['all_drug_buttons'] = dict()
#
#                 drugs_root_main.grid(row=0, column=3, sticky="nwse")
#                 create_scroller_frame(master_frame=all_drugs_frame_scrolled, func=create_drugs_frame)
#
#                 drugs_root_main.grid_remove()
#
#             def create_dispanser_root():
#                 def celect_dispanser():
#                     txt_prescription.insert('end', f"\nОбсленование и наблюдение согласно постановлению МЗ РБ № 1201:"
#                                                    f"\n{celected_code.get()}")
#                     open_dispanser_root()
#
#                 def search_mkb(event=None):
#                     def resize(event=None):
#                         region = canvas.bbox(tk.ALL)
#                         canvas.configure(scrollregion=region)
#
#                     def on_binds(event):
#                         canvas.idbind = canvas.bind_all("<MouseWheel>", on_mousewheel)
#
#                     def off_binds(event=None):
#                         canvas.unbind_all("<MouseWheel>")
#
#                     def on_mousewheel(event):
#
#                         region = canvas.bbox(tk.ALL)
#                         canvas.configure(scrollregion=region)
#
#                         if os.name == 'posix':
#                             canvas.yview_scroll(int(-1 * event.delta), "units")
#                         else:
#                             canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
#
#                     if data['examination'].get('frame_found_data_dispanser'):
#                         frame_found_data_dispanser = data['examination'].get('frame_found_data_dispanser')
#                         frame_found_data_dispanser.destroy()
#                     master_frame = Frame(mkb_frame_scrolled)
#                     data['examination']['frame_found_data_dispanser'] = master_frame
#                     master_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#                     found_data = list()
#                     mkb_code_edit = ''
#                     mkb_name_edit = mkb_name.get()
#
#                     if mkb_code.get():
#                         word_list = ["qwertyuiopasdfghjkl;'zxcvbnm,.", "йцукенгшщзфывапролджэячсмитьбю"]
#
#                         for word in mkb_code.get().lower():
#                             if word in word_list[1]:
#                                 mkb_code_edit += word_list[0][word_list[1].index(word)]
#                             elif word == ',':
#                                 mkb_code_edit += '.'
#                             else:
#                                 mkb_code_edit += word
#                         mkb_code_edit = mkb_code_edit.upper()
#
#                     if mkb_code_edit and mkb_name_edit:
#                         for dispanser_data in post_1201:
#                             key = dispanser_data.get('mkb_key')
#                             value = dispanser_data.get('Наименование заболевания')
#
#                             if mkb_code_edit in key and mkb_name_edit.lower() in value.lower():
#                                 found_data.append(dispanser_data)
#                     elif mkb_code_edit:
#                         for dispanser_data in post_1201:
#                             key = dispanser_data.get('mkb_key')
#                             if mkb_code_edit in key:
#                                 found_data.append(dispanser_data)
#                     elif mkb_name_edit:
#                         for dispanser_data in post_1201:
#                             value = dispanser_data.get('Наименование заболевания')
#                             if mkb_name_edit.lower() in value.lower():
#                                 found_data.append(dispanser_data)
#
#                     if found_data:
#
#                         scroll_x = tk.Scrollbar(master_frame, orient=tk.HORIZONTAL)
#                         scroll_y = tk.Scrollbar(master_frame, orient=tk.VERTICAL)
#
#                         canvas = tk.Canvas(master_frame,
#                                            xscrollcommand=scroll_x.set,
#                                            yscrollcommand=scroll_y.set)
#                         scroll_x.config(command=canvas.xview)
#                         scroll_y.config(command=canvas.yview)
#
#                         canvas_frame = Frame(canvas)
#
#                         for dispanser_data in found_data:
#                             dispanser_data = f"Наименование заболевания: " \
#                                              f"{dispanser_data.get('Наименование заболевания')}\n" \
#                                              f"Сроки и кратность медицинских обследований: " \
#                                              f"{dispanser_data.get('Сроки и кратность медицинских обследований')}\n" \
#                                              f"Сроки наблюдения за пациентом: " \
#                                              f"{dispanser_data.get('Сроки наблюдения за пациентом')}"
#
#                             but_text = ''
#                             for i in dispanser_data.split(" "):
#                                 if len(but_text.split('\n')[-1]) > 60:
#                                     but_text += '\n'
#                                 but_text += i + ' '
#                             Radiobutton(canvas_frame, text=but_text,
#                                         font=('Comic Sans MS', user.get('text_size')),
#                                         value=f"{dispanser_data}",
#                                         variable=celected_code,
#                                         command=celect_dispanser,
#                                         indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                                         ).pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#                         # canvas_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#                         canvas['width'] = int(canvas.winfo_geometry().split('x')[0])
#                         canvas_frame['width'] = int(canvas.winfo_geometry().split('x')[0])
#                         canvas.grid(row=0, column=0, sticky="nsew")
#                         scroll_x.grid(row=1, column=0, sticky="we")
#                         scroll_y.grid(row=0, column=1, sticky="ns")
#
#                         master_frame.rowconfigure(0, weight=1)
#                         master_frame.columnconfigure(0, weight=1)
#
#                         master_frame.bind("<Configure>", resize)
#                         master_frame.update_idletasks()
#                         canvas_frame['height'] = int(
#                             dispanser_root_main.winfo_height() - frame_main_dispanser.winfo_height())
#
#                         canvas.bind("<Enter>", on_binds)
#                         canvas.bind("<Leave>", off_binds)
#
#                         canvas.create_window((0, 0), window=canvas_frame, anchor="nw",
#                                              width=canvas.winfo_width())
#
#                     else:
#                         Label(master_frame, text="Поиск не дал результатов!",
#                               font=('Comic Sans MS', user.get('text_size')),
#                               bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#                 mkb_code = StringVar()
#                 mkb_name = StringVar()
#                 celected_code = StringVar()
#
#                 dispanser_root_main = Frame(master=root_examination, padx=3, pady=3, bg="#36566d")
#                 dispanser_root_main.update_idletasks()
#
#                 frame_main_dispanser = Frame(dispanser_root_main, bg="#36566d")
#                 Label(frame_main_dispanser, text="Поиск по постановлению 1201",
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#                 Button(frame_main_dispanser, text=f"Закрыть окно",
#                        font=('Comic Sans MS', user.get('text_size')),
#                        command=open_dispanser_root,
#                        bg='#f0fffe').pack(fill='x', expand=True, pady=3, padx=3, anchor='n')
#
#                 mkb_title_frame = Frame(frame_main_dispanser, bg="#36566d")
#                 Label(mkb_title_frame, text="Код (МКБ-10): ",
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, side='left')
#                 txt_mkb = Entry(mkb_title_frame, width=10,
#                                 font=('Comic Sans MS', user.get('text_size')),
#                                 justify="center",
#                                 textvariable=mkb_code)
#                 txt_mkb.pack(fill='x', expand=True, pady=3, padx=3, side='left')
#                 txt_mkb.bind('<Return>', search_mkb)
#
#                 Label(mkb_title_frame, text="Нозология: ",
#                       font=('Comic Sans MS', user.get('text_size')),
#                       bg="#36566d", fg='white').pack(fill='x', expand=True, pady=3, padx=3, side='left')
#                 txt_mkb = Entry(mkb_title_frame, width=30,
#                                 font=('Comic Sans MS', user.get('text_size')),
#                                 textvariable=mkb_name)
#                 txt_mkb.pack(fill='x', expand=True, pady=3, padx=3, side='left')
#                 txt_mkb.bind('<Return>', search_mkb)
#
#                 mkb_title_frame.pack(fill='x', anchor='n')
#                 frame_main_dispanser.pack(fill='x', anchor='n')
#
#                 mkb_frame_scrolled = Frame(dispanser_root_main)
#                 mkb_frame_scrolled.pack(fill='both', expand=True)
#
#                 data['examination']['is_dispanser_root_open'] = False
#                 dispanser_root_main.grid(row=0, column=3, sticky="nwse")
#
#                 dispanser_root_main.grid_remove()
#
#             def open_dispanser_root():
#                 if not data['examination'].get('is_dispanser_root_open'):
#                     data['examination']['is_dispanser_root_open'] = True
#                     dispanser_root_main.grid()
#                 else:
#                     data['examination']['is_dispanser_root_open'] = False
#                     dispanser_root_main.grid_remove()
#
#             def open_drugs_root():
#                 if not data['examination'].get('is_drugs_root_open'):
#                     data['examination']['is_drugs_root_open'] = True
#                     drugs_root_main.grid()
#                 else:
#                     data['examination']['is_drugs_root_open'] = False
#                     drugs_root_main.grid_remove()
#
#             def open_analyzes_root():
#                 if not data['examination']['analyzes'].get('is_analyzes_root_open'):
#                     data['examination']['analyzes']['is_analyzes_root_open'] = True
#                     analyzes_root_main.grid()
#                 else:
#                     data['examination']['analyzes']['is_analyzes_root_open'] = False
#                     analyzes_root_main.grid_remove()
#
#             def open_consultation_root():
#                 if not data['examination']['consultation'].get('is_consultation_root_open'):
#                     data['examination']['consultation']['is_consultation_root_open'] = True
#                     consultation_root_main.grid()
#                 else:
#                     data['examination']['consultation']['is_consultation_root_open'] = False
#                     consultation_root_main.grid_remove()
#
#             def paste_prescription_kb():
#
#                 data['examination']['open_prescription_kb'] = 'open'
#                 data['examination']['prescription_frame'] = dict()
#                 data['examination']['prescription_buttons_color'] = dict()
#
#                 data['examination']['prescription_but_ab_value'] = dict()
#
#                 for mark_group_main in all_data_diagnosis.get('prescription'):
#                     frame_loc = Frame(frame_prescription_buttons, borderwidth=1)
#                     Radiobutton(frame_loc, text=f"{mark_group_main[0]}",
#                                 font=('Comic Sans MS', user.get('text_size')),
#                                 value=f"{mark_group_main[0]}",
#                                 variable=selected_prescription_frame,
#                                 command=select_prescription_frame,
#                                 indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                                 ).pack(fill='both', expand=True)
#                     row, col = 0, 0
#                     frame_loc_but = Frame(frame_loc, borderwidth=1)
#                     data['examination']['prescription_frame'][mark_group_main[0]] = frame_loc_but
#                     for mark_group in mark_group_main[1:]:
#                         frame = Frame(frame_loc_but)
#                         for mark_2 in mark_group:
#                             data['examination']['prescription_but'][f"{mark_group_main[0]}_{mark_2}"] = IntVar()
#                             btn = Radiobutton(frame, text=f"{mark_2}",
#                                               font=('Comic Sans MS', user.get('text_size')),
#                                               value=f"{mark_group_main[0]}_{mark_2}",
#                                               variable=selected_button,
#                                               command=select_prescription,
#                                               indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#                             btn.pack(fill='both', expand=True, side='left')
#                             data['examination']['prescription_buttons_color'][f"{mark_group_main[0]}_{mark_2}"] = btn
#                         frame.pack(fill='both', expand=True)
#
#                     # if mark[0] == 'Разрешена вакцинация':
#                     #     loc_vac_data_main = list()
#                     #     loc_vac_data = list()
#                     #     for mark_2 in mark[1:]:
#                     #         if mark_2 == '\n':
#                     #             loc_vac_data_main.append(loc_vac_data.copy())
#                     #             loc_vac_data.clear()
#                     #         else:
#                     #             loc_vac_data.append(mark_2)
#                     #     for mark_group in loc_vac_data_main:
#                     #         loc_vac_frame = Frame(frame_loc_but)
#                     #         for mark_2 in mark_group:
#                     #             btn = Radiobutton(loc_vac_frame, text=f"{mark_2}",
#                     #                               font=('Comic Sans MS', user.get('text_size')),
#                     #                               value=f"{mark[0]}_{mark_2}",
#                     #                               variable=selected_button,
#                     #                               command=select_prescription,
#                     #                               indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#                     #
#                     #             btn.pack(fill='both', expand=True, side='left')
#                     #             data['examination']['prescription_buttons_color'][f"{mark[0]}_{mark_2}"] = btn
#                     #         loc_vac_frame.pack(fill='both', expand=True)
#                     # else:
#                     #     for mark_2 in mark[1:]:
#                     #         btn = Radiobutton(frame_loc_but, text=f"{mark_2}",
#                     #                           font=('Comic Sans MS', user.get('text_size')),
#                     #                           value=f"{mark[0]}_{mark_2}",
#                     #                           variable=selected_button,
#                     #                           command=select_prescription,
#                     #                           indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff')
#                     #
#                     #         btn.grid(row=row, column=col, sticky='ew')
#                     #         data['examination']['prescription_buttons_color'][f"{mark[0]}_{mark_2}"] = btn
#                     #
#                     #         col += 1
#                     #         if col == 6:
#                     #             col = 0
#                     #             row += 1
#
#                     frame_loc_but.columnconfigure(index='all', minsize=40, weight=1)
#                     frame_loc_but.rowconfigure(index='all', minsize=20)
#
#                     frame_loc.columnconfigure(index='all', minsize=40, weight=1)
#                     frame_loc.rowconfigure(index='all', minsize=20)
#                     frame_loc.pack(fill='both', expand=True)
#
#                 Button(frame_prescription_buttons, text=f"Анализы",
#                        font=('Comic Sans MS', user.get('text_size')),
#                        command=open_analyzes_root,
#                        bg='#f0fffe').pack(fill='both', expand=True)
#
#                 Button(frame_prescription_buttons, text=f"Консультация",
#                        font=('Comic Sans MS', user.get('text_size')),
#                        command=open_consultation_root,
#                        bg='#f0fffe').pack(fill='both', expand=True)
#
#                 Button(frame_prescription_buttons, text=f"Препараты",
#                        font=('Comic Sans MS', user.get('text_size')),
#                        command=open_drugs_root,
#                        bg='#f0fffe').pack(fill='both', expand=True)
#
#                 Button(frame_prescription_buttons, text=f"Диспансеризация \n(пост. 1201)",
#                        font=('Comic Sans MS', user.get('text_size')),
#                        command=open_dispanser_root,
#                        bg='#f0fffe').pack(fill='both', expand=True)
#
#                 Button(frame_prescription_buttons, text=f"Справка",
#                        font=('Comic Sans MS', user.get('text_size')),
#                        command=fast_certificate,
#                        bg='#f0fffe').pack(fill='both', expand=True)
#
#                 # data['examination']['prescription_frame']['Препараты'] = frame_prescription_buttons_drugs_buttons
#
#                 frame_prescription_buttons.columnconfigure(index='all', minsize=40, weight=1)
#                 frame_prescription_buttons.rowconfigure(index='all', minsize=20)
#                 frame_prescription_buttons.pack(fill='both', expand=True, padx=2, pady=2)
#
#                 # frame_prescription_buttons_drugs_main.columnconfigure(index='all', minsize=40, weight=1)
#                 # frame_prescription_buttons_drugs_main.rowconfigure(index='all', minsize=20)
#                 # frame_prescription_buttons_drugs_main.pack(fill='both', expand=True, padx=2, pady=2)
#
#             def select_prescription_frame():
#                 if data['examination']['prescription_frame'].get('last_open_frame',
#                                                                  '') == selected_prescription_frame.get():
#                     data['examination']['prescription_frame'].get('open_frame').pack_forget()
#                     data['examination']['prescription_frame']['last_open_frame'] = ''
#                 else:
#
#                     if data['examination']['prescription_frame'].get('open_frame'):
#                         data['examination']['prescription_frame'].get('open_frame').pack_forget()
#
#                     frame_loc = data['examination']['prescription_frame'].get(selected_prescription_frame.get())
#                     data['examination']['prescription_frame']['open_frame'] = frame_loc
#                     frame_loc.pack(fill='both', expand=True)
#                     data['examination']['prescription_frame']['last_open_frame'] = selected_prescription_frame.get()
#
#             def select_prescription():
#                 prescription_text = txt_prescription.get(1.0, 'end').strip()
#                 prescription_button = selected_button.get()
#                 selected_button.set('')
#                 mark_1, mark_2 = prescription_button.split('_')
#
#                 edited_string = ''
#                 if mark_1 == 'Разрешена вакцинация':
#                     if 'Информирован(а)' in mark_2 and mark_2 in prescription_text:
#                         print(f"'{mark_2}'\n")
#                         print(f"'{prescription_text}'")
#                         prescription_text = prescription_text.replace(mark_2, '')
#                     if 'Медотвод от проф' in mark_2 and mark_2 in prescription_text:
#                         prescription_text = prescription_text.replace(mark_2, '')
#
#                     else:
#                         if mark_2[-1] != '-':
#                             mark_2 = f"{mark_2},"
#                         for string in prescription_text.split('\n'):
#                             if string.startswith(mark_1):
#                                 edited_string = string
#                                 if edited_string[-1] in (',', '-'):
#                                     edited_string += ' '
#                                 edited_string += f"{mark_2} "
#                                 prescription_text = prescription_text.replace(string, edited_string)
#
#                                 break
#                         else:
#                             prescription_text = f"{mark_1}: {mark_2} " \
#                                                 f"\nИнформирован(а) о проводимой прививке. " \
#                                                 f"\nС особенностями течения периода после иммунизации ОЗНАКОМЛЕН(А) _________" \
#                                                 f"\n{prescription_text}"
#
#
#
#
#                 elif data['examination']['prescription_but'].get(prescription_button):
#                     if data['examination']['prescription_but'][prescription_button].get():
#                         data['examination']['prescription_but'][prescription_button].set(0)
#
#                         for string in prescription_text.split('\n'):
#                             if string.startswith(mark_1):
#                                 edited_string = string
#                                 if mark_2 in edited_string:
#                                     for i in (f"{mark_2}, ", f"{mark_2},", f", {mark_2}",
#                                               f"{mark_2} ", f"{mark_2}"):
#                                         if i in edited_string:
#                                             edited_string = edited_string.replace(i, '')
#                                             prescription_text = prescription_text.replace(string, edited_string)
#
#                                     for btn in data['examination'].get('prescription_but'):
#                                         if btn.startswith(mark_1) and data['examination']['prescription_but'][
#                                             btn].get():
#                                             break
#                                     else:
#                                         prescription_text = prescription_text.replace(edited_string, '')
#
#                     else:
#                         data['examination']['prescription_but'][prescription_button].set(1)
#
#                         for string in prescription_text.split('\n'):
#                             if string.startswith(mark_1):
#                                 edited_string = string
#                                 if edited_string[-1] == ',':
#                                     edited_string += ' '
#                                 edited_string += f"{mark_2}, "
#                                 prescription_text = prescription_text.replace(string, edited_string)
#
#                                 break
#                         else:
#                             prescription_text = f"{mark_1}: {mark_2}, \n" + prescription_text
#
#                 for button_name in data['examination'].get('prescription_buttons_color'):
#                     if data['examination']['prescription_but'].get(button_name):
#                         if data['examination']['prescription_but'].get(button_name).get() == 1:
#                             data['examination']['prescription_buttons_color'][button_name]['bg'] = '#77f1ff'
#                         else:
#                             data['examination']['prescription_buttons_color'][button_name]['bg'] = '#cdcdcd'
#
#                 txt_prescription.delete(1.0, 'end')
#                 txt_prescription.insert(1.0, prescription_text.strip().replace('\n\n', '\n'))
#
#                 frame_prescription_main.columnconfigure(index='all', minsize=40, weight=1)
#                 frame_prescription_main.rowconfigure(index='all', minsize=20)
#
#                 frame_prescription.columnconfigure(index='all', minsize=40, weight=1)
#                 frame_prescription.rowconfigure(index='all', minsize=20)
#
#             frame_prescription = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#             frame_prescription_main = Frame(frame_prescription, padx=1, pady=1)
#             frame_prescription_buttons = Frame(frame_prescription, padx=1, pady=1)
#
#             frame_prescription_main_title = Frame(frame_prescription_main, padx=1, pady=1)
#             Label(master=frame_prescription_main_title,
#                   text="Назначения",
#                   font=('Comic Sans MS', user.get('text_size')), bg='white'
#                   ).pack(fill='both', expand=True, side='left')
#             change_prescription_kb_button = Button(frame_prescription_main_title,
#                                                    text='скрыть клавиатуру рекомендаций',
#                                                    command=change_prescription_kb_status,
#                                                    font=('Comic Sans MS', user.get('text_size')))
#             change_prescription_kb_button.pack(fill='both', expand=True, side='left')
#             frame_prescription_main_title.pack(fill='x', anchor='n')
#
#
#             txt_prescription = ScrolledText(frame_prescription_main, width=15, height=16,
#                                             font=('Comic Sans MS', user.get('text_size')),
#                                             wrap="word")
#             txt_prescription.pack(fill='both', expand=True)
#
#             data['examination']['prescription_but'] = dict()
#
#
#             data['examination']['ScrolledText']['txt_prescription'] = txt_prescription
#             data['examination']['buttons']['change_prescription_kb_button'] = change_prescription_kb_button
#             data['examination']['frames']['frame_prescription_buttons'] = frame_prescription_buttons
#
#
#             frame_prescription_main.columnconfigure(index='all', minsize=40, weight=1)
#             frame_prescription_main.rowconfigure(index='all', minsize=20)
#             frame_prescription_main.pack(fill='both', expand=True, side='left')
#
#             paste_prescription_kb()
#             frame_prescription.columnconfigure(index='all', minsize=40, weight=1)
#             frame_prescription.rowconfigure(index='all', minsize=20)
#             frame_prescription.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
#
#         def select_drugs_item(drug_name=None, weight=None):
#             txt_prescription = data['examination']['ScrolledText'].get('txt_prescription')
#
#             if drug_name:
#                 drug_category, drug_name, mark_flag, mark = drug_name.split('__')
#             else:
#                 drug_category, drug_name, mark_flag, mark = selected_button.get().split('__')
#                 selected_button.set('')
#
#             if not data['examination'].get('selected_drugs'):
#                 data['examination']['selected_drugs'] = dict()
#
#             if not data['examination']['selected_drugs'].get(drug_category):
#                 data['examination']['selected_drugs'][drug_category] = dict()
#             if not data['examination']['selected_drugs'][drug_category].get(drug_name):
#                 data['examination']['selected_drugs'][drug_category][drug_name] = dict()
#
#             if mark_flag == "Способ применения":
#                 if not data['examination']['selected_drugs'][drug_category][drug_name].get(mark_flag):
#                     data['examination']['selected_drugs'][drug_category][drug_name][mark_flag] = list()
#                 if mark in data['examination']['selected_drugs'][drug_category][drug_name].get(mark_flag):
#                     data['examination']['selected_drugs'][drug_category][drug_name][mark_flag].remove(mark)
#                 else:
#                     data['examination']['selected_drugs'][drug_category][drug_name][mark_flag].append(mark)
#
#             else:
#                 data['examination']['selected_drugs'][drug_category][drug_name][mark_flag] = mark
#
#             prescription_text = txt_prescription.get(1.0, 'end').strip()
#             edited_string = ''
#
#             if not weight:
#                 weight = data['examination']['anthro']['txt_weight_variable'].get()
#
#             if weight:
#                 if weight == "None":
#                     weight = None
#                 else:
#                     if isinstance(weight, str):
#                         weight = float(weight.replace(',', '.'))
#                     if weight > 40:
#                         weight = 40
#
#             if drug_category == 'Антибиотики':
#                 if drug_name == "Амоксициллин":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         if age < 7:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 250/5'
#                         elif age < 10:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 250 мг'
#                         elif age < 15:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 500 мг'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 1000 мг'
#
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '50 мг/кг/сут'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'
#
#                 elif drug_name == "Амоксициллин + клавулановая кислота":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         if age < 4:
#                             data['examination']['selected_drugs'][drug_category][drug_name][
#                                 'Форма'] = 'суспензия 200/28.5/5'
#                         elif age < 8:
#                             data['examination']['selected_drugs'][drug_category][drug_name][
#                                 'Форма'] = 'суспензия 400/57/5'
#                         elif age < 15:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 500/125 мг'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 875/125 мг'
#
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '50 мг/кг/сут'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'
#
#                 elif drug_name == "Цефуроксим":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         if age < 7:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 125/5'
#                         elif age < 14:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 125'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 250'
#
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '20 мг/кг/сут'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'
#
#                 elif drug_name == "Кларитромицин":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         if age < 4:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 125/5'
#                         elif age < 13:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 250/5'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 250'
#
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '15 мг/кг/сут'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'
#
#                 elif drug_name == "Азитромицин":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         if age < 12:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 200/5'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 250'
#
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '10 мг/кг/сут'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут'
#
#                 elif drug_name == "Цефдинир":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         if age < 4:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 125/5'
#                         elif age < 13:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'суспензия 250/5'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 300'
#
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '14 мг/кг/сут'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'
#
#             elif drug_category == 'ОРИ':
#
#                 if drug_name == "Парацетамол":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'автоматически'
#
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '15 мг/кг'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Способ применения'):
#                         if mark_flag != 'Способ применения':
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Способ применения'] = \
#                                 ['принимать при температуре 38.5 и выше', 'с интервалом не меньше 8 часов']
#
#                 elif drug_name == "Ибупрофен":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'автоматически'
#
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '10 мг/кг'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Способ применения'):
#                         if mark_flag != 'Способ применения':
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Способ применения'] = \
#                                 ['принимать при температуре 38.5 и выше', 'с интервалом не меньше 8 часов']
#
#                 elif drug_name == "Оксиметазолин - капли в нос":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         if age < 1:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = '0.01%'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = '0.025%'
#
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '2 р/сут'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Длительность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name][
#                             'Длительность'] = 'не дольше 5 дней'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Способ применения'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Способ применения'] = \
#                             ['при заложенности носа']
#
#                 elif drug_name == "Ксилометазолин - капли в нос":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         if age < 13:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = '0.05%'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = '0.1%'
#
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '3 р/сут'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Длительность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name][
#                             'Длительность'] = 'не дольше 5 дней'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Способ применения'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Способ применения'] = \
#                             ['при заложенности носа']
#
#                 elif drug_name == "Феназон+Лидокаин (отисфен) - капли ушные":
#
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = 'по 1-2 капли'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '3 р/сут'
#
#                 elif drug_name == "Рифамицин (отофа) - капли ушные":
#
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = 'по 1-2 капли'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '3 р/сут'
#
#             elif drug_category == 'Бронхолитики':
#
#                 if drug_name == "Монтелукаст":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         if age < 7:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 4мг'
#                         elif age < 17:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 5мг'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 10мг'
#
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1 таб'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут на ночь'
#
#             elif drug_category == 'Глазные капли':
#
#                 if drug_name == "Нитрофурал (фурацилин)":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = \
#                             'раствор для наружного применения 0.02%'
#
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = \
#                             'промывать глаза по мере загноения'
#
#                 elif drug_name in ("Тобрамицин - капли глазные 0.3%", "Дексаметазон+Тобрамицин - капли глазные",
#                                    "Дексаметазон - капли глазные 0.1%", "Диклофенак - капли глазные 0.1%"):
#
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = 'по 1-2 капли'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '3 р/сут'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Длительность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Длительность'] = '5 дней'
#
#
#             elif drug_category == 'Антигистаминные':
#
#                 if drug_name == "Цетиризин":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         if age < 7:
#                             data['examination']['selected_drugs'][drug_category][drug_name][
#                                 'Форма'] = 'кап. 10мг/мл-20мл'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 10мг'
#
#                     if not (data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка') and
#                             data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность')):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут'
#                         if data['examination']['selected_drugs'][drug_category][drug_name].get(
#                                 'Форма') == 'кап. 10мг/мл-20мл':
#                             if age < 3:
#                                 data['examination']['selected_drugs'][drug_category][drug_name][
#                                     'Дозировка'] = '5 капель'
#                             elif age < 12:
#                                 data['examination']['selected_drugs'][drug_category][drug_name][
#                                     'Дозировка'] = '10 капель'
#                             else:
#                                 data['examination']['selected_drugs'][drug_category][drug_name][
#                                     'Дозировка'] = '20 капель'
#
#                         if data['examination']['selected_drugs'][drug_category][drug_name].get('Форма') == 'таб. 10мг':
#                             if age < 12:
#                                 data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1/2 таб'
#                             else:
#                                 data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1 таб'
#
#
#                 elif drug_name == "Лоратадин":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         if age < 7:
#                             data['examination']['selected_drugs'][drug_category][drug_name][
#                                 'Форма'] = 'суспензия 5мг/5мл'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 10мг'
#
#                     if not (data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка') and
#                             data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность')):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут'
#                         if data['examination']['selected_drugs'][drug_category][drug_name].get(
#                                 'Форма') == 'суспензия 5мг/5мл':
#                             if age < 12:
#                                 data['examination']['selected_drugs'][drug_category][drug_name][
#                                     'Дозировка'] = '5 миллилитров'
#                             else:
#                                 data['examination']['selected_drugs'][drug_category][drug_name][
#                                     'Дозировка'] = '10 миллилитров'
#
#                         if data['examination']['selected_drugs'][drug_category][drug_name].get('Форма') == 'таб. 10мг':
#                             if age < 12:
#                                 data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1/2 таб'
#                             else:
#                                 data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1 таб'
#
#
#                 elif drug_name == "Дезлоратадин":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         if age < 12:
#                             data['examination']['selected_drugs'][drug_category][drug_name][
#                                 'Форма'] = 'суспензия 0.5мг/мл'
#                         else:
#                             data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = 'таб. 5мг'
#
#                     if not (data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка') and
#                             data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность')):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут'
#                         if data['examination']['selected_drugs'][drug_category][drug_name].get(
#                                 'Форма') == 'суспензия 0.5мг/мл':
#                             if age < 6:
#                                 data['examination']['selected_drugs'][drug_category][drug_name][
#                                     'Дозировка'] = '2.5 миллилитра'
#                             elif age < 12:
#                                 data['examination']['selected_drugs'][drug_category][drug_name][
#                                     'Дозировка'] = '5 миллилитров'
#                             else:
#                                 data['examination']['selected_drugs'][drug_category][drug_name][
#                                     'Дозировка'] = '10 миллилитров'
#
#                         if data['examination']['selected_drugs'][drug_category][drug_name].get('Форма') == 'таб. 5мг':
#                             if age < 12:
#                                 data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1/2 таб'
#                             else:
#                                 data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = '1 таб'
#
#             elif drug_category == 'Льготные':
#                 if drug_name == "Холекальциферол":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = \
#                             'масляный раствор для приема внутрь 0.5мг/мл 10мл'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Дозировка'] = 'по 1 капле'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '1 р/сут'
#
#                 elif drug_name == "Бифидумбактерин":
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Форма'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Форма'] = \
#                             'порошок для приг. раствора внутр. 5доз N10'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка'):
#                         data['examination']['selected_drugs'][drug_category][drug_name][
#                             'Дозировка'] = '5 доз (1 флакон)'
#                     if not data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность'):
#                         data['examination']['selected_drugs'][drug_category][drug_name]['Кратность'] = '3 р/сут'
#
#             all_but_names = list()
#             for marker in data['examination']['selected_drugs'][drug_category].get(drug_name):
#                 if data['examination']['selected_drugs'][drug_category][drug_name].get(marker):
#                     if marker == "Способ применения":
#                         for marker_2 in data['examination']['selected_drugs'][drug_category][drug_name].get(marker):
#                             all_but_names.append(f"{drug_category}__{drug_name}__{marker}__{marker_2}")
#                     else:
#                         marker_2 = data['examination']['selected_drugs'][drug_category][drug_name].get(marker)
#                         all_but_names.append(f"{drug_category}__{drug_name}__{marker}__{marker_2}")
#
#             for button_name in data['examination'].get('all_drug_buttons'):
#                 if button_name.startswith(f"{drug_category}__{drug_name}"):
#                     if button_name in all_but_names:
#                         data['examination']['all_drug_buttons'][button_name]['bg'] = '#77f1ff'
#                     else:
#                         data['examination']['all_drug_buttons'][button_name]['bg'] = '#cdcdcd'
#
#             if drug_category == 'Антибиотики':
#                 ab_weight = []
#
#                 if weight and drug_name not in ('Фосфомицин', 'Фуразидин (Фурагин)'):
#
#                     ab_key_dosa = data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка')
#                     ab_key_form = data['examination']['selected_drugs'][drug_category][drug_name].get('Форма')
#                     ab_key_count = data['examination']['selected_drugs'][drug_category][drug_name].get('Кратность', '')
#
#                     edited_string = f"{drug_name}: {ab_key_form}  -- "
#
#                     ab_weight = ab_key_form.split('/')[0].split(' ')[-1].strip()
#
#                     ab_dosage = int(ab_key_dosa.split()[0])
#                     ab_dosage_day = weight * ab_dosage
#                     ab_volume_day = ab_dosage_day / int(ab_weight)
#
#                     ab_key_count_loc = None
#                     if ab_key_count:
#                         if ab_key_count == '1-й день - 2 р/сут, далее - 1 р/сут':
#                             ab_key_count_loc = 1
#                         else:
#                             ab_key_count_loc = int(ab_key_count.replace(' р/сут', ''))
#                     if not ab_key_count_loc:
#                         ab_key_count_loc = 2
#                         if drug_name == 'Азитромицин':
#                             ab_key_count_loc = 1
#
#                     ab_volume_single = ab_volume_day / ab_key_count_loc
#                     if 'суспензия' in ab_key_form:
#                         ab_volume_single = ab_volume_single * 5
#                         edited_string += f" по {round(ab_volume_single, 1)} мл. "
#                         if ab_key_count:
#                             edited_string += f"{ab_key_count} "
#                         else:
#                             edited_string += f"{ab_key_count_loc} р/сут "
#                         edited_string += f"({round(ab_dosage_day / weight)}мг/кг/сут)  "
#
#
#                     else:
#                         if str(ab_volume_single).split('.')[-1][0] in ('4', '5', '6'):
#                             ab_volume_single = float(f"{str(ab_volume_single).split('.')[0]}.5")
#                         else:
#                             ab_volume_single = round(ab_volume_single)
#                         edited_string += f" по {round(ab_volume_single, 1)} таб. "
#
#                         if ab_key_count:
#                             edited_string += f"{ab_key_count} "
#                         else:
#                             edited_string += f"{ab_key_count_loc} р/сут "
#                         edited_string += f"({round((ab_volume_single * ab_key_count_loc * int(ab_weight)) / weight)}" \
#                                          f"мг/кг/сут) "
#
#                     edited_string += \
#                         data['examination']['selected_drugs'][drug_category][drug_name].get('Длительность', '') + ' -- '
#                     for marker in data['examination']['selected_drugs'][drug_category][drug_name].get(
#                             'Способ применения',
#                             []):
#                         edited_string += marker + ', '
#
#
#                 else:
#                     edited_string = f"{drug_name}: "
#                     for marker in ("Форма", "Дозировка", "Кратность", "Длительность"):
#                         if data['examination']['selected_drugs'][drug_category][drug_name].get(marker, ''):
#                             edited_string += \
#                                 data['examination']['selected_drugs'][drug_category][drug_name].get(marker, '') + ' -- '
#                     for marker in data['examination']['selected_drugs'][drug_category][drug_name].get(
#                             'Способ применения',
#                             []):
#                         edited_string += marker + ', '
#
#             elif drug_category == 'ОРИ':
#                 if drug_name in ('Парацетамол', 'Ибупрофен'):
#                     drug__form = data['examination']['selected_drugs'][drug_category][drug_name].get('Форма', "")
#                     drug__dosa = data['examination']['selected_drugs'][drug_category][drug_name].get('Дозировка', "")
#
#                     if weight:
#
#                         if drug_name == 'Парацетамол' and drug__form:
#                             text_paracetamol = f"{drug_name}: "
#                             if drug__dosa:
#                                 drug__dosa = float(drug__dosa.replace(' мг/кг', ''))
#                             else:
#                                 drug__dosa = 12.5
#                             paracetamol_min, paracetamol_max = (weight * 10, weight * 15)
#
#                             if drug__form == 'суппозитории' or (drug__form == 'автоматически' and age <= 5):
#
#                                 supp = []
#                                 for i in (50, 80, 100, 125, 150, 170, 250, 300, 330):
#                                     if paracetamol_min < i <= paracetamol_max:
#                                         supp.append(i)
#                                 if supp:
#                                     supp_text = 'суппозитории '
#                                     for i in supp:
#                                         supp_text += str(i) + 'мг., '
#                                     text_paracetamol += supp_text
#
#                             if "суспензия" in drug__form or "раствор" in drug__form or (
#                                     drug__form == 'автоматически' and age <= 12):
#                                 if drug__form == 'автоматически':
#                                     text_paracetamol += f'Раствор 30мг/мл -- ' \
#                                                         f'по {round(weight * drug__dosa / 30, 1)} мл; '
#
#                                 else:
#                                     if '30' in drug__form:
#                                         text_paracetamol += f'Раствор 30мг/мл -- ' \
#                                                             f'по {round(weight * drug__dosa / 30, 1)} мл; '
#                                     else:
#                                         text_paracetamol += f'Cуспензия 120 мг/5мл -- ' \
#                                                             f'по {round(weight * drug__dosa / 24, 1)} мл; '
#
#                             if "таб." in drug__form or age > 5 and drug__form == 'автоматически':
#                                 if '200' in drug__form or (drug__form == 'автоматически' and weight < 35):
#
#                                     if paracetamol_max < 100:
#                                         text_paracetamol += ""
#                                     elif paracetamol_max < 200:
#                                         text_paracetamol += "Таб. 200 мг -- по 1/2 таб; "
#                                     elif paracetamol_max < 300:
#                                         text_paracetamol += "Таб. 200 мг -- по 1 таб; "
#                                     elif paracetamol_max < 400:
#                                         text_paracetamol += "Таб. 200 мг -- по 1.5 таб; "
#                                     elif 400 <= paracetamol_max:
#                                         text_paracetamol += "Таб. 200 мг -- по 2 таб; "
#
#                                 if '500' in drug__form or drug__form == 'автоматически':
#
#                                     if paracetamol_min < 250 <= paracetamol_max:
#                                         text_paracetamol += "Таб. 500 мг -- по 1/2 т.; "
#                                     elif 500 <= paracetamol_max:
#                                         text_paracetamol += "Таб. 500 мг -- по 1 т.; "
#                             edited_string = text_paracetamol.strip() + ' '
#
#                         elif drug_name == 'Ибупрофен':
#                             if drug__dosa:
#                                 drug__dosa = float(drug__dosa.replace(' мг/кг', ''))
#                             else:
#                                 drug__dosa = 7.5
#                             text_ibuprofen = f"{drug_name}: "
#                             ibuprofen_min, ibuprofen_max = (weight * 5, weight * 10)
#                             if drug__form in ('автоматически', 'суппозитории'):
#                                 if ibuprofen_min < 60 <= ibuprofen_max:
#                                     text_ibuprofen += f'Супп. 60 мг.; '
#                             if drug__form == 'суспензия 100 мг/5мл' or (drug__form == 'автоматически' and age < 3):
#                                 text_ibuprofen += f"суспензия 100мг/5мл -- по {round(drug__dosa * weight / 20, 1)}мл; "
#
#                             if drug__form == 'суспензия 200 мг/5мл' or (drug__form == 'автоматически' and age >= 3):
#                                 text_ibuprofen += f"Cуспензия 200мг/5мл -- по {round(drug__dosa * weight / 40, 1)}мл; "
#
#                             if drug__form == 'таб. 200 мг' or (drug__form == 'автоматически' and age > 5):
#                                 if ibuprofen_max < 100:
#                                     pass
#                                 elif ibuprofen_max < 200:
#                                     text_ibuprofen += "Таб. 200 мг -- по 1/2 таб; "
#                                 elif ibuprofen_max < 300:
#                                     text_ibuprofen += "Таб. 200 мг -- по 1 таб; "
#                                 elif ibuprofen_max < 400:
#                                     text_ibuprofen += "Таб. 200 мг -- по 1.5 таб; "
#                                 elif 400 <= ibuprofen_max:
#                                     text_ibuprofen += "Таб. 200 мг -- по 2 таб; "
#
#                             if drug__form == 'таб. 400 мг':
#                                 if ibuprofen_max < 200:
#                                     pass
#                                 elif ibuprofen_max < 400:
#                                     text_ibuprofen += "Таб. 400 мг -- по 1/2 таб; "
#                                 elif 400 == ibuprofen_max:
#                                     text_ibuprofen += "Таб. 400 мг -- по 1 таб; "
#
#                             edited_string = text_ibuprofen.strip() + ' '
#                         edited_string += ' --  '
#                         for marker in data['examination']['selected_drugs'][drug_category][drug_name].get(
#                                 'Способ применения', []):
#                             edited_string += marker + ', '
#
#                     else:
#                         edited_string = f"{drug_name}: "
#                         if drug_name == 'Парацетамол' and drug__form == 'автоматически':
#                             if age < 12:
#                                 edited_string += 'суспензия 30 мг/мл -- '
#                             elif age < 15:
#                                 edited_string += 'таб. 200 мг -- '
#                             else:
#                                 edited_string += 'таб. 500 мг -- '
#
#                         elif drug_name == 'Ибупрофен' and drug__form == 'автоматически':
#                             if age < 4:
#                                 edited_string += 'суспензия 100 мг/5мл -- '
#                             elif age < 12:
#                                 edited_string += 'суспензия 200 мг/5мл -- '
#                             else:
#                                 edited_string += 'таб. 200 мг -- '
#
#                         else:
#                             if drug__form:
#                                 edited_string += f'{drug__form} -- '
#
#                         edited_string += f'{drug__dosa} -- '
#
#                         for marker in data['examination']['selected_drugs'][drug_category][drug_name].get(
#                                 'Способ применения', []):
#                             edited_string += marker + ', '
#
#                 else:
#                     edited_string = f"{drug_name}: "
#                     for marker in ("Форма", "Дозировка", "Кратность", "Длительность"):
#                         if data['examination']['selected_drugs'][drug_category][drug_name].get(marker, ''):
#                             edited_string += \
#                                 data['examination']['selected_drugs'][drug_category][drug_name].get(marker,
#                                                                                                     '') + ' -- '
#                     for marker in data['examination']['selected_drugs'][drug_category][drug_name].get(
#                             'Способ применения', []):
#                         edited_string += marker + ', '
#
#             else:
#                 edited_string = f"{drug_name}: "
#                 for marker in ("Форма", "Дозировка", "Кратность", "Длительность"):
#                     if data['examination']['selected_drugs'][drug_category][drug_name].get(marker, ''):
#                         edited_string += \
#                             data['examination']['selected_drugs'][drug_category][drug_name].get(marker,
#                                                                                                 '') + ' -- '
#                 for marker in data['examination']['selected_drugs'][drug_category][drug_name].get(
#                         'Способ применения', []):
#                     edited_string += marker + ', '
#
#             edited_string = edited_string.strip()
#             if edited_string[-1] == ',':
#                 edited_string = edited_string[:-1]
#             elif edited_string[-1] == '-':
#                 edited_string = edited_string[:-2]
#
#             deleted_string = ''
#             for string in prescription_text.split('\n'):
#                 if string.startswith(drug_name):
#                     deleted_string = string
#                     break
#
#             if deleted_string:
#                 prescription_text = prescription_text.replace(deleted_string, edited_string)
#             else:
#                 prescription_text += f"\n{edited_string}"
#             txt_prescription.delete(1.0, 'end')
#             txt_prescription.insert(1.0, prescription_text.strip().replace('\n\n', '\n'))
#
#         def change_prescription_kb_status():
#             txt_prescription = data['examination']['ScrolledText'].get('txt_prescription')
#             frame_prescription_buttons = data['examination']['frames'].get('frame_prescription_buttons')
#             change_prescription_kb_button = data['examination']['buttons'].get('change_prescription_kb_button')
#
#
#             if data['examination'].get('open_prescription_kb') == 'open':
#                 data['examination']['open_prescription_kb'] = 'closed'
#                 change_prescription_kb_button['text'] = 'открыть клавиатуру рекомендаций'
#                 txt_prescription['height'] = 4
#                 txt_prescription['width'] = 70
#                 frame_prescription_buttons.pack_forget()
#
#             else:
#                 data['examination']['open_prescription_kb'] = 'open'
#                 frame_prescription_buttons.pack(fill='both', expand=True, padx=2, pady=2)
#                 change_prescription_kb_button['text'] = 'закрыть клавиатуру рекомендаций'
#                 txt_prescription['height'] = 8
#                 txt_prescription['width'] = 60
#
#                 edit_examination_kb_text()
#
#         paste_frame_prescription()
#
#
#         def paste_frame_ln():
#             def paste_frame_second_examination():
#                 frame_second_examination = Frame(examination_root, borderwidth=1, relief="solid", padx=1, pady=1)
#                 Label(master=frame_second_examination, text="Повторный осмотр",
#                       font=('Comic Sans MS', user.get('text_size')), bg='white'
#                       ).pack(fill='both', expand=True, side='left')
#                 Entry(frame_second_examination, width=20,
#                       textvariable=txt_second_examination,
#                       font=('Comic Sans MS', user.get('text_size'))
#                       ).pack(fill='both', expand=True, side='left')
#                 Radiobutton(frame_second_examination,
#                             image=user.get('сalendar_img'),
#                             font=('Comic Sans MS', user.get('text_size')),
#                             value=f"second_examination__Повторный осмотр",
#                             variable=selected_button,
#                             command=calendar_LN,
#                             indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                             ).pack(fill='both', expand=True, side='left')
#                 frame_second_examination.pack(fill='both', expand=True, padx=2, pady=2)
#
#             def paste_ln_but():
#                 frame_ln_main = Frame(examination_root, borderwidth=1, relief="solid", padx=3, pady=3)
#
#                 frame_ln_but = Frame(frame_ln_main, padx=1, pady=1)
#                 for but in ("Справка ВН", "Лист ВН", "Уход обеспечен"):
#                     Radiobutton(frame_ln_but, text=but,
#                                 font=('Comic Sans MS', user.get('text_size')),
#                                 value=but, variable=selected_type_ln, command=select_type_ln,
#                                 indicatoron=False, selectcolor='#77f1ff'
#                                 ).pack(fill='both', expand=True, side='left')
#                 selected_type_ln.set('Уход обеспечен')
#                 frame_ln_but.pack(fill='both', expand=True)
#
#                 frame_ln_add = Frame(frame_ln_main, padx=1, pady=1)
#                 data['examination']['frames']['LN_frames']['frame_ln_add'] = frame_ln_add
#
#                 frame_ln_num = Frame(frame_ln_add)
#
#                 Label(master=frame_ln_num,
#                       textvariable=lbl_type_ln,
#                       font=('Comic Sans MS', user.get('text_size')), bg='white'
#                       ).pack(fill='both', expand=True, side='left')
#                 Entry(frame_ln_num,
#                       textvariable=txt_ln_num,
#                       width=15, font=('Comic Sans MS', user.get('text_size'))
#                       ).pack(fill='both', expand=True, side='left')
#
#                 frame = Frame(frame_ln_num)
#                 Label(master=frame, text=" с ",
#                       font=('Comic Sans MS', user.get('text_size')), bg='white'
#                       ).pack(fill='both', expand=True, side='left')
#                 Entry(frame, textvariable=txt_ln_from,
#                       width=15, font=('Comic Sans MS', user.get('text_size'))
#                       ).pack(fill='both', expand=True, side='left')
#
#                 Radiobutton(frame,
#                             image=user.get('сalendar_img'),
#                             font=('Comic Sans MS', user.get('text_size')),
#                             value=f"ln_from__Больничный с ...",
#                             variable=selected_button,
#                             command=calendar_LN,
#                             indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                             ).pack(fill='both', expand=True, side='left')
#
#                 Label(master=frame, text=" по ",
#                       font=('Comic Sans MS', user.get('text_size')), bg='white'
#                       ).pack(fill='both', expand=True, side='left')
#                 Entry(frame, textvariable=txt_ln_until,
#                       width=15, font=('Comic Sans MS', user.get('text_size'))
#                       ).pack(fill='both', expand=True, side='left')
#                 Radiobutton(frame,
#                             image=user.get('сalendar_img'),
#                             font=('Comic Sans MS', user.get('text_size')),
#                             value=f"ln_until__Больничный по ...",
#                             variable=selected_button,
#                             command=calendar_LN,
#                             indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                             ).pack(fill='both', expand=True, side='left')
#
#                 frame.pack(fill='both', expand=True, side='left')
#                 data['examination']['frames']['LN_frames']['frame_active_ln'] = frame
#
#                 frame = Frame(frame_ln_num)
#                 Label(master=frame, text=" закрыт к труду c ",
#                       font=('Comic Sans MS', user.get('text_size')), bg='white'
#                       ).pack(fill='both', expand=True, side='left')
#                 Entry(frame, textvariable=txt_ln_until,
#                       width=15, font=('Comic Sans MS', user.get('text_size'))
#                       ).pack(fill='both', expand=True, side='left')
#                 Radiobutton(frame,
#                             image=user.get('сalendar_img'),
#                             font=('Comic Sans MS', user.get('text_size')),
#                             value=f"ln_until__Больничный по ...",
#                             variable=selected_button,
#                             command=calendar_LN,
#                             indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                             ).pack(fill='both', expand=True, side='left')
#                 data['examination']['frames']['LN_frames']['frame_closed_ln'] = frame
#
#                 frame_ln_num.pack(fill='both', expand=True)
#
#                 frame = Frame(frame_ln_add)
#                 Button(frame, text='Мои бланки',
#                        font=('Comic Sans MS', user.get('text_size')),
#                        command=open_frame_ln_my_blanks
#                        ).pack(fill='both', expand=True, side='left')
#
#                 Button(frame, textvariable=but_ln_closed,
#                        font=('Comic Sans MS', user.get('text_size')),
#                        command=ln_closed
#                        ).pack(fill='both', expand=True, side='left')
#                 but_ln_closed.set('Закрыть к труду')
#
#                 Radiobutton(frame, text="Создать документ по уходу",
#                             font=('Comic Sans MS', user.get('text_size')),
#                             value=f"по уходу",
#                             variable=selected_button,
#                             command=write_ln,
#                             indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                             ).pack(fill='both', expand=True, side='left')
#
#                 Radiobutton(frame, text="Создать документ по болезни",
#                             font=('Comic Sans MS', user.get('text_size')),
#                             value=f"по болезни",
#                             variable=selected_button,
#                             command=write_ln,
#                             indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                             ).pack(fill='both', expand=True, side='left')
#
#                 frame.pack(fill='both', expand=True)
#
#                 frame_ln_main.pack(fill='both', expand=True, padx=2, pady=2)
#
#                 frame_ln_my_blanks = Frame(frame_ln_add, borderwidth=1, relief="solid", padx=1, pady=1)
#                 frame_ln_main.pack(fill='both', expand=True, padx=2, pady=2)
#                 data['examination']['frames']['LN_frames']['frame_ln_my_blanks'] = frame_ln_my_blanks
#                 paste_my_ln_butt()
#                 frame_ln_my_blanks.pack(fill='both', expand=True, padx=2, pady=2)
#
#
#             def paste_my_ln_butt():
#                 def add_my_new_ln():
#
#                     if not my_new_txt_ln_num.get():
#                         messagebox.showerror('Ошибка!', "Не указан номер первого ЛН")
#                     else:
#                         type_ln = selected_type_ln.get()
#                         insert_data = f"__{my_new_txt_ln_num.get()}"
#                         if type_ln == 'Лист ВН':
#                             insert_data = f"{my_new_txt_ln_text.get()}__{my_new_txt_ln_num.get()}"
#
#                         data_base(command='examination__edit_doctor_LN',
#                                   insert_data=[type_ln, insert_data])
#
#                         data['examination']['open_frame_ln_my_blanks'] = 'closed'
#                         frame = data['examination']['frames']['LN_frames'].get('pasted_frame_my_blanks')
#                         if frame:
#                             frame.pack_forget()
#                         frame_ln_my_blanks.pack_forget()
#
#                         paste_my_ln_butt()
#
#                 def select_ln_num():
#                     txt_ln_num.set(selected_ln_num.get())
#                     txt_ln_from.set(datetime.now().strftime("%d.%m.%Y"))
#
#                 def is_valid__new_ln(num_ln):
#                     if num_ln.isdigit():
#                         return True
#                     else:
#                         return False
#
#                 data['examination']['buttons']['LN_buttons'] = dict()
#                 frame_ln_my_blanks = data['examination']['frames']['LN_frames'].get('frame_ln_my_blanks')
#                 for type_ln in ('Справка ВН', 'Лист ВН'):
#                     frame_ln_my_blanks_local = Frame(frame_ln_my_blanks)
#                     data['examination']['frames']['LN_frames'][f'my_blanks__{type_ln}'] = frame_ln_my_blanks_local
#
#                     found_info = None
#                     if user.get('my_LN'):
#                         for ln_data in user.get('my_LN'):
#                             if type_ln == ln_data[0]:
#                                 found_info = ln_data[1]
#                     if found_info:
#                         first_ln_num = int(found_info.split('__')[-1])
#                         ln_text = found_info.split('__')[0]
#                         local_data = [[i for i in range(first_ln_num, first_ln_num + 5)],
#                                       [i for i in range(first_ln_num + 5, first_ln_num + 10)]]
#                         for ln_list in local_data:
#                             frame = Frame(frame_ln_my_blanks_local, padx=1, pady=1)
#                             for ln_num in ln_list:
#                                 btn = Radiobutton(frame, text=f"{ln_text} {ln_num}",
#                                                   font=('Comic Sans MS', user.get('text_size')),
#                                                   value=f"{ln_text} {ln_num}",
#                                                   variable=selected_ln_num, command=select_ln_num, bg="#cefeed",
#                                                    indicatoron=False, selectcolor='#77f1ff')
#                                 btn.pack(fill='both', expand=True, side='left')
#                                 data['examination']['buttons']['LN_buttons'][f"{ln_text} {ln_num}"] = btn
#
#
#                                 # if found_info_past:
#                                 #     for i in found_info_past:
#                                 #         if isinstance(i, tuple):
#                                 #             i = i[0]
#                                 #         if str(ln_num) in i:
#                                 #             btn['bg'] = '#cdcdcd'
#                                 #             break
#                                 #     else:
#                                 #         if not active_ln:
#                                 #             active_ln = True
#                                 #             txt_ln_num.set(f"{first_ln_text} {first_ln_num}")
#                                 #             txt_ln_from.set(datetime.now().strftime("%d.%m.%Y"))
#                             frame.pack(fill='both', expand=True)
#
#
#                     frame = Frame(frame_ln_my_blanks_local, padx=1, pady=1)
#                     if type_ln == 'Лист ВН':
#                         Label(master=frame, text="Новый десяток Листков ВН  Серия:",
#                               font=('Comic Sans MS', user.get('text_size')),
#                               bg='white').pack(fill='both', expand=True, side='left')
#
#                         Entry(frame, width=5,
#                               textvariable=my_new_txt_ln_text,
#                               justify="center", font=('Comic Sans MS', user.get('text_size'))
#                               ).pack(fill='both', expand=True, side='left')
#                         my_new_txt_ln_text.set('ВА')
#
#                         Label(master=frame, text="  Номер:",
#                               font=('Comic Sans MS', user.get('text_size')), bg='white'
#                               ).pack(fill='both', expand=True, side='left')
#
#                     else:
#                         Label(master=frame, text="Новый десяток Справок ВН  Номер:",
#                               font=('Comic Sans MS', user.get('text_size')),
#                               bg='white'
#                               ).pack(fill='both', expand=True, side='left')
#
#                     check_new_ln = (root_examination.register(is_valid__new_ln), "%P")
#                     Entry(frame, width=15, textvariable=my_new_txt_ln_num,
#                           font=('Comic Sans MS', user.get('text_size')),
#                           justify="center",
#                           validatecommand=check_new_ln, validate="all"
#                           ).pack(fill='both', expand=True, side='left')
#
#                     Button(frame, text='Применить',
#                            font=('Comic Sans MS', user.get('text_size')),
#                            command=add_my_new_ln
#                            ).pack(fill='both', expand=True, side='left')
#
#                     frame.pack(fill='both', expand=True)
#
#             def ln_closed():
#                 frame_active_ln = data['examination']['frames']['LN_frames'].get('frame_active_ln')
#                 frame_closed_ln = data['examination']['frames']['LN_frames'].get('frame_closed_ln')
#                 if not data['examination'].get('ln_closed'):
#                     data['examination']['ln_closed'] = True
#                     frame_active_ln.pack_forget()
#                     frame_closed_ln.pack(fill='both', expand=True, side='left')
#                     but_ln_closed.set("отменить закрытие")
#                     txt_ln_until.set((datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y"))
#
#                 else:
#                     data['examination']['ln_closed'] = False
#                     frame_closed_ln.pack_forget()
#                     frame_active_ln.pack(fill='both', expand=True, side='left')
#                     txt_ln_until.set('')
#                     but_ln_closed.set("закрыть к труду")
#
#             def open_frame_ln_my_blanks():
#
#                 type_ln = selected_type_ln.get()
#                 frame_ln_my_blanks = data['examination']['frames']['LN_frames'].get('frame_ln_my_blanks')
#
#                 frame_ln_my_blanks = data['examination']['frames']['LN_frames'].get(f'my_blanks__{type_ln}')
#
#                 frame = data['examination']['frames']['LN_frames'].get('pasted_frame_my_blanks')
#                 if frame:
#                     frame.pack_forget()
#                     data['examination']['frames']['LN_frames']['pasted_frame_my_blanks'] = None
#
#                 if data['examination'].get('open_frame_ln_my_blanks', '') == 'open':
#                     data['examination']['open_frame_ln_my_blanks'] = 'closed'
#                     frame_ln_my_blanks.pack_forget()
#                 elif data['examination'].get('open_frame_ln_my_blanks', '') == 'closed':
#                     data['examination']['open_frame_ln_my_blanks'] = 'open'
#
#                 elif not data['examination'].get('open_frame_ln_my_blanks'):
#                     data['examination']['open_frame_ln_my_blanks'] = 'open'
#
#                 if data['examination'].get('open_frame_ln_my_blanks', '') == 'open':
#                     frame = data['examination']['frames']['LN_frames'].get(f'my_blanks__{type_ln}')
#                     frame.pack(fill='both', expand=True)
#                     data['examination']['frames']['LN_frames']['pasted_frame_my_blanks'] = frame
#
#                     frame_ln_my_blanks.pack(fill='both', expand=True)
#
#             def write_ln():
#                 data['examination']['LN_data']['type_doc'] = selected_button.get()
#
#                 def save():
#                     def check_input():
#                         error_flag = False
#
#                         for marker in data['examination']['LN_data'].get('current_data'):
#                             if marker in ("Фамилия", "Имя", "Дата рождения", "Адрес места жительства",
#                                           'Место работы (службы, учебы)') and not data['examination']['LN_data'][
#                                 'current_data'].get(marker).get():
#                                 messagebox.showerror('Ошибка', f"Ошибка!\nНе указан пункт\n'{marker}'")
#                                 return False
#                             elif marker == "Дата рождения":
#                                 try:
#                                     if get_age(data['examination']['LN_data']['current_data'].get(marker).get()) < 0:
#                                         messagebox.showerror('Ошибка',
#                                                              f"Дата рождения не может быть больше текущей даты!")
#                                         return False
#                                 except Exception:
#                                     messagebox.showerror('Ошибка', f"Дата рождения должна быть в формате 'ДД.ММ.ГГ'")
#                                     return False
#                             elif marker in ("Дата выдачи", "Дата начала ВН", "Дата окончания ВН"):
#                                 try:
#                                     get_age(data['examination']['LN_data']['current_data'].get(marker).get())
#                                 except Exception:
#                                     messagebox.showerror('Ошибка', f"{marker} должна быть в формате 'ДД.ММ.ГГ'")
#                                     return False
#
#                         return True
#
#                     if check_input():
#                         render_data.clear()
#                         txt_ln_from.delete(0, 'end')
#                         txt_ln_from.insert(0, data['examination']['LN_data']['current_data'].get(
#                             "Дата начала ВН").get().strip())
#
#                         txt_ln_until.delete(0, 'end')
#                         txt_ln_until.insert(0, data['examination']['LN_data']['current_data'].get(
#                             "Дата окончания ВН").get().strip())
#
#                         txt_second_examination.delete(0, 'end')
#                         txt_second_examination.insert(0, data['examination']['LN_data']['current_data'].get(
#                             "Дата окончания ВН").get().strip())
#
#                         data['examination']['LN_data']['current_data']['save'] = True
#                         render_data['patient_info_1'] = \
#                             data['examination']['LN_data']['current_data'].get(
#                                 'Информация про ребенка (в корешок)').get().strip()
#                         render_data['patient_info_2'] = \
#                             data['examination']['LN_data']['current_data'].get('Особые отметки').get().strip()
#                         render_data['parent_name_full'] = \
#                             f"{data['examination']['LN_data']['current_data'].get('Фамилия').get().strip()} " \
#                             f"{data['examination']['LN_data']['current_data'].get('Имя').get().strip()} " \
#                             f"{data['examination']['LN_data']['current_data'].get('Отчество').get().strip()}"
#                         render_data['address'] = \
#                             data['examination']['LN_data']['current_data'].get('Адрес места жительства').get().strip()
#                         render_data['work'] = \
#                             data['examination']['LN_data']['current_data'].get(
#                                 'Место работы (службы, учебы)').get().strip()
#                         render_data['doctor_name'] = \
#                             user.get('doctor_name').split()[0]
#
#                         for marker_1, marker_2 in (('d_open', 'Дата выдачи'), ('d_from', 'Дата начала ВН'),
#                                                    ('d_until', 'Дата окончания ВН'),
#                                                    ('b_d_1', 'Дата рождения'), ('b_d_2', 'Дата рождения'),
#                                                    ('parent_name_1', 'Фамилия'), ('parent_name_2', 'Имя'),
#                                                    ('parent_name_3', 'Отчество')):
#                             if marker_1 in ('d_open', 'd_from', 'd_until', 'b_d_1', 'b_d_2'):
#                                 date = ''
#                                 for word in data['examination']['LN_data']['current_data'].get(marker_2).get().strip():
#                                     if word.isdigit():
#                                         date += word
#                                     else:
#                                         date += '.'
#                                 date = date.split('.')
#                                 if len(date[-1]) == 4:
#                                     year = date.pop(-1)
#                                     date.append(f"{year[-2]}{year[-1]}")
#                                 date = ''.join(date)
#                                 text = list()
#                                 for word in date:
#                                     text.append(word)
#                                 render_data[marker_1] = '  '.join(text)
#                             else:
#                                 text = list()
#                                 for word in data['examination']['LN_data']['current_data'].get(marker_2).get().strip():
#                                     text.append(word)
#                                 if marker_1 in ('parent_name_1', 'parent_name_2', 'parent_name_3'):
#                                     render_data[marker_1] = '  '.join(text)
#                                 else:
#                                     render_data[marker_1] = ' '.join(text)
#
#                         doc = DocxTemplate(f".{os.sep}example{os.sep}certificate{os.sep}"
#                                            f"БЛАНК_ВН_{selected_type_ln.get().replace(' ', '_'.capitalize())}.docx")
#                         doc.render(render_data)
#                         doc_name = f".{os.sep}generated{os.sep}БЛАНК_ВН_{patient.get('name', '').split()[0]}.docx"
#                         doc_name = save_document(doc=doc, doc_name=doc_name)
#
#                         render_data.clear()
#                         run_document(doc_name)
#                         new_root.destroy()
#                         data_base(command="statistic_write",
#                                   insert_data="Документ ВН")
#
#                 def select_last_data():
#                     last_info = selected_button.get()
#                     for marker in data['examination']['LN_data']['last_patient_ln'].get(last_info, []):
#                         if data['examination']['LN_data']['current_data'].get(marker):
#                             data['examination']['LN_data']['current_data'][marker].set(
#                                 data['examination']['LN_data']['last_patient_ln'][last_info].get(marker))
#
#                 if data['examination']['LN_data'].get('ln_root'):
#                     data['examination']['LN_data']['ln_root'].destroy()
#
#                 new_root = Toplevel()
#                 data['examination']['LN_data']['ln_root'] = new_root
#                 new_root.title(
#                     f"Генерация документа {selected_type_ln.get()} {data['examination']['LN_data'].get('type_doc')}")
#                 new_root.bind("<Control-KeyPress>", keypress)
#                 if not data['examination']['LN_data'].get('current_data'):
#                     data['examination']['LN_data']['current_data'] = {
#                         "Дата выдачи": StringVar(),
#                         "Дата начала ВН": StringVar(),
#                         "Дата окончания ВН": StringVar(),
#                         "Фамилия": StringVar(),
#                         "Имя": StringVar(),
#                         "Отчество": StringVar(),
#                         "Дата рождения": StringVar(),
#                         "Адрес места жительства": StringVar(),
#                         "Место работы (службы, учебы)": StringVar(),
#                         "Информация про ребенка (в корешок)": StringVar(),
#                         "Особые отметки": StringVar(),
#                     }
#
#                 data['examination']['LN_data']['current_data']['Дата выдачи'].set(datetime.now().strftime("%d.%m.%y"))
#                 if txt_ln_from.get().strip():
#                     data['examination']['LN_data']['current_data']['Дата начала ВН'].set(txt_ln_from.get().strip())
#                 else:
#                     data['examination']['LN_data']['current_data']['Дата начала ВН'].set(
#                         datetime.now().strftime("%d.%m.%y"))
#                 if txt_ln_until.get().strip():
#                     data['examination']['LN_data']['current_data']['Дата окончания ВН'].set(txt_ln_until.get().strip())
#                 data['examination']['LN_data']['current_data']['Адрес места жительства'].set(patient.get('address', ''))
#
#                 if 'по уходу' in data['examination']['LN_data'].get('type_doc'):
#                     try:
#                         data['examination']['LN_data']['current_data'][
#                             'Информация про ребенка (в корешок)'].set(
#                             f"{' '.join(patient.get('name', ' ').strip().split()[:-1])} {patient.get('birth_date', '')}")
#                         data['examination']['LN_data']['current_data'][
#                             'Особые отметки'].set(
#                             f"{patient.get('name', ' ').strip().split()[1]} {patient.get('birth_date', '')}")
#                     except IndexError:
#                         data['examination']['LN_data']['current_data'][
#                             'Информация про ребенка (в корешок)'].set(
#                             f"{patient.get('name', ' ')} {patient.get('birth_date', '')}")
#                         data['examination']['LN_data']['current_data'][
#                             'Особые отметки'].set(
#                             f"{patient.get('name', ' ')} {patient.get('birth_date', '')}")
#
#                 if 'по болезни' in data['examination']['LN_data'].get('type_doc'):
#                     data['examination']['LN_data']['current_data']['Дата рождения'].set(patient.get('birth_date', ''))
#                     if len(patient.get('name', ' ').strip().split()) == 3:
#                         data['examination']['LN_data']['current_data']['Фамилия'].set(
#                             patient.get('name').strip().split()[0])
#                         data['examination']['LN_data']['current_data']['Имя'].set(
#                             patient.get('name').strip().split()[1])
#                         data['examination']['LN_data']['current_data']['Отчество'].set(
#                             patient.get('name').strip().split()[2])
#
#                     data['examination']['LN_data']['current_data']['Информация про ребенка (в корешок)'].set("")
#                     data['examination']['LN_data']['current_data']['Особые отметки'].set("")
#
#                 frame_title = Frame(new_root)
#                 for marker in ('Дата выдачи', 'Дата начала ВН', 'Дата окончания ВН'):
#                     frame = Frame(frame_title)
#                     Label(frame, text=f"{marker}:",
#                           font=('Comic Sans MS', user.get('text_size')),
#                           bg="#36566d", fg='white').grid(column=0, row=0, sticky='nwse', padx=2, pady=2, ipadx=3)
#                     Entry(frame, width=15, font=('Comic Sans MS', user.get('text_size')),
#                           textvariable=data['examination']['LN_data']['current_data'].get(marker)
#                           ).grid(column=1, row=0, sticky='nwse', ipadx=2, ipady=2)
#                     Radiobutton(frame, text="Календарь",
#                                 font=('Comic Sans MS', user.get('text_size')),
#                                 value=f"ln_root_{marker}__{marker}",
#                                 variable=selected_button,
#                                 command=calendar_LN,
#                                 indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                                 ).grid(column=0, row=1, sticky='nwse', ipadx=2, ipady=2, columnspan=2)
#
#                     frame.pack(fill='both', expand=True, padx=2, pady=2, side='left')
#                 frame_title.pack(fill='both', expand=True, padx=2, pady=2)
#
#                 row = 0
#                 frame = Frame(new_root)
#                 for marker in ('Фамилия', 'Имя', 'Отчество', 'Дата рождения',
#                                'Адрес места жительства', 'Место работы (службы, учебы)',
#                                'Информация про ребенка (в корешок)', 'Особые отметки'):
#                     Label(frame, text=marker,
#                           font=('Comic Sans MS', user.get('text_size')),
#                           bg="#36566d", fg='white').grid(column=0, row=row, sticky='nwse', padx=2, pady=2)
#                     Entry(frame, width=30, font=('Comic Sans MS', user.get('text_size')),
#                           textvariable=data['examination']['LN_data']['current_data'].get(marker)
#                           ).grid(column=1, row=row, sticky='nwse', ipadx=2, ipady=2)
#                     row += 1
#                 frame.pack(fill='both', expand=True, padx=2, pady=2)
#                 frame.columnconfigure(index='all', minsize=40, weight=1)
#
#                 Button(new_root, text='Создать документ', command=save,
#                        font=('Comic Sans MS', user.get('text_size'))
#                        ).pack(fill='both', expand=True, padx=2, pady=2)
#
#                 if data['examination']['LN_data'].get('last_patient_ln'):
#                     frame = Frame(new_root)
#                     Label(frame, text="Прошлые данные",
#                           font=('Comic Sans MS', user.get('text_size')),
#                           bg="#36566d", fg='white').pack(fill='both', expand=True, padx=2, pady=2)
#
#                     for key in data['examination']['LN_data'].get('last_patient_ln'):
#                         Radiobutton(frame, text=key,
#                                     font=('Comic Sans MS', user.get('text_size')),
#                                     value=f"{key}",
#                                     variable=selected_button,
#                                     command=select_last_data,
#                                     indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
#                                     ).pack(fill='both', expand=True, padx=2, pady=2)
#                     frame.pack(fill='both', expand=True, padx=2, pady=2)
#
#                 new_root.mainloop()
#
#             def calendar_LN():
#                 text_field = selected_button.get()
#                 selected_button.set('')
#                 paste_calendar(text_field=text_field)
#
#             def select_type_ln():
#                 frame_ln_add = data['examination']['frames']['LN_frames'].get('frame_ln_add')
#                 frame_ln_my_blanks = data['examination']['frames']['LN_frames'].get('frame_ln_my_blanks')
#
#                 if data['examination'].get('open_frame_ln_my_blanks', '') == 'open':
#                     data['examination']['open_frame_ln_my_blanks'] = 'closed'
#                     frame_ln_my_blanks.pack_forget()
#
#                 type_ln = selected_type_ln.get()
#
#                 if type_ln in ("Справка ВН", "Лист ВН"):
#                     lbl_type_ln.set(f"{type_ln} номер: ")
#                     frame_ln_add.pack(fill='both', expand=True)
#                 else:
#                     frame_ln_add.pack_forget()
#
#
#             txt_ln_num = data['examination']['var'].get('txt_ln_num')
#             txt_ln_from = data['examination']['var'].get('txt_ln_from')
#             txt_ln_until = data['examination']['var'].get('txt_ln_until')
#             txt_second_examination = data['examination']['var'].get('txt_second_examination')
#             lbl_type_ln = data['examination']['var'].get('lbl_type_ln')
#             but_ln_closed = data['examination']['var'].get('but_ln_closed')
#             my_new_txt_ln_text = StringVar()
#             my_new_txt_ln_num = StringVar()
#             selected_ln_num = StringVar()
#
#             data['examination']['frames']['LN_frames'] = dict()
#
#             paste_frame_second_examination()
#
#             paste_ln_but()
#
#         paste_frame_ln()
#
#         def paste_calendar(text_field):
#             command, marker = text_field.split('__')
#             if data['examination'].get('calendar_root'):
#                 data['examination']['calendar_root'].destroy()
#
#             calendar_root = Toplevel()
#             data['examination']['calendar_root'] = calendar_root
#             calendar_root.title(f'Календарь {marker}')
#             calendar_root.config(bg='white')
#
#             selected_day = StringVar()
#             actual_data = dict()
#
#             now = datetime.now()
#             actual_data['year'] = now.year
#             actual_data['month'] = now.month
#
#             def prev_month():
#                 curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
#                 new = curr - timedelta(days=1)
#                 actual_data['year'] = int(new.year)
#                 actual_data['month'] = int(new.month)
#                 create_calendar()
#
#             def next_month():
#                 curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
#                 new = curr + timedelta(days=31)
#                 actual_data['year'] = int(new.year)
#                 actual_data['month'] = int(new.month)
#                 create_calendar()
#
#             def select_day():
#                 txt_ln_num = data['examination']['var'].get('txt_ln_num')
#                 txt_ln_from = data['examination']['var'].get('txt_ln_from')
#                 txt_ln_until = data['examination']['var'].get('txt_ln_until')
#                 txt_second_examination = data['examination']['var'].get('txt_second_examination')
#
#                 day = selected_day.get()
#                 edit_day = list()
#                 for i in day.split('.'):
#                     if len(i) == 1:
#                         i = f"0{i}"
#                     edit_day.append(i)
#                 answer = '.'.join(edit_day)
#                 if command.startswith('ln_root_'):
#                     data['examination']['LN_data']['current_data'][command.split('_')[-1]].set(answer)
#
#                 elif command == 'ln_from':
#                     txt_ln_from.set(answer)
#
#                 elif command == 'ln_until':
#                     txt_ln_until.set(answer)
#                     txt_second_examination.set(answer)
#
#                 elif command == 'second_examination':
#                     txt_second_examination.set(answer)
#
#                 calendar_root.destroy()
#
#             frame_month_year = Frame(calendar_root, relief="solid", padx=1, pady=1)
#
#             frame_month_year.columnconfigure(index='all', minsize=40, weight=1)
#             frame_month_year.rowconfigure(index='all', minsize=20)
#             frame_month_year.pack(fill='both', expand=True)
#
#             def create_calendar():
#                 if destroy_elements.get('loc_calendar_frame'):
#                     loc_calendar_frame = destroy_elements.get('loc_calendar_frame')
#                     loc_calendar_frame.destroy()
#
#                 loc_calendar_frame = Frame(calendar_root, relief="solid", padx=1, pady=1)
#                 destroy_elements['loc_calendar_frame'] = loc_calendar_frame
#
#                 for calendar_mark in ('prev', 'curr', 'next'):
#                     row, col = 0, 0
#
#                     frame_days = Frame(loc_calendar_frame, relief="ridge", borderwidth=0.5, padx=1, pady=1)
#                     if calendar_mark == 'prev':
#                         but_prev_month = Button(frame_days, text='<', command=prev_month,
#                                                 font=('Comic Sans MS', user.get('text_size')))
#                         but_prev_month.grid(row=row, column=0, sticky='ew', columnspan=7)
#
#
#                     elif calendar_mark == 'next':
#                         but_next_month = Button(frame_days, text='>', command=next_month,
#                                                 font=('Comic Sans MS', user.get('text_size')))
#                         but_next_month.grid(row=row, column=0, sticky='ew', columnspan=7)
#
#
#                     else:
#                         btn = Radiobutton(frame_days, text="Сегодня",
#                                           font=('Comic Sans MS', user.get('text_size')),
#                                           value=datetime.now().strftime("%d.%m.%Y"),
#                                           variable=selected_day, command=select_day,
#                                           indicatoron=False, selectcolor='#77f1ff')
#                         btn.grid(row=row, column=0, sticky='ew', columnspan=7)
#
#                     if calendar_mark == 'prev':
#                         curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
#                         new = curr - timedelta(days=1)
#                         year = int(new.year)
#                         month = int(new.month)
#
#                     elif calendar_mark == 'next':
#                         curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
#                         new = curr + timedelta(days=31)
#                         year = int(new.year)
#                         month = int(new.month)
#
#                     else:
#                         year = actual_data.get('year')
#                         month = actual_data.get('month')
#
#                     month_name = {
#                         'January': 'Январь',
#                         'February': 'Февраль',
#                         'March': 'Март',
#                         'April': 'Апрель',
#                         'May': 'Май',
#                         'June': 'Июнь',
#                         'July': 'Июль',
#                         'August': 'Август',
#                         'September': 'Сентябрь',
#                         'October': 'Октябрь',
#                         'November': 'Ноябрь',
#                         'December': 'Декабрь'
#                     }
#
#                     row += 1
#                     lbl_month_year = Label(frame_days,
#                                            text=f"{month_name.get(calendar.month_name[month])}",
#                                            font=('Comic Sans MS', user.get('text_size')),
#                                            bg='white')
#                     lbl_month_year.grid(column=0, row=row, sticky='ew', columnspan=7)
#
#                     if calendar_mark == 'curr':
#                         lbl_month_year['text'] = f"{month_name.get(calendar.month_name[month])} {str(year)}"
#
#                     # Second row - Week Days
#                     column = 0
#                     row += 1
#                     for day in ["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"]:
#                         lbl = Label(frame_days, text=day,
#                                     relief="solid", borderwidth=0.5,
#                                     font=('Comic Sans MS', user.get('text_size')), bg='white')
#                         lbl.grid(column=column, row=row, sticky='ew', padx=2, pady=2)
#                         column += 1
#
#                     row += 1
#                     column = 0
#
#                     my_calendar = calendar.monthcalendar(year, month)
#                     for week in my_calendar:
#                         row += 1
#                         col = 0
#                         for day in week:
#                             if day == 0:
#                                 col += 1
#                             else:
#                                 # day = str(day)
#                                 # day = str(day)
#                                 # if len(day) == 1:
#                                 #     day = f"0{day}"
#                                 # if len(str(month)) == 1:
#                                 #     month = f"0{month}"
#                                 btn_value = ''
#
#                                 btn = Radiobutton(frame_days, text=day,
#                                                   font=('Comic Sans MS', user.get('text_size')),
#                                                   value=f"{day}.{month}.{year}", variable=selected_day,
#                                                   command=select_day,
#                                                   indicatoron=False, selectcolor='#77f1ff')
#                                 btn.grid(row=row, column=col, sticky='ew')
#                                 col += 1
#
#                                 if datetime.strptime(f"{day}.{month}.{year}", "%d.%m.%Y").weekday() in (5, 6):
#                                     btn['bg'] = '#b4ffff'
#                                 if datetime.now().year == year and datetime.now().month == month and datetime.now().day == int(
#                                         day):
#                                     btn['bg'] = '#ff7b81'
#
#                     frame_days.columnconfigure(index='all', minsize=40, weight=1)
#                     frame_days.rowconfigure(index='all', minsize=20)
#                     frame_days.pack(fill='both', expand=True, side='left')
#
#                 loc_calendar_frame.columnconfigure(index='all', minsize=40, weight=1)
#                 loc_calendar_frame.rowconfigure(index='all', minsize=20)
#                 loc_calendar_frame.pack(fill='both', expand=True, side='left')
#
#             create_calendar()
#
#         # upload_last_data()
#
#     create_main_frames()
#     # paste_examination()


def save_document(doc: Document, doc_name: str):
    if not os.path.exists(path=f".{os.sep}generated"):
        os.mkdir(path=f".{os.sep}generated")

    try:
        doc.save(doc_name)
    except Exception:
        counter = 1
        doc_name = doc_name.replace('.docx', '') + f"_{counter}.docx"
        while True:
            try:
                doc.save(doc_name)
            except Exception:
                counter += 1
                if counter == 100:
                    messagebox.showerror('Ошибка', "Невозможно создать документ")
                    return False
                doc_name = '_'.join(doc_name.replace('.docx', '').split('_')[:-1]) + f"_{counter}.docx"
            else:
                return doc_name

    else:
        return doc_name


def run_document(doc_name):
    if platform.system() == 'Darwin':  # macOS
        subprocess.call(('open', doc_name))
    elif platform.system() == 'Windows':  # Windows
        subprocess.call(('start', "", doc_name), shell=True)
    else:  # linux variants
        subprocess.call(('xdg-open', doc_name))


def data_base(command,
              doctor_name=None,
              insert_data=None,
              delete_data=None):
    if command == 'create_db':
        with sq.connect(f".{os.sep}data_base{os.sep}data_base.db") as conn:
            cur = conn.cursor()

            cur.execute("CREATE TABLE IF NOT EXISTS врачи "
                        "(doctor_name text, district text, ped_div text, "
                        "manager text, open_mark text, text_size text)")
            cur.execute("CREATE TABLE IF NOT EXISTS examination "
                        "(date_time text, doctor_name text, status text, "
                        "LN_type text, patient_info text, examination_text text, "
                        "examination_key text, add_info text)")
            cur.execute("CREATE TABLE IF NOT EXISTS my_saved_diagnosis "
                        "(doctor_name text, diagnosis text, examination_key text)")
            cur.execute("CREATE TABLE IF NOT EXISTS my_LN "
                        "(doctor_name text, ln_type text, ln_num text)")
            cur.execute("CREATE TABLE IF NOT EXISTS my_sport_section "
                        "(doctor_name text, sport_section text)")
            cur.execute("CREATE TABLE IF NOT EXISTS app_data "
                        "(path_examination_data_base text, path_srv_data_base text, "
                        "app_password text, last_reg_password text)")
            cur.execute('''CREATE TABLE IF NOT EXISTS statistic_DOC_db (
            date TEXT, time TEXT, user_id TEXT, info TEXT, district TEXT)''')

            user['app_data'] = dict()
            for mark in ('path_examination_data_base', 'path_srv_data_base', 'app_password', 'last_reg_password'):
                cur.execute(f"SELECT {mark} FROM app_data")
                app_data = cur.fetchone()
                if isinstance(app_data, tuple):
                    user['app_data'][mark] = app_data[0]
                else:
                    user['app_data'][mark] = None
            cur.execute(f"SELECT doctor_name FROM врачи")
            doctor_data = list()
            for i in cur.fetchall():
                doctor_data.append(i[0])
            if not doctor_data:
                cur.execute("INSERT INTO врачи VALUES(?, ?, ?, ?, ?, ?)",
                            ['Иванов И.И.', 1, 1, 'Петров П.П.', True, 20])

            cur.execute(f"SELECT doctor_name, district, ped_div, manager, open_mark FROM врачи")
            flag = False
            doctor_data = cur.fetchall()
            for doctor_name, district, ped_div, manager, open_mark in doctor_data:
                if open_mark:
                    flag = True
            if not flag:
                cur.execute(f"DELETE FROM врачи WHERE doctor_name LIKE 'Иванов И.И.'")
                cur.execute("INSERT INTO врачи VALUES(?, ?, ?, ?, ?, ?)",
                            ['Иванов И.И.', 1, 1, 'Петров П.П.', True, 20])

    elif command == 'edit_path_db':
        with sq.connect(f".{os.sep}data_base{os.sep}data_base.db") as conn:
            cur = conn.cursor()
            cur.execute("DELETE from app_data")
            cur.execute("INSERT INTO app_data VALUES (?, ?, ?, ?)",
                        [user['app_data'].get('path_examination_data_base'),
                         user['app_data'].get('path_srv_data_base'),
                         user['app_data'].get('app_password'),
                         user['app_data'].get('last_reg_password')])

    elif command == 'save_new_patient':
        try:
            path = f".{os.sep}data_base{os.sep}patient_data_base.db"

            with sq.connect(f"{path}") as conn:
                cur = conn.cursor()
                cur.execute(f"INSERT INTO patient_data VALUES({'?, ' * (len(insert_data) - 1)}?)", insert_data)

            if user['app_data'].get('path_srv_data_base') and not user.get('error_connection'):
                path = f"{user['app_data'].get('path_srv_data_base')}patient_data_base.db"
                with sq.connect(f"{path}") as conn:
                    cur = conn.cursor()
                    cur.execute(f"INSERT INTO patient_data VALUES({'?, ' * (len(insert_data) - 1)}?)", insert_data)
            return True
        except Exception:
            return False

    elif command == 'activate_app':
        with sq.connect(f".{os.sep}data_base{os.sep}data_base.db") as conn:
            cur = conn.cursor()
            cur.execute("DELETE from app_data")
            cur.execute("INSERT INTO app_data VALUES (?, ?, ?, ?)",
                        [user['app_data'].get('path_examination_data_base'),
                         user['app_data'].get('path_srv_data_base'),
                         user['app_data'].get('app_password'),
                         datetime.now().strftime("%d.%m.%Y")])

    elif command == 'create_SRV_db':
        try:
            with sq.connect(f"{user['app_data'].get('path_srv_data_base')}examination_data_base.db") as conn:
                cur = conn.cursor()
                cur.execute("CREATE TABLE IF NOT EXISTS examination "
                            "(date_time text, doctor_name text, status text, "
                            "LN_type text, patient_info text, examination_text text, "
                            "examination_key text, add_info text)")

            with sq.connect(f"{user['app_data'].get('path_srv_data_base')}application_data_base.db") as conn:
                cur = conn.cursor()
                cur.execute("CREATE TABLE IF NOT EXISTS врачи "
                            "(doctor_name text, password text, district text, ped_div text, "
                            "manager text, open_mark text, text_size text, add_info text)")
                cur.execute("CREATE TABLE IF NOT EXISTS my_saved_diagnosis "
                            "(doctor_name text, diagnosis text, examination_key text)")
                cur.execute("CREATE TABLE IF NOT EXISTS my_LN "
                            "(doctor_name text, ln_type text, ln_num text)")
                cur.execute("CREATE TABLE IF NOT EXISTS my_sport_section "
                            "(doctor_name text, sport_section text)")
        except Exception:
            pass

    elif command == 'last_edit_patient_db_srv':
        try:
            with sq.connect(f"{user['app_data'].get('path_srv_data_base')}patient_data_base.db") as conn:
                cur = conn.cursor()
                cur.execute(f"SELECT last_edit FROM last_edit")
                last_edit_srv = cur.fetchall()[0]

            return last_edit_srv

        except Exception:
            return False

    elif command == 'last_edit_patient_db_loc':
        with sq.connect(f".{os.sep}data_base{os.sep}patient_data_base.db") as conn:
            cur = conn.cursor()
            cur.execute(f"SELECT last_edit FROM last_edit")
            last_edit_loc = cur.fetchall()[0]
        return last_edit_loc

    elif command == 'get_all_doctor_info':
        user['my_saved_diagnosis'] = list()
        user['my_LN'] = list()
        user['my_sport_section'] = list()

        try:
            local_data = dict()
            with sq.connect(f"{user['app_data'].get('path_srv_data_base')}application_data_base.db") as conn:
                cur = conn.cursor()
                cur.execute("SELECT * FROM врачи")
                all_doctor_info = cur.fetchall()
                for marker in ('my_saved_diagnosis', 'my_LN', 'my_sport_section'):
                    cur.execute(f"SELECT * FROM {marker}")
                    local_data[marker] = cur.fetchall()



            for doctor_name, password, district, ped_div, manager, open_mark, text_size, add_info in all_doctor_info:
                app_info['all_doctor_info'][doctor_name] = {
                    'doctor_name': doctor_name,
                    'password': password,
                    'district': district,
                    'ped_div': ped_div,
                    'manager': manager,
                    'open_mark': open_mark,
                    'text_size': text_size,
                    'add_info': add_info,
                    'my_saved_diagnosis': list(),
                    'my_LN': list(),
                    'my_sport_section': list()}

            for marker in ('my_saved_diagnosis', 'my_LN', 'my_sport_section'):
                for info in local_data.get(marker):
                    doctor_name = info[0]
                    if doctor_name in app_info.get('all_doctor_info'):
                        app_info['all_doctor_info'][doctor_name][marker].append(info[1:])

                        # print(app_info['all_doctor_info'][doctor_name].get(marker))

        except Exception:
            return False

    elif command.startswith('get_certificate_for_district'):
        _, type_table, marker = command.split('__')
        try:
            with sq.connect(f"{user['app_data'].get('path_srv_data_base')}data_base.db") as conn:
                cur = conn.cursor()
                cur.execute(f"CREATE TABLE IF NOT EXISTS certificate_camp__{datetime.now().year} ("
                            "district TEXT, num TEXT, date TEXT, "
                            "name TEXT, birth_date TEXT, gender TEXT, address TEXT)")
                cur.execute(f"CREATE TABLE IF NOT EXISTS certificate_ped_div__{datetime.now().year} ("
                            "ped_div TEXT, district TEXT, num TEXT, date TEXT, "
                            "name TEXT, birth_date TEXT, address TEXT, type_cert TEXT, doctor_name TEXT)")


                found_data = list()
                for year in range(2023, datetime.now().year + 1):
                    if type_table == f"certificate_ped_div":
                        cur.execute(f"SELECT *"
                                    f" FROM {type_table}__{year} WHERE ped_div LIKE '{marker}';")
                    elif type_table == 'certificate_camp':
                        cur.execute(f"SELECT *"
                                    f" FROM {type_table}__{year} WHERE district LIKE '{marker}';")

                    for info in cur.fetchall():
                        if info:
                            found_data.append(info)
            return found_data
        except Exception:
            return False

    elif command == 'save_new_diagnosis':
        try:
            try:
                with sq.connect(f"{user['app_data'].get('path_srv_data_base')}application_data_base.db", timeout=10.0) as connect:
                    cursor = connect.cursor()
                    cursor.execute(f"INSERT INTO my_saved_diagnosis "
                                   f"VALUES(?, ?, ?)", insert_data)
            except Exception:
                pass
            with sq.connect(f".{os.sep}data_base{os.sep}data_base.db") as connect:
                cursor = connect.cursor()
                cursor.execute(f"INSERT INTO my_saved_diagnosis "
                               f"VALUES(?, ?, ?)", insert_data)

            user['my_saved_diagnosis'].append(insert_data[1:])



        except Exception:
            return False
        else:
            return True

    elif command == 'save_new_hobby':
        try:
            try:
                with sq.connect(database=f"{user['app_data'].get('path_srv_data_base')}application_data_base.db", timeout=10.0) as connect:
                    cursor = connect.cursor()
                    cursor.execute("INSERT INTO my_sport_section VALUES(?, ?)",
                                   insert_data)
            except Exception:
                pass

            with sq.connect(f".{os.sep}data_base{os.sep}data_base.db") as connect:
                cursor = connect.cursor()
                cursor.execute("INSERT INTO my_sport_section VALUES(?, ?)",
                               insert_data)
            user['my_sport_section'].append(tuple(insert_data[1:]))

        except Exception as ex:
            print(ex)
            return False
        else:
            return True

    elif command == 'delete_sport_section':
        try:
            try:
                with sq.connect(database=f"{user['app_data'].get('path_srv_data_base')}application_data_base.db", timeout=10.0) as connect:
                    cursor = connect.cursor()
                    cursor.execute(f"DELETE FROM my_sport_section "
                                   f"WHERE doctor_name LIKE '{user.get('doctor_name')}' "
                                   f"AND sport_section LIKE '{delete_data}'")
            except Exception:
                pass

            with sq.connect(f".{os.sep}data_base{os.sep}data_base.db") as connect:
                cursor = connect.cursor()
                cursor.execute(f"DELETE FROM my_sport_section "
                               f"WHERE doctor_name LIKE '{user.get('doctor_name')}' "
                               f"AND sport_section LIKE '{delete_data}'")
            for info in user.get('my_sport_section'):
                if delete_data in info:
                    user['my_sport_section'].remove(info)

        except Exception as ex:
            return False
        else:
            return True

    elif command == 'save_doctor_local':
        with sq.connect(f".{os.sep}data_base{os.sep}data_base.db") as conn:
            cur = conn.cursor()

            cur.execute(f"SELECT doctor_name, district, ped_div, manager, text_size FROM врачи")
            found_data = cur.fetchall()
            cur.execute(f"DELETE FROM врачи")

            for doctor_name, district, ped_div, manager, text_size in found_data:
                if doctor_name == insert_data:
                    cur.execute("INSERT INTO врачи VALUES(?, ?, ?, ?, ?, ?)",
                                [doctor_name, district, ped_div, manager, True, text_size])
                else:
                    cur.execute("INSERT INTO врачи VALUES(?, ?, ?, ?, ?, ?)",
                                [doctor_name, district, ped_div, manager, False, text_size])

    elif command == 'append_local_doctor_data':
        with sq.connect(f".{os.sep}data_base{os.sep}data_base.db") as conn:
            cur = conn.cursor()

            cur.execute(f"SELECT doctor_name, district, ped_div, manager, text_size FROM врачи "
                        f"WHERE doctor_name LIKE '{insert_data}'")

            doctor_name, district, ped_div, manager, text_size = cur.fetchone()
            user['text_size'] = int(text_size)
            user['doctor_name'] = doctor_name
            user['doctor_district'] = district
            user['ped_div'] = ped_div
            user['manager'] = manager

            for marker in ('my_saved_diagnosis', 'my_LN', 'my_sport_section'):
                cur.execute(f"SELECT * FROM {marker} "
                            f"WHERE doctor_name LIKE '{doctor_name}'")
                user[marker] = list()
                found_data = cur.fetchall()
                if found_data:
                    for i in found_data:
                        user[marker].append(i[1:])

    elif command == 'save_certificate_single_window':
        try:

            with sq.connect(f"{user['app_data'].get('path_srv_data_base')}data_base.db") as conn:
                cur = conn.cursor()

                cur.execute(f"CREATE TABLE IF NOT EXISTS certificate_single_window__{datetime.now().year} ("
                            "ped_div TEXT, district TEXT, num INTEGER, date TEXT, "
                            "name TEXT, birth_date TEXT, address TEXT, type_cert TEXT, doctor_name TEXT, add_info TEXT)")

                cur.execute(f"SELECT MAX(num)"
                            f" FROM certificate_single_window__{datetime.now().year}")

                number = cur.fetchone()[0]
                if not number:
                    number = 0
                number += 1
                insert_data[2] = number
                cur.execute(f"INSERT INTO certificate_single_window__{datetime.now().year} VALUES({'?, ' * 9}?)", insert_data)
                return number

                # if type_table == 'certificate_ped_div':
                #     cur.execute(f"SELECT num"
                #                 f" FROM {type_table}__{datetime.now().year} WHERE ped_div LIKE '{district_pd}';")
                # elif type_table == 'certificate_camp':
                #     cur.execute(f"SELECT num FROM {type_table}__{datetime.now().year} WHERE district LIKE '{district_pd}';")
                #
                # numbers = list()
                # for num in cur.fetchall():
                #     if isinstance(num, tuple) and len(num) > 0:
                #         num = num[0]
                #     if num.isdigit():
                #         numbers.append(int(num))
                # if len(numbers) == 0:
                #     numbers.append(0)
                #
                # number = max(numbers) + 1
                # if type_table == 'certificate_ped_div':
                #     data_cert[2] = number
                #     cur.execute(f"INSERT INTO certificate_ped_div__{datetime.now().year} VALUES({'?, ' * 8}?)", insert_data)
                #
                # elif type_table == 'certificate_camp':
                #     data_cert[1] = number
                #     cur.execute(f"INSERT INTO certificate_camp__{datetime.now().year} VALUES({'?, ' * 6}?)", data_cert)
        except Exception as ex:
            print(ex)
            return '__________'

    elif command == 'statistic_write':
        date_now, time_now = datetime.now().strftime("%d.%m.%Y %H:%M:%S").split()
        with sq.connect(f".{os.sep}data_base{os.sep}data_base.db") as conn:
            cur = conn.cursor()
            cur.execute(f"INSERT INTO statistic_DOC_db VALUES('{date_now}', '{time_now}', 'приложение', "
                        f"'{insert_data}', '{user.get('doctor_name')}')")

    elif command == 'get_doc_names_local':
        with sq.connect(f".{os.sep}data_base{os.sep}data_base.db") as conn:
            cur = conn.cursor()
            cur.execute(f"SELECT doctor_name, open_mark FROM врачи")
            all_doctors = list()
            for doctor_name, mark in cur.fetchall():
                if mark == '1':
                    all_doctors.insert(0, doctor_name)
                else:
                    all_doctors.append(doctor_name)

        return all_doctors

    elif command == 'get_doctor_data_local':
        with sq.connect(f".{os.sep}data_base{os.sep}data_base.db") as conn:
            cur = conn.cursor()

            cur.execute(f"SELECT doctor_name, district, ped_div, manager, text_size FROM врачи "
                        f"WHERE open_mark LIKE '1'")
        return cur.fetchone()

    elif command == 'save_new_doc':
        try:
            if user.get('error_connection'):
                with sq.connect(f".{os.sep}data_base{os.sep}data_base.db") as conn:
                    cur = conn.cursor()
                    # cur.execute(f"DELETE FROM врачи WHERE doctor_name LIKE '{doctor_name}'")

                    cur.execute(f"SELECT doctor_name, district, ped_div, manager, text_size FROM врачи")
                    all_doc = cur.fetchall()
                    cur.execute(f"DELETE FROM врачи")

                    for doctor_name, district, ped_div, manager, text_size in all_doc:
                        if doctor_name != insert_data[0]:
                            cur.execute("INSERT INTO врачи VALUES(?, ?, ?, ?, ?, ?)",
                                        [doctor_name, district, ped_div, manager, False, text_size])

                    cur.execute("INSERT INTO врачи VALUES(?, ?, ?, ?, ?, ?)", insert_data)
            else:
                with sq.connect(f"{user['app_data'].get('path_srv_data_base')}application_data_base.db") as conn:
                    cur = conn.cursor()
                    cur.execute(f"DELETE FROM врачи WHERE doctor_name LIKE '{insert_data[0]}'")
                    cur.execute(f"INSERT INTO врачи VALUES({'?, ' * (len(insert_data) - 1)}?)", insert_data)

        except Exception as ex:
            return False, ex
        else:
            return True, True

    elif command == 'certificate__upload_last_data':
        path = f".{os.sep}data_base{os.sep}"
        if user['app_data'].get('path_examination_data_base'):
            path = user['app_data'].get('path_examination_data_base')
        path_examination = f"{path}data_base.db"

        found_info = {
            'select_past_examination': None}

        with sq.connect(f"{path_examination}") as conn:
            cur = conn.cursor()
            cur.execute(f"SELECT date_time, examination_key "
                        f"FROM examination "
                        f"WHERE patient_info LIKE "
                        f"'{patient.get('name').strip()}__{patient.get('birth_date').strip()}' "
                        f"AND status NOT LIKE 'deleted' "
                        f"AND add_info LIKE 'certificate'")
            found_info['select_past_examination'] = cur.fetchall()
        return found_info

    elif command.startswith('examination'):
        try:
            path = f".{os.sep}data_base{os.sep}"
            if user['app_data'].get('path_examination_data_base'):
                path = user['app_data'].get('path_examination_data_base')
            path_examination = f"{path}data_base.db"

            if command == 'examination__delete':
                with sq.connect(f"{path_examination}") as connect:
                    cursor = connect.cursor()
                    cursor.execute(f"UPDATE examination SET status = 'deleted' WHERE rowid LIKE '{insert_data}'")

                    # cursor.execute(f"DELETE FROM examination WHERE rowid LIKE '{insert_data}'")

            elif command == 'examination__upload_last_data':
                found_info = {
                    'select_past_examination': None,
                    'get_last_doc_LN': None}

                with sq.connect(f"{path_examination}") as conn:
                    cur = conn.cursor()

                    cur.execute(f"SELECT rowid, date_time, doctor_name, status, LN_type, patient_info, "
                                f"examination_text, examination_key "
                                f"FROM examination "
                                f"WHERE patient_info LIKE "
                                f"'{patient.get('name')}%{patient.get('birth_date')}' "
                                f"AND status NOT LIKE 'deleted'")

                    found_info['select_past_examination'] = cur.fetchall()

                    cur.execute(f"SELECT LN_type FROM examination "
                                f"WHERE doctor_name LIKE '{user.get('doctor_name')}'")
                    found_info['get_last_doc_LN'] = cur.fetchall()

                return found_info

            elif command == 'examination__save':
                with sq.connect(f"{path_examination}") as conn:
                    cur = conn.cursor()
                    cur.execute("INSERT INTO examination VALUES(?, ?, ?, ?, ?, ?, ?, ?)", insert_data)

            elif command == 'examination__delete_my_diagnosis':
                try:
                    with sq.connect(f"{user['app_data'].get('path_srv_data_base')}application_data_base.db") as connect:
                        cursor = connect.cursor()
                        cursor.execute(f"DELETE FROM my_saved_diagnosis WHERE doctor_name LIKE "
                                       f"'{user.get('doctor_name')}' AND diagnosis LIKE '{delete_data}'")
                except Exception:
                    pass

                with sq.connect(f"{path}data_base.db") as connect:
                    cursor = connect.cursor()
                    cursor.execute(f"DELETE FROM my_saved_diagnosis WHERE doctor_name LIKE "
                                   f"'{user.get('doctor_name')}' AND diagnosis LIKE '{delete_data}'")
                for diagnosis_data in user.get('my_saved_diagnosis'):
                    if diagnosis_data[0] == delete_data:
                        user['my_saved_diagnosis'].remove(diagnosis_data)

            elif command == 'examination__edit_doctor_LN':
                try:
                    with sq.connect(f"{user['app_data'].get('path_srv_data_base')}application_data_base.db") as connect:
                        cursor = connect.cursor()
                        cursor.execute(f"DELETE FROM my_LN "
                                       f"WHERE doctor_name LIKE '{user.get('doctor_name')}' "
                                       f"AND ln_type LIKE '{insert_data[0]}'")

                        cursor.execute("INSERT INTO my_LN VALUES(?, ?, ?)",
                                       [user.get('doctor_name'), insert_data[0], insert_data[1]])
                except Exception:
                    pass

                with sq.connect(f"{path}data_base.db") as connect:
                    cursor = connect.cursor()
                    cursor.execute(f"DELETE FROM my_LN "
                                   f"WHERE doctor_name LIKE '{user.get('doctor_name')}' "
                                   f"AND ln_type LIKE '{insert_data[0]}'")

                    cursor.execute("INSERT INTO my_LN VALUES(?, ?, ?)",
                                   [user.get('doctor_name'), insert_data[0], insert_data[1]])
                if not user.get('my_LN'):
                    user['my_LN'] = list()
                for i in user.get('my_LN'):
                    if insert_data[0] == i[0]:
                        user['my_LN'].remove(i)
                user['my_LN'].append(insert_data)

            elif command == 'examination__edit_examination_loc':
                load_info_text = app_info.get('load_info_text')

                local_data = {
                    'examination_loc': list(),
                    'examination_srv': list(),
                    'found_data_statistic': list(),
                    'sorted_examination_loc': {
                        'deleted': set(),
                        'srv': set(),
                        'loc': set(),
                        'loc_list': list()},
                    'sorted_examination_srv': list(),
                    'loc': f"{path}data_base.db",
                    'srv': f"{user['app_data'].get('path_srv_data_base')}examination_data_base.db"
                }
                load_info_text.set("Извлечение локальных осмотров... ")

                with sq.connect(database=f"{local_data.get('loc')}") as conn:
                    cur = conn.cursor()
                    cur.execute(f"SELECT date_time, doctor_name, status, LN_type, patient_info, "
                                    f"examination_text, examination_key, add_info "
                                    f"FROM examination")
                    local_data[f"examination_loc"] = cur.fetchall()

                load_info_text.set("Синхронизация...")

                for examination in local_data.get("examination_loc"):
                    (date_time, doctor_name, status, LN_type,
                     patient_info, examination_text,
                     examination_key, add_info) = examination
                    if len(date_time.split(':')) == 2:
                        date_time += ":00"

                    if status in ('loc', 'srv', 'deleted'):
                        local_data["sorted_examination_loc"][status].add(
                            f"{date_time}___{doctor_name}___{patient_info}")
                        if status == 'loc':
                            local_data["sorted_examination_loc"][f"{status}_list"].append(
                                (date_time, doctor_name, 'srv', LN_type,
                                 patient_info, examination_text,
                                 examination_key, add_info))


                load_info_text.set("Изменение локальной БД")

                for path_mark in ('srv', 'loc'):
                    try:
                        with sq.connect(database=f"{local_data.get(path_mark)}") as conn:
                            cur = conn.cursor()

                            if path_mark == 'srv':
                                load_info_text.set("Ожидание ответа сервера... ")


                                if 'examination_db_place:____srv' in user.get('add_info'):
                                    cur.execute(f"SELECT date_time, doctor_name, status, LN_type, patient_info, "
                                                f"examination_text, examination_key, add_info "
                                                f"FROM examination")
                                    local_data[f"examination_{path_mark}"] = cur.fetchall()

                                cur.executemany("INSERT INTO examination VALUES(?, ?, ?, ?, ?, ?, ?, ?)",
                                                local_data["sorted_examination_loc"].get(f"loc_list"))

                                for examination in local_data["sorted_examination_loc"].get(f"deleted"):
                                    date_time, doctor_name, patient_info = examination.split('___')
                                    cur.execute(f"DELETE from examination "
                                                    f"WHERE date_time LIKE '{date_time}' "
                                                    f"AND doctor_name LIKE '{doctor_name}' "
                                                    f"AND patient_info LIKE '{patient_info}' ")
                                load_info_text.set("ОК")

                            elif path_mark == 'loc':
                                load_info_text.set("Локальные... ")


                                cur.execute("DELETE from examination WHERE status LIKE 'deleted'")
                                cur.execute(f"UPDATE examination SET status = 'srv'")
                                load_info_text.set("ОК")



                    except Exception as ex:
                        return f"Exception edit_local_db\n{ex}"

                load_info_text.set("Запись на сервер... ")


                if 'examination_db_place:____srv' in user.get('add_info'):
                    for examination in local_data.get("examination_srv"):
                        (date_time, doctor_name, status, LN_type,
                         patient_info, examination_text,
                         examination_key, add_info) = examination
                        if len(date_time.split(':')) == 2:
                            date_time += ":00"

                        key = f"{date_time}___{doctor_name}___{patient_info}"


                        if not (key in local_data["sorted_examination_loc"].get('srv') or
                                key in local_data["sorted_examination_loc"].get('deleted')):

                            local_data['sorted_examination_srv'].append(
                                (date_time, doctor_name, 'srv', LN_type,
                                 patient_info, examination_text,
                                 examination_key, add_info))

                    if local_data.get('sorted_examination_srv'):
                        with sq.connect(database=f"{local_data.get('loc')}") as conn:
                            cur = conn.cursor()
                            cur.executemany("INSERT INTO examination VALUES(?, ?, ?, ?, ?, ?, ?, ?)",
                                            local_data.get(f"sorted_examination_srv"))

                load_info_text.set("Запись статистики... ")


                with sq.connect(f".{os.sep}data_base{os.sep}data_base.db") as conn:
                    cur = conn.cursor()
                    cur.execute(f"SELECT * FROM statistic_DOC_db")
                    found_data_statistic = cur.fetchall()


                if found_data_statistic:

                    try:
                        with sq.connect(f"{user['app_data'].get('path_srv_data_base')}data_base.db") as conn:
                            cur = conn.cursor()
                            cur.executemany("INSERT INTO statistic_DOC_db VALUES(?, ?, ?, ?, ?)",
                                            found_data_statistic)


                    except Exception as ex:

                        return f"Exception edit_local_db\n{ex}"
                    else:
                        with sq.connect(f".{os.sep}data_base{os.sep}data_base.db") as conn:
                            cur = conn.cursor()
                            cur.execute(f"DELETE FROM statistic_DOC_db")

                load_info_text.set("ОК")

                answer = f"Данные синхронизированы!\n\n" \
                         f"Выгружено осмотров на сервер: {len(local_data['sorted_examination_loc'].get('loc'))}\n" \
                         f"Удалено осмотров: {len(local_data['sorted_examination_loc'].get('deleted'))}\n" \
                         f"Всего осмотров в базе данных: " \
                         f"{len(local_data['sorted_examination_loc'].get('loc')) + len(local_data['sorted_examination_loc'].get('srv'))}\n" \
                         f"Загружено осмотров: {len(local_data.get('sorted_examination_srv'))}\n" \
                         f"Обновлено статистики: {len(found_data_statistic)}\n" \
                         f"Данные синхронизированы"

                load_info_text.set(answer)
                time.sleep(5)
                load_info_text.set('')




            # else:
            #
            #     if command == 'examination__delete':
            #         with sq.connect(f"{user['app_data'].get('path_srv_data_base')}examination_data_base.db") as connect:
            #             cursor = connect.cursor()
            #             cursor.execute(f"DELETE FROM examination WHERE rowid LIKE '{insert_data}'")
            #
                # elif command == 'examination__select_past_examination':
                #     try:
                #         with sq.connect(
                #                 database=f"{user['app_data'].get('path_srv_data_base')}examination_data_base.db",
                #                 timeout=10.0) as conn:
                #             cur = conn.cursor()
                #
                #             cur.execute(f"SELECT rowid, date_time, doctor_name, LN_type, patient_info, "
                #                         f"examination_text, examination_key "
                #                         f"FROM examination "
                #                         f"WHERE patient_info LIKE "
                #                         f"'{patient.get('name')}%{patient.get('birth_date')}'")
                #
                #             return 'srv', cur.fetchall()
                #     except Exception:
                #         with sq.connect(f".{os.sep}data_base{os.sep}data_base.db") as conn:
                #             cur = conn.cursor()
                #
                #             cur.execute(f"SELECT rowid, date_time, doctor_name, LN_type, patient_info, "
                #                         f"examination_text, examination_key "
                #                         f"FROM examination "
                #                         f"WHERE patient_info LIKE "
                #                         f"'{patient.get('name')}%{patient.get('birth_date')}'")
                #
                #             return 'loc', cur.fetchall()

            #     elif command == 'examination__save':
            #         with sq.connect(f"{user['app_data'].get('path_srv_data_base')}examination_data_base.db") as conn:
            #             cur = conn.cursor()
            #             cur.execute("INSERT INTO examination VALUES(?, ?, ?, ?, ?, ?, ?, ?)", insert_data)
            #
            #     elif command == 'examination__delete_my_diagnosis':
            #         with sq.connect(f"{user['app_data'].get('path_srv_data_base')}application_data_base.db") as connect:
            #             cursor = connect.cursor()
            #             cursor.execute(f"DELETE FROM my_saved_diagnosis WHERE doctor_name LIKE "
            #                            f"'{user.get('doctor_name')}' AND diagnosis LIKE '{delete_data}'")
            #
            #
            #     elif command == 'examination__get_last_patient_ln':
            #         answer = dict()
            #         with sq.connect(f"{user['app_data'].get('path_srv_data_base')}examination_data_base.db") as conn:
            #             cur = conn.cursor()
            #             for type_ln in ("Справка ВН", "Лист ВН"):
            #                 cur.execute(f"SELECT date_time, LN_type FROM examination "
            #                             f"WHERE doctor_name LIKE '{user.get('doctor_name')}' "
            #                             f"AND patient_info LIKE "
            #                             f"'{patient.get('name')}%{patient.get('birth_date')}' "
            #                             f"AND LN_type LIKE '{type_ln}%'")
            #
            #                 answer[type_ln] = cur.fetchall()
            #         return answer
            #
            #     elif command == 'examination__edit_doctor_LN':
            #         with sq.connect(f"{user['app_data'].get('path_srv_data_base')}application_data_base.db") as connect:
            #             cursor = connect.cursor()
            #             cursor.execute(f"DELETE FROM my_LN "
            #                            f"WHERE doctor_name LIKE '{user.get('doctor_name')}' "
            #                            f"AND ln_type LIKE '{insert_data[0]}'")
            #
            #             cursor.execute("INSERT INTO my_LN VALUES(?, ?, ?)",
            #                            [user.get('doctor_name'), insert_data[0], insert_data[1]])
            #
            #             if not user.get('my_LN'):
            #                 user['my_LN'] = list()
            #             for i in user.get('my_LN'):
            #                 if insert_data[0] == i[0]:
            #                     user['my_LN'].remove(i)
            #             user['my_LN'].append(insert_data)
            #
            #
            #
            #
            #     elif command == 'examination__get_last_doc_LN':
            #         with sq.connect(f"{user['app_data'].get('path_srv_data_base')}examination_data_base.db") as conn:
            #             cur = conn.cursor()
            #             cur.execute(f"SELECT LN_type FROM examination "
            #                         f"WHERE doctor_name LIKE '{user.get('doctor_name')}' "
            #                         f"AND LN_type LIKE '{insert_data}%'")
            #             found_info_past = cur.fetchall()
            #         return found_info_past
            #
            #     elif command == 'examination__get_last_anthro_data':
            #         with sq.connect(f"{user['app_data'].get('path_srv_data_base')}examination_data_base.db") as conn:
            #             cur = conn.cursor()
            #
            #             cur.execute(f"SELECT date_time, examination_key FROM examination "
            #                         f"WHERE examination_key LIKE "
            #                         f"'{insert_data}' "
            #                         f"AND patient_info LIKE "
            #                         f"'{patient.get('name')}%{patient.get('birth_date')}'")
            #
            #             found_info = cur.fetchall()
            #         return found_info


        except Exception as ex:
            return False, ex
        else:
            return True, True

    elif command == 'last_examination':

        path = f".{os.sep}data_base{os.sep}"
        if user['app_data'].get('path_examination_data_base'):
            path = user['app_data'].get('path_examination_data_base')
        path_examination = f"{path}data_base.db"

        found_info = dict()

        with sq.connect(f"{path_examination}") as conn:
            cur = conn.cursor()

            for date in insert_data:
                cur.execute(f"SELECT date_time, status, patient_info, "
                            f"examination_text, examination_key "
                            f"FROM examination "
                            f"WHERE status NOT LIKE 'deleted' "
                            f"AND date_time LIKE '{date}%'"
                            f"AND doctor_name LIKE '{user.get('doctor_name')}'")
                found_info[date] = cur.fetchall()

        return found_info


def updating_patient_data_base():
    try:
        shutil.copy2(f"{user['app_data'].get('path_srv_data_base')}patient_data_base.db", f".{os.sep}data_base{os.sep}patient_data_base.db")
    except Exception as ex:
        messagebox.showinfo('Ошибка', f'Ошибка обновления базы данных!\n{ex}\nLOGGING FAILED')
        # messagebox.showinfo('Ошибка', f'Ошибка обновления базы данных!\n{ex}\nПопытка логирования')
        # try:
        #     import subprocess
        #     subprocess.call(r'cmd /c "net use n: \\192.168.19.1\database /Иван/profkiller97"')
        #     shutil.copy2(f"{user['app_data'].get('path_srv_data_base')}patient_data_base.db", f".{os.sep}data_base{os.sep}patient_data_base.db")
        #
        # except Exception as ex:
        #     messagebox.showinfo('Ошибка', f'Ошибка обновления базы данных!\n{ex}\nLOGGING FAILED')
        # else:
        #     messagebox.showinfo('Успех!', 'База данных обновлена\nлогирование успешно')
    else:
        messagebox.showinfo('Успех!', 'База данных обновлена')


def get_age(birth_date):
    birthday = ''
    for i in birth_date:
        if i.isdigit():
            birthday += i
        else:
            birthday += '.'
    birthday = birthday.split('.')
    date_form = "%d.%m.%Y"
    if len(birthday[-1]) == 2:
        date_form = "%d.%m.%y"

    birthday = datetime.strptime('.'.join(birthday), date_form)

    today = datetime.today()
    age = today.year - birthday.year
    if (today.month < birthday.month) or (today.month == birthday.month and today.day < birthday.day):
        age -= 1
    return age


def get_age_d_m_y(birth_date):
    patient_age = {
        "day": 0,
        "month": 0,
        "year": 0}

    birthday = ''
    for i in birth_date:
        if i.isdigit():
            birthday += i
        else:
            birthday += '.'
    birthday = birthday.split('.')
    date_form = "%d.%m.%Y"
    if len(birthday[-1]) == 2:
        date_form = "%d.%m.%y"

    birthday = datetime.strptime('.'.join(birthday), date_form)

    today = datetime.today()
    age = today.year - birthday.year
    if (today.month < birthday.month) or (today.month == birthday.month and today.day < birthday.day):
        age -= 1
    patient_age["year"] = age

    if today.month >= birthday.month:
        age = today.month - birthday.month
    else:
        age = 12 - birthday.month + today.month

    if today.day < birthday.day:
        age -= 1
    if age == 12:
        age = 0
    if age == -1:
        age = 11
    patient_age["month"] = age

    if today.day >= birthday.day:
        age = today.day - birthday.day
    else:
        new = datetime(today.year, today.month, 1) - timedelta(days=1)
        if birthday.day > new.day:
            birthday = new
        age = (today - datetime(new.year, new.month, birthday.day)).days

    patient_age["day"] = age

    age_txt = f""
    if patient_age.get('year') in (2, 3, 4):
        age_txt += f" {patient_age.get('year')} года"
    elif patient_age.get('year') == 1:
        age_txt += f" {patient_age.get('year')} год"
    elif patient_age.get('year') > 1:
        age_txt += f" {patient_age.get('year')} лет"

    age_txt += f" {patient_age.get('month')} мес. "
    if patient_age.get('year') == 0:
        age_txt += f"{patient_age.get('day')} д."
    patient_age['age_txt'] = age_txt
    return patient_age


def patient_anthro(marker_age_y='после года', marker_age=None, height=None, weight=None):
    if not marker_age:
        age = get_age_d_m_y(patient.get('birth_date'))
        if marker_age_y == 'после года':
            marker_age = age.get('year')
            if marker_age > 17:
                marker_age = 17
        else:
            marker_age = age.get('month')
            if age.get('year') > 0:
                marker_age = 12

    marker_gender = 'женский'
    if patient.get('gender').lower().startswith('м'):
        marker_gender = 'мужской'

    anthro_height = anthropometry[marker_age_y][marker_gender]['height'].get(marker_age)
    anthro_weight = anthropometry[marker_age_y][marker_gender]['weight'].get(marker_age)


    patient_physical_anthro = ""

    if height and weight:
        if anthro_height and anthro_weight:

            index_height, index_weight = 7, 7

            for a_height in anthro_height:
                if height < a_height:
                    index_height = anthro_height.index(a_height)
                    break

            for a_weight in anthro_weight:
                if weight <= a_weight:
                    index_weight = anthro_weight.index(a_weight)
                    break

            if index_height == 0:
                anthro = 'Низкое '
            elif index_height <= 2:
                anthro = 'Ниже среднего '
            elif index_height <= 4:
                anthro = 'Среднее '
            elif index_height <= 6:
                anthro = 'Выше среднего '
            elif index_height == 7:
                anthro = 'Высокое '

            if abs(index_weight - index_height) <= 1:
                anthro += 'гармоничное'
            else:
                if abs(index_weight - index_height) < 3:
                    anthro += 'дисгармоничное'
                else:
                    anthro += 'резко дисгармоничное'

                if not 2 < index_height < 5 and not 2 < index_weight < 5:
                    anthro += ' по росту и по весу'
                elif not 2 < index_height < 5:
                    anthro += ' по росту'
                elif not 2 < index_weight < 5:
                    anthro += ' по весу'

            patient_physical_anthro = anthro

    if weight:
        if anthro_weight:
            index_weight = 7
            for a_weight in anthro_weight:
                if weight <= a_weight:
                    index_weight = anthro_weight.index(a_weight)
                    break

            if index_weight == 0:
                anthro = f'Вес резко ниже нормы ({anthro_weight[0]} - {anthro_weight[-1]})'
            elif index_weight <= 2:
                anthro = 'Вес ниже среднего '
            elif index_weight <= 4:
                anthro = 'Вес в норме '
            elif index_weight <= 6:
                anthro = 'Вес выше среднего '
            elif index_weight == 7:
                anthro = f'Вес резко выше нормы ({anthro_weight[0]} - {anthro_weight[-1]})'

            patient_physical_anthro = f"{anthro} -- {patient_physical_anthro}"

    if height:
        if anthro_height:
            index_height = 7
            for a_height in anthro_height:
                if height < a_height:
                    index_height = anthro_height.index(a_height)
                    break

            if index_height == 0:
                anthro = f'Рост резко ниже нормы ({anthro_height[0]} - {anthro_height[-1]})'
            elif index_height <= 2:
                anthro = 'Рост ниже среднего '
            elif index_height <= 4:
                anthro = 'Рост в норме '
            elif index_height <= 6:
                anthro = 'Рост выше среднего '
            elif index_height == 7:
                anthro = f'Рост резко выше нормы ({anthro_height[0]} - {anthro_height[-1]})'

            patient_physical_anthro = f"{anthro} -- {patient_physical_anthro}"

    if not patient_physical_anthro:
        patient_physical_anthro = "Физическое развитие: нет данных"
    return patient_physical_anthro


def fast_certificate():

    def start_action(func=None):
        def check_thread(thread):
            if thread.is_alive():
                animation.set(animation.get()[-1] + animation.get()[:-1])
                # root.update()
                certificate_main_root.after(200, lambda: check_thread(thread))
            else:
                animation.set("")

        def run_action():
            if func:
                func()
            else:
                time.sleep(5)

        animation.set("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░")
        thread = threading.Thread(target=run_action)
        thread.start()
        check_thread(thread)

    if not patient.get('name'):
        messagebox.showinfo('Ошибка', "Не выбран пациент!")
    else:
        data['certificate'] = {
            'main_label': StringVar(),
            'all_roots': dict(),
            'type_cert_frames': dict(),
            'type_cert_info': dict(),
        }

        age = patient.get('age')

        certificate_main_root = Toplevel()
        certificate_main_root.bind("<Control-KeyPress>", keypress)
        certificate_main_root.config(bg='white')
        certificate_main_root.title(f'Cоздание справки')


        selected_button = StringVar()

        data['certificate']['main_label'].set(f"Данные пациента:    "
                                               f"Участок: {patient.get('patient_district')};    "
                                               f"№ амб: {patient.get('amb_cart')};    "
                                              f"Возраст: {patient['age'].get('age_txt')};\n"
                                               f"ФИО: {patient.get('name')};    "
                                               f"{patient.get('birth_date')};    "
                                               f"пол: {patient.get('gender')};\n"
                                               f"Адрес: {patient.get('address')};")

        Label(master=certificate_main_root,
              textvariable=data['certificate'].get('main_label'),
              font=('Comic Sans MS', user.get('text_size')),
              bg="#36566d",
              fg='white',
              padx=4, pady=4
              ).pack(fill='both', expand=True)
        animation = StringVar()

        Label(master=certificate_main_root,
              textvariable=animation,
              bg="#36566d",
              fg='white',
              ).pack(fill='both', expand=True)


        selected_place = StringVar()
        label_place_text = StringVar()
        label_place_text.set("Место требования справки: ")

        selected_button = StringVar()
        hobby_txt = StringVar()
        new_hobby_txt = StringVar()
        job_txt = StringVar()
        selected_diagnosis_ori = StringVar()

        ori_from = StringVar()
        ori_until = StringVar()
        ori_home_regime = StringVar()
        ori_add_to_childhood = StringVar()
        ori_fizra_days = StringVar()

        selected_chickenpox = StringVar()
        selected_allergy = StringVar()
        allergy_txt = StringVar()
        selected_injury_operation = StringVar()
        injury_operation_txt = StringVar()

        height = StringVar()
        weight = StringVar()
        vision = StringVar()

        patient_anthropometry = StringVar()

        selected_health_group = StringVar()
        selected_fiz_group = StringVar()
        selected_diet = StringVar()

        patient_temp = StringVar()
        patient_br = StringVar()
        patient_hr = StringVar()
        patient_bp = StringVar()

        posture = StringVar()
        dispanser_card = StringVar()
        dispanser_card.set('Да')
        examination_blank = StringVar()
        examination_blank.set("Да")



        date_of_issue = StringVar()
        date_of_issue.set(datetime.now().strftime('%d.%m.%Y'))

        regime_vars = dict()
        for mark in all_data_certificate.get('health').get('regime'):
            regime_vars[mark] = IntVar()
        desk_vars = dict()
        for mark in all_data_certificate.get('health').get('desk'):
            desk_vars[mark] = IntVar()


        def pack_frame_type_cert():
            def select_type_cert():
                if data['certificate']['type_cert_frames'].get('selected_cert'):
                    data['certificate']['type_cert_frames']['selected_cert'].pack_forget()

                canvas = data['certificate'].get('canvas')
                type_cert_frame = data['certificate']['type_cert_frames'].get(selected_button.get())
                data['certificate']['type_cert_frames']['selected_cert'] = type_cert_frame
                scrolled_frame = data['certificate'].get('scrolled_frame')

                certificate_main_root.update_idletasks()
                type_cert_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)

                scrolled_frame.configure(height=type_cert_frame.winfo_height())
                region = canvas.bbox(tk.ALL)
                canvas.configure(scrollregion=region)
                canvas.create_window((0, 0), window=scrolled_frame, anchor="nw",
                                     width=canvas.winfo_width())
                canvas.yview_moveto(0)
                certificate_main_root.update()

            frame_type_cert = Frame(certificate_main_root)
            Label(master=certificate_main_root,
                  text="Тип справки:",
                  font=('Comic Sans MS', user.get('text_size')),
                  ).pack(fill='both', expand=True)
            frame_type_cert_but = Frame(frame_type_cert)
            all_type_cert = [[]]
            for type_cert in all_data_certificate.get('type'):
                if len(all_type_cert[-1]) == 4:
                    all_type_cert.append(list())
                all_type_cert[-1].append(type_cert)
            for type_cert_data in all_type_cert:
                frame = Frame(frame_type_cert_but)
                for type_cert in type_cert_data:
                    Radiobutton(master=frame,
                                text=type_cert,
                                font=('Comic Sans MS', user.get('text_size')),
                                value=type_cert,
                                variable=selected_button,
                                command=select_type_cert,
                                indicatoron=False, bg='#f0fffe', selectcolor='#77f1ff'
                                ).pack(fill='both', expand=True, padx=1, pady=1, side='left')
                frame.pack(fill='both', expand=True)
            # frame_type_cert_but.columnconfigure(index='all', minsize=40, weight=1)
            # frame_type_cert_but.rowconfigure(index='all', minsize=20)
            data['certificate']['frame_type_cert_but'] = frame_type_cert_but
            # frame_type_cert_but.pack(fill='both', expand=True, padx=2, pady=2)
            frame_type_cert.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)

        pack_frame_type_cert()

        def pack_scrolled_frame():
            def resize(event=None):
                region = canvas.bbox(tk.ALL)
                canvas.configure(scrollregion=region)

            def on_binds(event):
                canvas.idbind = canvas.bind_all("<MouseWheel>", on_mousewheel)

            def off_binds(event=None):
                canvas.unbind_all("<MouseWheel>")

            def on_mousewheel(event):
                region = canvas.bbox(tk.ALL)
                canvas.configure(scrollregion=region)
                if os.name == 'posix':
                    canvas.yview_scroll(int(-1 * event.delta), "units")
                else:
                    canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

            certificate_main_root.update_idletasks()
            height = (certificate_main_root.winfo_screenheight() - certificate_main_root.winfo_height() - 200)
            width = certificate_main_root.winfo_screenheight()
            if certificate_main_root.winfo_screenwidth() < width:
                width = certificate_main_root.winfo_screenwidth()

            # print(f"height - {certificate_main_root.winfo_screenheight()}\n"
            #       f"width - {width}\n"
            #       f"{certificate_main_root.winfo_screenwidth()}")

            master_frame = Frame(certificate_main_root)
            master_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)

            scroll_x = tk.Scrollbar(master_frame, orient=tk.HORIZONTAL)
            scroll_y = tk.Scrollbar(master_frame, orient=tk.VERTICAL, width=user.get('text_size', 10) * 2)

            canvas = tk.Canvas(master_frame,
                               xscrollcommand=scroll_x.set,
                               yscrollcommand=scroll_y.set, height=height, width=width)
            scroll_x.config(command=canvas.xview)
            scroll_y.config(command=canvas.yview)

            canvas_frame = Frame(canvas)
            data['certificate']['scrolled_frame'] = canvas_frame
            data['certificate']['canvas'] = canvas
            data['certificate']['scroll_x'] = scroll_x


            # canvas['width'] = int(canvas.winfo_geometry().split('x')[0])
            # canvas_frame['width'] = int(canvas.winfo_geometry().split('x')[0])
            canvas.grid(row=0, column=0, sticky="nsew")
            scroll_x.grid(row=1, column=0, sticky="we")
            scroll_y.grid(row=0, column=1, sticky="ns")

            master_frame.rowconfigure(0, weight=1)
            master_frame.columnconfigure(0, weight=1)

            master_frame.bind("<Configure>", resize)
            master_frame.update_idletasks()
            canvas_frame['height'] = height
            canvas_frame['height'] = canvas.winfo_width()

            canvas.bind("<Enter>", on_binds)
            canvas.bind("<Leave>", off_binds)
            certificate_main_root.update_idletasks()

            # canvas.create_window((0, 0), window=canvas_frame, anchor="nw",
            #                      width=canvas.winfo_width())

        pack_scrolled_frame()

        def create_type_cert_frames():
            canvas_frame = data['certificate']['scrolled_frame']

            sanatorium_profile = dict()

            def create_certificate():
                def certificate__create_doc():

                    if not (type_certificate == "Оформление в ДДУ / СШ / ВУЗ"
                            and place_of_requirement in ('ВУЗ (колледж)', 'Кадетское училище')):
                        doctor_name, district, pediatric_division = (user.get('doctor_name'),
                                                                     user.get('doctor_district'),
                                                                     user.get('ped_div'))

                        active_examination = f"Выдана справка: {type_certificate}\n" \
                                             f"Цель выдачи справки: {render_data.get('place_of_requirement')}\n" \
                                             f"Перенесенные заболевания: {render_data.get('past_illnesses')}\n" \
                                             f"Дополнительные медицинские сведения: " \
                                             f"{render_data.get('additional_medical_information')}\n" \
                                             f"Заключение: {render_data.get('diagnosis')}\n" \
                                             f"Рекомендации: {render_data.get('recommendation')}"

                        if type_certificate in ('ЦКРОиР', 'Бесплатное питание'):
                            type_cert = '7.9 (выписка)'
                        else:
                            type_cert = '7.6 (справка)'
                        info = [pediatric_division,
                                district,
                                None,
                                datetime.now().strftime("%d.%m.%Y -- %H:%M:%S"),
                                render_data.get('name'),
                                render_data.get('birth_date'),
                                render_data.get('address'),
                                type_cert,
                                doctor_name,
                                active_examination]

                        number = data_base(command='save_certificate_single_window',
                                           insert_data=info)

                        render_data['number_cert'] = f"№ {number}"
                    else:
                        render_data['number_cert'] = '№ ______'


                    if (type_certificate == "Оформление в ДДУ / СШ / ВУЗ"
                        and place_of_requirement in ("Средняя школа (гимназия)", "Кадетское училище")) \
                            or type_certificate == 'Об усыновлении (удочерении)':
                        doc_name = ""
                        if type_certificate == 'Оформление в ДДУ / СШ / ВУЗ':
                            doc_name = f".{os.sep}generated{os.sep}{patient.get('name').split()[0]}_справка_Оформление.docx"
                            if not render_data.get('number_cert'):
                                render_data['number_cert'] = '№ ______'
                        elif type_certificate == 'Об усыновлении (удочерении)':
                            doc_name = f".{os.sep}generated{os.sep}{patient.get('name').split()[0]}_справка_Об_усыновлении.docx"


                        render_data['manager'] = user.get('manager', '______________________')

                        doc = DocxTemplate(f".{os.sep}example{os.sep}certificate{os.sep}справка а4 годовая.docx")
                        doc.render(render_data)
                        doc_name = save_document(doc=doc, doc_name=doc_name)

                        file_name_vac = create_vaccination(user_id=patient.get('amb_cart'), size=4)
                        if file_name_vac:
                            master = Document(doc_name)
                            master.add_page_break()
                            composer = Composer(master)
                            doc_temp = Document(file_name_vac)
                            composer.append(doc_temp)
                            doc_name = save_document(doc=composer, doc_name=doc_name)

                            # composer.save(doc_name)

                        run_document(doc_name)

                        doc = DocxTemplate(f".{os.sep}example{os.sep}certificate{os.sep}осмотр.docx")
                        doc.render(render_data)
                        doc_name_exam = f".{os.sep}generated{os.sep}{patient.get('name').split()[0]}_осмотр.docx"
                        doc_name_exam = save_document(doc=doc, doc_name=doc_name_exam)
                        run_document(doc_name_exam)

                    else:
                        if type_certificate in ('ЦКРОиР', 'Бесплатное питание'):
                            doc = DocxTemplate(f".{os.sep}example{os.sep}certificate{os.sep}Выписка.docx")
                            render_data['manager'] = '______________________'
                            if type_certificate == 'Бесплатное питание':
                                render_data['manager'] = user.get('manager', '______________________')

                            doc.render(render_data)
                            doc_name = f".{os.sep}generated{os.sep}{patient.get('name').split()[0]}_" \
                                       f"Выписка_{type_certificate}.docx".replace(' ', '_')
                            doc_name = save_document(doc=doc, doc_name=doc_name)

                        elif type_certificate in ('Годовой медосмотр', 'В детский лагерь', "Оформление в ДДУ / СШ / ВУЗ"):
                            render_data['manager'] = '______________________'
                            if type_certificate.startswith('Оформление в ДДУ / СШ / ВУЗ'):
                                render_data['manager'] = user.get('manager', '______________________')

                            doc_name = f".{os.sep}generated{os.sep}{patient.get('name').split()[0]}_" \
                                       f"справка_{type_certificate}.docx".replace(' в ДДУ / СШ / ВУЗ', '').replace(' ', '_')

                            if type_certificate == "Оформление в ДДУ / СШ / ВУЗ" \
                                    and data['certificate'].get('place_of_requirement') == 'ВУЗ (колледж)':
                                master = Document(f".{os.sep}example{os.sep}certificate{os.sep}справка а5_вуз.docx")
                            else:
                                master = Document(f".{os.sep}example{os.sep}certificate{os.sep}справка а5.docx")

                            master.add_page_break()
                            composer = Composer(master)

                            if type_certificate in ('В детский лагерь', "Оформление в ДДУ / СШ / ВУЗ"):
                                file_name_vac = create_vaccination(user_id=patient.get('amb_cart'), size=5)
                                if file_name_vac:
                                    doc_temp = Document(file_name_vac)
                                    composer.append(doc_temp)
                                    master.add_page_break()

                            master.add_section()
                            master.sections[-1].orientation = WD_ORIENT.LANDSCAPE
                            master.sections[-1].page_width = master.sections[0].page_height
                            master.sections[-1].page_height = master.sections[0].page_width
                            doc_temp = Document(f".{os.sep}example{os.sep}certificate{os.sep}осмотр.docx")
                            composer.append(doc_temp)

                            if type_certificate == 'Годовой медосмотр' and dispanser_card.get() == 'Да':
                                render_data['year'] = datetime.now().strftime("%Y")
                                render_data['date'] = datetime.now().strftime("%d.%m")

                                render_data['disp_visus'] = f"{render_data.get('date')} - {vision.get()}"
                                render_data['disp_posture'] = f"{render_data.get('date')} - {posture.get()}"
                                diagnosis_txt = data['certificate']['type_cert_info'][type_certificate].get(
                                    'diagnosis_txt').get(1.0, 'end').strip() + \
                                                f"\nФизическое развитие: " \
                                                f"{patient_anthropometry.get().split('--')[-1].strip()}"
                                render_data['disp_diagnosis'] = diagnosis_txt
                                render_data['disp_health'] = selected_health_group.get()
                                render_data['disp_group'] = selected_fiz_group.get()


                                doc_temp = Document(f".{os.sep}example{os.sep}certificate{os.sep}диспансеризация.docx")
                                master.add_page_break()
                                composer.append(doc_temp)

                            doc_name = save_document(doc=composer, doc_name=doc_name)



                            doc = DocxTemplate(doc_name)
                            doc.render(render_data)

                            doc_name = save_document(doc=doc, doc_name=doc_name)

                        else:
                            render_data['manager'] = '______________________'
                            if type_certificate == 'О нуждаемости в сан-кур лечении':
                                render_data['manager'] = user.get('manager', '______________________')

                            doc = DocxTemplate(f".{os.sep}example{os.sep}certificate{os.sep}справка а5.docx")
                            doc.render(render_data)
                            doc_name = f".{os.sep}generated{os.sep}{patient.get('name').split()[0]} " \
                                       f"справка {type_certificate}.docx".replace(' ', '_')
                            doc_name = save_document(doc=doc, doc_name=doc_name)


                            if (type_certificate in ('В детский лагерь', 'Может работать по специальности...')
                                    or(type_certificate == 'Об отсутствии контактов'
                                       and data['certificate'].get('place_of_requirement') == 'В стационар')):
                                file_name_vac = create_vaccination(user_id=patient.get('amb_cart'), size=5)
                                if file_name_vac:
                                    master = Document(doc_name)
                                    master.add_page_break()
                                    composer = Composer(master)
                                    doc_temp = Document(file_name_vac)
                                    composer.append(doc_temp)
                                    doc_name = save_document(doc=composer, doc_name=doc_name)

                                    # composer.save(doc_name)

                        run_document(doc_name)
                        if type_certificate in ("На кружки и секции", "ЦКРОиР", "Об отсутствии контактов",
                                                "О нуждаемости в сан-кур лечении", "Может работать по специальности...",
                                                "Бесплатное питание") and examination_blank.get() == 'Да':
                            diagnosis_txt = ''
                            if type_certificate in ('На кружки и секции', 'О нуждаемости в сан-кур лечении',
                                                    'Может работать по специальности...'):
                                diagnosis_txt = data['certificate']['type_cert_info'][type_certificate].get(
                                    'diagnosis_txt').get(1.0, 'end').strip()

                            local_data = {
                                "Об отсутствии контактов": "Осмотрен на чесотку, педикулез, микроспорию\n"
                                                           "Согласие на простое медицинское вмешательство получено\n"
                                                           "В контакте с инфекционными больными в течение 35 дней не был\n"
                                                           "На приеме: с мамой\n"
                                                           "Жалоб нет. Состояние удовлетворительное. "
                                                           "Кожа чистая, зев не гиперемирован. "
                                                           "Pulm: везикулярное дыхание, хрипов нет. "
                                                           "Cor: тоны громкие, ритмичные. "
                                                           "Периферические лимфоузлы не увеличены. "
                                                           "Живот мягкий, безболезненный. "
                                                           "Стул и диурез без особенностей.\n"
                                                           "Перенесенные заболевания: \n"
                                                           f"{render_data.get('past_illnesses')}\n"
                                                           "Заключение: на момент осмотра соматически здоров. "
                                                           "Может находиться в детском коллективе\n"
                                                           "Выдана справка: Об отсутствии контактов в "
                                                           f"{render_data.get('place_of_requirement')}",
                                "На кружки и секции": "Диагноз: "
                                                      f"{diagnosis_txt}\n"
                                                      f"Заключение: {render_data.get('diagnosis')}\n"
                                                      "Выдана справка: На кружки и секции",
                                "ЦКРОиР": "Дополнительные медицинские сведения: "
                                          f"{render_data.get('additional_medical_information')}\n"
                                          f"Заключение: {render_data.get('diagnosis')}\n"
                                          "Выписка дана для предоставления в "
                                          f"{render_data.get('place_of_requirement')}",
                                "О нуждаемости в сан-кур лечении": "Перенесенные заболевания: \n"
                                                                   f"{render_data.get('past_illnesses')}\n"
                                                                   "Диагноз: "
                                                                   f"{diagnosis_txt}\n"
                                                                   f"Заключение: {render_data.get('diagnosis')}\n"
                                                                   "Выдана справка: О нуждаемости в "
                                                                   "санаторно-курортном лечении",
                                "Может работать по специальности...": "Диагноз: "
                                                                      f"{diagnosis_txt}\n"
                                                                      f"Заключение: {render_data.get('diagnosis')}\n"
                                                                      "Группа здоровья: "
                                                                      f"{data['certificate'].get('health_group', '')};  "
                                                                      "Группа по физкультуре: "
                                                                      f"{data['certificate'].get('physical', '')};\n"
                                                                      "Выдана справка о годности к работе",

                                "Бесплатное питание": "Перенесенные заболевания: \n"
                                                      f"{render_data.get('past_illnesses')}\n"
                                                      "Дополнительные медицинские сведения: "
                                                      f"{render_data.get('additional_medical_information')}\n"
                                                      f"Заключение: {render_data.get('diagnosis')}\n"
                                                      "Рекомендации: "
                                                      f"{render_data.get('recommendation')}\n"
                                                      "Выписка дана для предоставления в "
                                                      f"{render_data.get('place_of_requirement')}"

                            }

                            examination_text = f"ФИО: {patient.get('name')}    " \
                                               f"Дата рождения: {patient.get('birth_date')}    " \
                                               f"Участок: {patient.get('patient_district')}\n" \
                                               f"Дата и время: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n" \
                                               f"{local_data.get(type_certificate)}\n" \
                                               f"Врач-педиатр: {user.get('doctor_name')}"




                            document = Document()
                            paragraph = document.add_paragraph()
                            p = paragraph.add_run(examination_text)
                            r_fmt = p.font
                            r_fmt.name = 'Times New Roman'
                            r_fmt.size = Pt(10)
                            if type_certificate in ('ЦКРОиР', 'Об отсутствии контактов'):
                                r_fmt.size = Pt(9)
                            sections = document.sections
                            for section in sections:
                                section.top_margin = Cm(1.5)
                                section.bottom_margin = Cm(1.5)
                                section.left_margin = Cm(1.5)
                                section.right_margin = Cm(1.5)
                                section.page_height = Cm(10.5)
                                section.page_width = Cm(14.8)
                            doc_name = save_document(doc=document, doc_name=f"Вкладыш_осмотра_"
                                                                            f"{patient.get('name').split()[0]}.docx")
                            run_document(doc_name)

                    data_base(command="statistic_write",
                              insert_data="Справка")
                    def save_info_examination():

                        active_examination = f"Выдана справка: {type_certificate}\n" \
                                             f"Цель выдачи справки: {render_data.get('place_of_requirement')}\n" \
                                             f"Перенесенные заболевания: {render_data.get('past_illnesses')}\n" \
                                             f"Дополнительные медицинские сведения: " \
                                             f"{render_data.get('additional_medical_information')}\n" \
                                             f"Заключение: {render_data.get('diagnosis')}\n" \
                                             f"Рекомендации: {render_data.get('recommendation')}"

                        active_but = f"type_examination:____certificate__<end!>__\n" \
                                     f"type_certificate:____{type_certificate}__<end!>__\n"
                        if type_certificate in ('Годовой медосмотр',
                                                'Оформление в ДДУ / СШ / ВУЗ',
                                                'В детский лагерь',
                                                'Об усыновлении (удочерении)',
                                                'Об отсутствии контактов',
                                                'Бесплатное питание',
                                                'О нуждаемости в сан-кур лечении'):
                            active_but += f"chickenpox_allergy_injury:____" \
                                          f"chickenpox__{data['certificate'].get('chickenpox', '')}____" \
                                          f"allergy__{data['certificate'].get('allergy', '')}____" \
                                          f"allergy_txt__{allergy_txt.get()}____" \
                                          f"injury_operation__{data['certificate'].get('injury_operation', '')}____" \
                                          f"injury_txt__{injury_operation_txt.get()}__<end!>__\n"

                        if type_certificate in ('Годовой медосмотр', 'Оформление в ДДУ / СШ / ВУЗ',
                                                'В детский лагерь', 'Об усыновлении (удочерении)'):
                            active_but += f"health_physical_group:____" \
                                          f"health_group__{data['certificate'].get('health_group', '')}____" \
                                          f"physical__{data['certificate'].get('physical', '')}____" \
                                          f"diet__{data['certificate'].get('diet', '')}____"
                            for var in data['certificate'].get('regime', []):
                                active_but += f"regime__{var}____"
                            for var in data['certificate'].get('desk', []):
                                active_but += f"desk__{var}____"
                            active_but += f"posture__{posture.get()}____"

                            active_but += "__<end!>__\n"

                        if type_certificate in ('Годовой медосмотр', 'Оформление в ДДУ / СШ / ВУЗ', 'ЦКРОиР',
                                                'В детский лагерь', 'Об усыновлении (удочерении)',
                                                'О нуждаемости в сан-кур лечении', 'На кружки и секции',
                                                    'Может работать по специальности...'):
                            diagnosis_txt = data['certificate']['type_cert_info'][type_certificate].get('diagnosis_txt').get(1.0, 'end').strip()
                            if diagnosis_txt:
                                active_but += f"diagnosis_txt:____{diagnosis_txt}__<end!>__\n"

                        if type_certificate in ('Годовой медосмотр', 'Оформление в ДДУ / СШ / ВУЗ', 'В детский лагерь'):
                            active_but += f"patient_anthro:____" \
                                          f"height__{height.get()}____" \
                                          f"weight__{weight.get()}____" \
                                          f"vision__{vision.get()}____" \
                                          f"__<end!>__\n"

                            if type_certificate == 'Оформление в ДДУ / СШ / ВУЗ' \
                                    and data['certificate'].get('place_of_requirement') == 'ВУЗ (колледж)':
                                specialties = data['certificate'].get('specialties_txt').get(1.0, 'end').strip()
                                if specialties:
                                    active_but += f"last_patient_specialties:____{specialties}__<end!>__\n"

                        if type_certificate == 'ЦКРОиР':
                            add_med_info = data['certificate']['type_cert_info']['ЦКРОиР'].get('ЦКРОиР_add_med_info')
                            active_but += f"ЦКРОиР_add_med_info:____{add_med_info.get(1.0, 'end').strip()}__<end!>__\n"
                            active_but += f"ЦКРОиР_add_med_info_doctors:____"
                            for doctors in ('Невролог', 'Офтальмолог', 'ЛОР', 'Логопед'):
                                active_but += f"{doctors}____" \
                                          f"{data['certificate']['type_cert_info']['ЦКРОиР'][f'{doctors}_txt'].get()}" \
                                              f"__!__"
                            active_but += "__<end!>__\n"
                        'certificate__upload_last_data'
                        save_info = [
                            f"{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
                            f"{user.get('doctor_name')}",
                            'loc',
                            '',
                            f"{patient.get('name').strip()}__{patient.get('birth_date').strip()}",
                            active_examination,
                            active_but,
                            'certificate']
                        answer, message = data_base(command='examination__save',
                                                    insert_data=save_info)
                    save_info_examination()
                    data['certificate'].clear()
                    render_data.clear()

                type_certificate = selected_button.get()
                render_data.clear()
                data['certificate']['type_cert_frames']['selected_cert'].pack_forget()

                try:
                    for marker in all_data_certificate['all_info'].get(type_certificate):
                        render_data[marker] = all_data_certificate['all_info'][type_certificate].get(marker)

                    render_data['time'] = datetime.now().strftime("%H:%M")

                    render_data['number_cert'] = ''
                    render_data['doctor_name'] = user.get('doctor_name')

                    render_data['name'] = patient.get('name')
                    render_data['birth_date'] = patient.get('birth_date')
                    render_data['gender'] = patient.get('gender')
                    render_data['address'] = patient.get('address')
                    render_data['amb_cart'] = patient.get('amb_cart')
                    render_data['type'] = type_certificate
                    render_data['examination_left'] = ''
                    render_data['examination_main'] = ''


                    render_data['date_of_issue'] = date_of_issue.get()
                    render_data['validity_period'] = \
                        data['certificate']['type_cert_info'][type_certificate]['validity_period'].get()

                    diagnosis_txt = data['certificate']['type_cert_info'][type_certificate].get('diagnosis_txt')
                    if diagnosis_txt:
                        data['certificate']['diagnosis_text'] = diagnosis_txt.get(1.0, 'end').strip()

                    if not render_data.get('place_of_requirement'):
                        if not data['certificate'].get('place_of_requirement'):
                            messagebox.showinfo('Ошибка!', 'Не выбрано место требования справки!')
                            raise ValueError
                        render_data['place_of_requirement'] = data['certificate'].get('place_of_requirement')
                    place_of_requirement = render_data.get('place_of_requirement')

                    if type_certificate == 'Оформление в ДДУ / СШ / ВУЗ':
                        if place_of_requirement == 'Детское Дошкольное Учреждение':
                            render_data['place_of_requirement'] = "Оформление в детское дошкольное учреждение"
                            render_data['type'] = 'Оформление в Детское Дошкольное Учреждение'
                            render_data['recommendation'] = \
                                render_data.get('recommendation').replace('Режим _',
                                                                          'Режим щадящий 1 мес, затем Режим _')
                        if place_of_requirement == 'Средняя школа (гимназия)':
                            render_data['place_of_requirement'] = "Оформление в учреждение общего среднего образования"
                            render_data['type'] = 'Оформление в Среднюю школу (гимназию)'
                            if patient.get('gender', '') == 'женский':
                                render_data['diagnosis'] += f'\nГотова к обучению в ' \
                                                            f"учреждении общего среднего образования"
                            else:
                                render_data['diagnosis'] += '\nГотов к обучению в учреждении общего среднего образования'

                        if place_of_requirement == 'ВУЗ (колледж)':
                            render_data['type'] = 'Оформление в ВУЗ'
                            render_data['additional_medical_information'] = "_____________________________________________"
                            render_data['recommendation'] = "_____________________________________________"
                            render_data['place_of_requirement'] = 'Для поступления в учреждения высшего, ' \
                                                                  'среднего специального и ' \
                                                                  'профессионально-технического образования '
                            render_data['diagnosis'] += "\nОтсутствуют медицинские противопоказания " \
                                                        f"к обучению по специальности: \n" \
                                                        f"{data['certificate'].get('specialties_txt').get(1.0, 'end')}" \
                                                        "(пункт 2 приложения к постановлению " \
                                                        "МЗ РБ от 25.07.2022г. №71)"

                        if place_of_requirement == 'Кадетское училище':
                            render_data['type'] = 'Оформление в Кадетское училище'
                            render_data['place_of_requirement'] = 'Для обучения в кадетском училище / ' \
                                                                  'специализированном лицее Министерства внутренних дел / ' \
                                                                  'специализированном лицее Министерства по чрезвычайным ситуациям»'

                            render_data['additional_medical_information'] = \
                                render_data.get('additional_medical_information') + \
                                '\nОфтальмолог: ________________________________________________________' \
                                '\nНевролог: ___________________________________________________________' \
                                '\nОториноларинголог : _________________________________________________' \
                                '\nСтоматолог: _________________________________________________________' \
                                '\nХирург: _____________________________________________________________' \
                                '\nПедиатр: ____________________________________________________________' \
                                '\nОАК: __________ – WBC: ____ *10^12; RBC: ____ * 10^9; PLT ____ * 10^9; ' \
                                'HGB: ____ г/л; HCT ____ %; MCV: ____ фл; MCH: ____ пг; MCHC: ____ г/л; ' \
                                'Нейтрофилы: ____ %; Лимфоциты: ____ %;  Моноциты: ____ %;  Базофилы: ____ %;  ' \
                                'Эозинофилы: ____ %;  СОЭ ____ мм/ч' \
                                '\nГлюкоза: __________ - _____ ммоль/л' \
                                '\nОАМ: __________ - Цвет: соломенный; Прозрачность: прозрачный; Реакция ____ ; ' \
                                'Удельный вес: ______ ; Белок: не обнаруж.; Глюкоза: не обнаруж.; ' \
                                'Кетоновые тела: не обнаруж.; Билирубин: не обнаруж.; Лейкоциты: не обнаруж.; ' \
                                'Эритроциты: не обнаруж.; Бактерии: не обнаруж.; ' \
                                'Сперматазоиды: не обнаруж.; Слизь: не обнаруж.;' \
                                '\nУЗИ сердца: _________________________________________________________' \
                                '\nЭлектрокардиограмма: ________________________________________________' \
                                '\nУЗИ щитовидной  железы : ____________________________________________'
                            render_data['diagnosis'] += \
                                '\n' \
                                'Врачебное профессионально-консультативное заключение: ' \
                                'отсутствуют медицинские противопоказания к обучению  в ГУО ' \
                                '«Минском городском  кадетском училище».'

                    if type_certificate == 'По выздоровлении':
                        selected_diagnosis = data['certificate']['combo_diagnosis'].get()
                        if ori_from.get() and ori_until.get():
                            render_data['diagnosis'] = f"{selected_diagnosis} c {ori_from.get()} по {ori_until.get()}"
                        elif ori_from.get():
                            render_data['diagnosis'] = f"{selected_diagnosis} от {ori_from.get()}"
                        elif ori_until.get():
                            render_data['diagnosis'] = f"{selected_diagnosis}  {ori_until.get()}"
                        else:
                            render_data['diagnosis'] = f"{selected_diagnosis} "

                        if ori_home_regime.get():
                            if render_data.get('recommendation'):
                                render_data['recommendation'] = f"{render_data.get('recommendation')}\n"
                            render_data['recommendation'] = f"{render_data.get('recommendation')}" \
                                                            f"Домашний режим до {ori_home_regime.get()} включительно"
                        if ori_add_to_childhood.get():
                            if render_data.get('recommendation'):
                                render_data['recommendation'] = f"{render_data.get('recommendation')}\n"
                            render_data['recommendation'] = f"{render_data.get('recommendation')}" \
                                                            f"Допуск в детский коллектив с {ori_add_to_childhood.get()}"

                        if ori_fizra_days.get():
                            if render_data.get('recommendation'):
                                render_data['recommendation'] = f"{render_data.get('recommendation')}\n"
                            render_data['recommendation'] = f"{render_data.get('recommendation')}" \
                                                            f"Освобождение от занятий физкультурой и плаванием \n" \
                                                            f"в бассейне на {ori_fizra_days.get()} дней"

                    if type_certificate == 'На кружки и секции':
                        render_data['place_of_requirement'] = \
                            f"{render_data.get('place_of_requirement')}{hobby_txt.get()}" \
                            f"".replace('участия в соревнованиях по ', '').replace(' и участия в соревнованиях', '').replace(' , ', '')

                        render_data['diagnosis'] = f"{render_data.get('diagnosis')}{hobby_txt.get()}"

                        if data['certificate'].get('health_group'):
                            render_data['diagnosis'] = \
                                f"{render_data.get('diagnosis')}\n" \
                                f"Группа здоровья: {data['certificate'].get('health_group')};"

                        if data['certificate'].get('physical'):
                            render_data['diagnosis'] = \
                                f"{render_data.get('diagnosis')}" \
                                f"  Группа по физкультуре: {data['certificate'].get('physical')};"

                    if type_certificate == 'Может работать по специальности...':
                        render_data['diagnosis'] = \
                            f"{render_data.get('diagnosis')} {job_txt.get()}"

                    if type_certificate in ('Годовой медосмотр',
                                            'Оформление в ДДУ / СШ / ВУЗ',
                                            'В детский лагерь',
                                            'Об усыновлении (удочерении)',
                                            'Об отсутствии контактов',
                                            'Бесплатное питание',
                                            'О нуждаемости в сан-кур лечении'):
                        for ex_marker in ('chickenpox', 'allergy'):
                            if not data['certificate'].get(ex_marker):
                                if ex_marker == 'chickenpox':
                                    messagebox.showerror('Ошибка!', 'Не указана ветрянка!')
                                if ex_marker == 'allergy':
                                    messagebox.showerror('Ошибка!', 'Не указана аллергия!')
                                raise ValueError
                        text_past_illnesses = ''
                        render_data['chickenpox'] = data['certificate'].get('chickenpox')
                        if data['certificate'].get('chickenpox', '') == '+':
                            text_past_illnesses += 'ОРИ, Ветряная оспа; '
                        if data['certificate'].get('chickenpox', '') == '-':
                            text_past_illnesses += 'ОРИ; Ветряной оспой не болел; '
                        if data['certificate'].get('chickenpox', '') == 'привит':
                            text_past_illnesses += 'ОРИ; от ветряной оспы привит; '

                        render_data['allergy'] = data['certificate'].get('allergy', '')
                        if data['certificate'].get('allergy', '') == '-':
                            text_past_illnesses += 'Аллергоанамнез: не отягощен; '
                        if data['certificate'].get('allergy', '') == '+':
                            text_past_illnesses += 'Аллергоанамнез отягощен: '

                            if len(allergy_txt.get()) > 1:
                                text_past_illnesses += f'\nАллергия на: {allergy_txt.get()}'
                                data['certificate']['allergy'] = f"+\n{allergy_txt.get()}"
                                render_data['allergy'] = f"{render_data.get('allergy')}\n{allergy_txt.get()}"

                        if type_certificate == 'Оформление в ДДУ / СШ / ВУЗ':

                            render_data['injury'] = data['certificate'].get('injury_operation', '')
                            if data['certificate'].get('injury_operation', '') == '-':
                                text_past_illnesses += '\nТравм и операций не было; '
                                render_data['injury'] = '-'
                            if data['certificate'].get('injury_operation', '') == '+':
                                text_past_illnesses += '\nТравмы и операции: '
                                if len(injury_operation_txt.get()) > 1:
                                    text_past_illnesses += f'{injury_operation_txt.get()}'
                                    data['certificate']['injury'] = f"+\n{injury_operation_txt.get()}"
                                    render_data['injury'] = f"{render_data.get('injury')}\n{injury_operation_txt.get()}"

                        if render_data.get('past_illnesses'):
                            render_data['past_illnesses'] = f"{render_data.get('past_illnesses', '').strip()}" \
                                                            f"\n{text_past_illnesses}"
                        else:
                            render_data['past_illnesses'] = text_past_illnesses

                        if type_certificate == 'Оформление в ДДУ / СШ / ВУЗ' \
                            and data['certificate'].get('place_of_requirement') == "ВУЗ (колледж)":
                            render_data['past_illnesses'] = "_____________________________________________"

                    if type_certificate in ('Годовой медосмотр', 'Оформление в ДДУ / СШ / ВУЗ', 'В детский лагерь', 'Об усыновлении (удочерении)'):

                        for ex_marker in ('health_group', 'physical', 'regime', 'diet', 'desk'):
                            if not data['certificate'].get(ex_marker):
                                if ex_marker == 'health_group':
                                    messagebox.showerror('Ошибка!', 'Не указана группа здоровья!')
                                if ex_marker == 'physical':
                                    messagebox.showerror('Ошибка!', 'Не указана группа по физкультуре!')
                                if ex_marker == 'regime':
                                    messagebox.showerror('Ошибка!', 'Не указан режим!')
                                if ex_marker == 'diet':
                                    messagebox.showerror('Ошибка!', 'Не указана диета!')
                                if ex_marker == 'desk':
                                    if (type_certificate == 'Оформление в ДДУ / СШ / ВУЗ'
                                            and render_data.get('type', '') == 'Оформление в ВУЗ'):
                                        continue
                                    messagebox.showerror('Ошибка!', 'Не указана рассадка!')
                                raise ValueError
                        if not weight.get():
                            messagebox.showerror('Ошибка!', 'Не указан вес!')
                            raise ValueError

                        if not height.get():
                            messagebox.showerror('Ошибка!', 'Не указан рост!')
                            raise ValueError

                        if type_certificate in ('Годовой медосмотр', 'Оформление в ДДУ / СШ / ВУЗ', 'В детский лагерь'):
                            render_data['visus'] = f"VIS OD/OS\n= {vision.get()}\n"
                        else:
                            render_data['visus'] = ''

                        render_data["add_diagnosis"] = diagnosis_txt.get(1.0, 'end').strip()
                        render_data['height'] = height.get().replace(',', '.')
                        render_data['weight'] = weight.get().replace(',', '.')
                        render_data['group'] = selected_health_group.get()
                        render_data['physical'] = selected_fiz_group.get()

                        add_med_info = render_data.get('additional_medical_information', '')
                        add_med_info = add_med_info.replace('Рост _____ см', f'Рост {height.get()} см')
                        add_med_info = add_med_info.replace('Вес _____ кг', f'Вес {weight.get()} кг')
                        add_med_info = add_med_info.replace('Vis OD/OS = __________', f"Vis OD/OS = {vision.get()}")
                        add_med_info = add_med_info.replace('АД ________', f'АД {patient_bp.get()} мм.рт.ст.')

                        render_data['additional_medical_information'] = add_med_info

                        render_data['temp'] = patient_temp.get()
                        render_data['br'] = patient_br.get()
                        render_data['hr'] = patient_hr.get()
                        render_data['bp'] = patient_bp.get()


                        diagnosis_cert = render_data.get('diagnosis', '')
                        if type_certificate in ('В детский лагерь',
                                                'Об усыновлении (удочерении)',
                                                'О нуждаемости в сан-кур лечении') \
                                or type_certificate == 'Оформление в ДДУ / СШ / ВУЗ' \
                                and place_of_requirement == 'Кадетское училище':

                            diagnosis_cert = f"{diagnosis_txt.get(1.0, 'end').strip()}\n{diagnosis_cert}"

                        diagnosis_cert = diagnosis_cert.replace('Группа здоровья: _',
                                                                f'Группа здоровья: {selected_health_group.get()}')
                        diagnosis_cert = diagnosis_cert.replace('Группа по физкультуре: _',
                                                                f'Группа по физкультуре: {selected_fiz_group.get()}')
                        render_data['diagnosis'] = diagnosis_cert

                        recommendation = render_data.get('recommendation', '')
                        recommendation = recommendation.replace('Режим _',
                                                                f"Режим {', '.join(data['certificate'].get('regime'))}")
                        render_data['regime'] = ', '.join(data['certificate'].get('regime'))

                        recommendation = recommendation.replace('Стол _', f'Стол {selected_diet.get()}')
                        render_data['diet'] = selected_diet.get()

                        if (type_certificate in ('Годовой медосмотр', 'Оформление в ДДУ / СШ / ВУЗ')
                                and render_data.get('type', '') != 'Оформление в ВУЗ'):
                            recommendation += ' Парта _;'
                            result = ''
                            desk_num = list()
                            for desk in data['certificate'].get('desk'):
                                if desk.isdigit():
                                    desk_num.append(int(desk))
                            for desk in sorted(desk_num):
                                result += f'{desk} - '
                            if result:
                                result = result[:-2]
                            if 'средний ряд' in data['certificate'].get('desk'):
                                result += 'средний ряд '
                            if 'по росту' in data['certificate'].get('desk'):
                                result += 'по росту'

                            if 'Детское Дошкольное Учреждение' in data['certificate'].get('place_of_requirement'):
                                recommendation = recommendation.replace('Парта _', f" Мебель {result}")
                                render_data['desk'] = f"Мебель {result}"
                            else:
                                recommendation = recommendation.replace('Парта _', f" Парта {result}")
                                render_data['desk'] = f"Парта {result}"

                            if render_data.get('place_of_requirement') in ('Средняя школа (гимназия)',
                                                                           'Детское Дошкольное Учреждение'):
                                recommendation = f"{recommendation} Разрешены занятия в бассейне"

                        render_data['recommendation'] = recommendation

                        if type_certificate == 'Оформление в ДДУ / СШ / ВУЗ' or age.get('year') >= 11:
                            render_data['hearing'] = '\nСлух в норме.'
                        else:
                            render_data['hearing'] = ''

                        if age.get('year') >= 4:
                            render_data['posture'] = f"\nОсанка: {posture.get()}."
                        else:
                            render_data['posture'] = ''

                        if 'Физическое развитие (выше- ниже-) среднее, (дис-) гармоничное' in render_data.get(
                                'diagnosis', ''):
                            render_data['diagnosis'] = render_data.get('diagnosis', '').replace(
                                    'Физическое развитие (выше- ниже-) среднее, (дис-) гармоничное',
                                    f"Физическое развитие: {patient_anthropometry.get().split('--')[-1].strip()}")
                        render_data['anthro'] = patient_anthropometry.get()

                        render_data['imt'] = round(float(render_data.get('weight')) /
                                                   (float(render_data.get('height')) / 100) ** 2, 1)

                    if type_certificate in ('Годовой медосмотр', 'Оформление в ДДУ / СШ / ВУЗ', 'В детский лагерь'):
                        if age.get('year') < 14:
                            render_data['recommendation'] = render_data.get('recommendation', '') + \
                                    "\nНа основании ст. 44 Закона Республики Беларусь от 18.06.1993 №2435-XII  " \
                                    "'О здравоохранении' от законного представителя несовершеннолетнего получено устное" \
                                    "  предварительное информированное добровольное согласие на оказание медицинской помощи"


                    if type_certificate == 'О нуждаемости в сан-кур лечении':
                        render_data['diagnosis'] = f"Имеются медицинские показания и отсутствуют медицинские противопоказания " \
                                                   f"к санаторно-курортному лечению по профилю: \n"  + \
                                      '\n'.join(data['certificate'].get('sanatorium_profile'))
                        # render_data['diagnosis'] = diagnosis_txt.get(1.0, 'end').strip()


                    if type_certificate == 'ЦКРОиР':

                        result = data['certificate']['type_cert_info'][type_certificate]['ЦКРОиР_add_med_info'].get(1.0, 'end').strip()
                        for doctors in ('Невролог', 'Офтальмолог',  'ЛОР',  'Логопед'):
                            result += f"\n{doctors}: " \
                                      f"{data['certificate']['type_cert_info'][type_certificate][f'{doctors}_txt'].get()}"
                        render_data['additional_medical_information'] = result
                        render_data['diagnosis'] = diagnosis_txt.get(1.0, 'end').strip()



                    if not render_data.get('additional_medical_information'):
                        render_data['additional_medical_information'] = '_' * 60
                    if not render_data.get('past_illnesses'):
                        render_data['past_illnesses'] = '_' * 60
                    if not render_data.get('recommendation'):
                        render_data['recommendation'] = '_' * 50



                except ValueError:
                    data['certificate']['type_cert_frames']['selected_cert'].pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
                    canvas_frame.focus()
                else:

                    certificate__create_doc()
                    certificate_main_root.destroy()

            def diagnosis_healthy():
                for type_cert in data['certificate'].get('type_cert_info'):
                    if data['certificate']['type_cert_info'][type_cert].get('diagnosis_txt'):
                        diagnosis = data['certificate']['type_cert_info'][type_cert].get('diagnosis_txt')
                        diagnosis.delete(1.0, 'end')
                        if patient.get('gender', '') == 'женский':
                            diagnosis.insert(INSERT, 'Соматически здорова. ')
                        else:
                            diagnosis.insert(INSERT, 'Соматически здоров. ')
                selected_health_group.set('1')
                selected_fiz_group.set('Основная')
                selected_diet.set('Б')
                for marker in regime_vars:
                    if marker == 'общий':
                        regime_vars[marker].set(1)
                    else:
                        regime_vars[marker].set(0)
                for marker in desk_vars:
                    if marker == 'по росту':
                        desk_vars[marker].set(1)
                    else:
                        desk_vars[marker].set(0)

                data['certificate']['health_group'] = selected_health_group.get()
                data['certificate']['physical'] = selected_fiz_group.get()
                data['certificate']['regime'] = ["общий"]
                data['certificate']['diet'] = selected_diet.get()
                data['certificate']['desk'] = ["по росту"]

            def select_health():
                for mark, var in (('health_group', selected_health_group),
                                  ('physical', selected_fiz_group),
                                  ('diet', selected_diet)):
                    if var.get():
                        data['certificate'][mark] = var.get()


                for mark, var in (('regime', regime_vars),
                                  ('desk', desk_vars),):
                    result = list()
                    for marker in all_data_certificate.get('health').get(mark):
                        if var.get(marker).get() == 1:
                            result.append(marker)
                    data['certificate'][mark] = result

            def diagnosis_kb():
                def select_diagnosis():
                    for type_cert in data['certificate'].get('type_cert_info'):
                        if data['certificate']['type_cert_info'][type_cert].get('diagnosis_txt'):
                            diagnosis_txt = data['certificate']['type_cert_info'][type_cert].get('diagnosis_txt')
                            diagnosis_txt.insert(INSERT, f" {selected_button.get()}")

                if data['certificate'].get('is_diagnosis_kb_open'):
                    data['certificate']['is_diagnosis_kb_open'] = False
                    for type_cert in data['certificate'].get('type_cert_info'):
                        if data['certificate']['type_cert_info'][type_cert].get('diagnosis_kb_frame'):
                            but = data['certificate']['type_cert_info'][type_cert].get('diagnosis_main_but')
                            but['text'] = "Открыть клавиатуру диагнозов"

                            frame = data['certificate']['type_cert_info'][type_cert].get('diagnosis_kb_frame')
                            frame.pack_forget()
                            frame.destroy()
                else:
                    data['certificate']['is_diagnosis_kb_open'] = True
                    for type_cert in data['certificate'].get('type_cert_info'):
                        if data['certificate']['type_cert_info'][type_cert].get('diagnosis_frame'):
                            but = data['certificate']['type_cert_info'][type_cert].get('diagnosis_main_but')
                            but['text'] = "Закрыть клавиатуру диагнозов"

                            diagnosis_frame = data['certificate']['type_cert_info'][type_cert].get('diagnosis_frame')
                            diagnosis_kb_frame = Frame(diagnosis_frame, bg="#36566d")
                            diagnosis_kb_frame.pack(fill='both', expand=True, padx=3, pady=3)
                            data['certificate']['type_cert_info'][type_cert]['diagnosis_kb_frame'] = diagnosis_kb_frame
                            for tuple_diagnosis in all_data_certificate.get('diagnosis'):
                                Label(diagnosis_kb_frame, text=tuple_diagnosis[0],
                                      font=('Comic Sans MS', user.get('text_size')),
                                      bg='white'
                                      ).pack(fill='both', expand=True)
                                frame = Frame(diagnosis_kb_frame)

                                for diagnosis_name in tuple_diagnosis[1:]:
                                    if diagnosis_name == '_':
                                        frame.pack(fill='both', expand=True)
                                        frame = Frame(diagnosis_kb_frame)
                                    else:
                                        Radiobutton(frame, text=diagnosis_name,
                                                    font=('Comic Sans MS', user.get('text_size')),
                                                    value=diagnosis_name,
                                                    variable=selected_button,
                                                    command=select_diagnosis,
                                                    indicatoron=False, selectcolor='#77f1ff'
                                                    ).pack(fill='both', expand=True, side='left')

            def paste_calendar():
                if data['certificate'].get('calendar_root'):
                    data['certificate']['calendar_root'].destroy()


                command, marker = selected_button.get().split('__')

                calendar_root = Toplevel()
                data['certificate']['calendar_root'] = calendar_root
                calendar_root.title(f'Календарь {marker}')
                calendar_root.config(bg='white')

                selected_day = StringVar()
                actual_data = dict()
                destroy_elements = dict()

                now = datetime.now()
                actual_data['year'] = now.year
                actual_data['month'] = now.month

                def prev_month():
                    curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
                    new = curr - timedelta(days=1)
                    actual_data['year'] = int(new.year)
                    actual_data['month'] = int(new.month)
                    create_calendar()

                def next_month():
                    curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
                    new = curr + timedelta(days=31)
                    actual_data['year'] = int(new.year)
                    actual_data['month'] = int(new.month)
                    create_calendar()

                def select_day():
                    data['certificate']['calendar_root'] = None
                    day = selected_day.get()
                    edit_day = list()
                    for i in day.split('.'):
                        if len(i) == 1:
                            i = f"0{i}"
                        edit_day.append(i)
                    answer = '.'.join(edit_day)
                    if command == 'ori_from':
                        ori_from.set(answer)

                    elif command == 'ori_until':
                        ori_until.set(answer)

                    elif command == 'ori_home_regime':
                        ori_home_regime.set(answer)

                    elif command == 'ori_add_to_childhood':
                        ori_add_to_childhood.set(answer)

                    elif command == 'date_of_issue':
                        date_of_issue.set(answer)

                    elif command.startswith('validity_period'):
                        type_cert = command.split('-')[-1]
                        var = data['certificate']['type_cert_info'][type_cert].get('validity_period')
                        var.set(answer)


                    elif command.startswith('ЦКРОиР'):
                        marker = command.split('-')[-1]
                        var = data['certificate']['type_cert_info']["ЦКРОиР"].get(marker)
                        var.set(f"{answer} - {var.get()}")

                    calendar_root.destroy()

                frame_month_year = Frame(calendar_root, relief="solid", padx=1, pady=1)

                frame_month_year.columnconfigure(index='all', minsize=40, weight=1)
                frame_month_year.rowconfigure(index='all', minsize=20)
                frame_month_year.pack(fill='both', expand=True)

                def create_calendar():
                    if destroy_elements.get('loc_calendar_frame'):
                        loc_calendar_frame = destroy_elements.get('loc_calendar_frame')
                        loc_calendar_frame.destroy()

                    loc_calendar_frame = Frame(calendar_root, relief="solid", padx=1, pady=1)
                    destroy_elements['loc_calendar_frame'] = loc_calendar_frame

                    for calendar_mark in ('prev', 'curr', 'next'):
                        row, col = 0, 0

                        frame_days = Frame(loc_calendar_frame, relief="ridge", borderwidth=0.5, padx=1, pady=1)
                        if calendar_mark == 'prev':
                            but_prev_month = Button(frame_days, text='<', command=prev_month,
                                                    font=('Comic Sans MS', user.get('text_size')))
                            but_prev_month.grid(row=row, column=0, sticky='ew', columnspan=7)


                        elif calendar_mark == 'next':
                            but_next_month = Button(frame_days, text='>', command=next_month,
                                                    font=('Comic Sans MS', user.get('text_size')))
                            but_next_month.grid(row=row, column=0, sticky='ew', columnspan=7)


                        else:
                            btn = Radiobutton(frame_days, text="Сегодня",
                                              font=('Comic Sans MS', user.get('text_size')),
                                              value=datetime.now().strftime("%d.%m.%Y"),
                                              variable=selected_day, command=select_day,
                                              indicatoron=False, selectcolor='#77f1ff')
                            btn.grid(row=row, column=0, sticky='ew', columnspan=7)

                        if calendar_mark == 'prev':
                            curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
                            new = curr - timedelta(days=1)
                            year = int(new.year)
                            month = int(new.month)

                        elif calendar_mark == 'next':
                            curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
                            new = curr + timedelta(days=31)
                            year = int(new.year)
                            month = int(new.month)

                        else:
                            year = actual_data.get('year')
                            month = actual_data.get('month')

                        month_name = {
                            'January': 'Январь',
                            'February': 'Февраль',
                            'March': 'Март',
                            'April': 'Апрель',
                            'May': 'Май',
                            'June': 'Июнь',
                            'July': 'Июль',
                            'August': 'Август',
                            'September': 'Сентябрь',
                            'October': 'Октябрь',
                            'November': 'Ноябрь',
                            'December': 'Декабрь'
                        }

                        row += 1
                        lbl_month_year = Label(frame_days,
                                               text=f"{month_name.get(calendar.month_name[month])}",
                                               font=('Comic Sans MS', user.get('text_size')),
                                               bg='white')
                        lbl_month_year.grid(column=0, row=row, sticky='ew', columnspan=7)

                        if calendar_mark == 'curr':
                            lbl_month_year['text'] = f"{month_name.get(calendar.month_name[month])} {str(year)}"

                        # Second row - Week Days
                        column = 0
                        row += 1
                        for day in ["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"]:
                            lbl = Label(frame_days, text=day,
                                        relief="solid", borderwidth=0.5,
                                        font=('Comic Sans MS', user.get('text_size')), bg='white')
                            lbl.grid(column=column, row=row, sticky='ew', padx=2, pady=2)
                            column += 1

                        row += 1
                        column = 0

                        my_calendar = calendar.monthcalendar(year, month)
                        for week in my_calendar:
                            row += 1
                            col = 0
                            for day in week:
                                if day == 0:
                                    col += 1
                                else:
                                    # day = str(day)
                                    # day = str(day)
                                    # if len(day) == 1:
                                    #     day = f"0{day}"
                                    # if len(str(month)) == 1:
                                    #     month = f"0{month}"
                                    btn_value = ''

                                    btn = Radiobutton(frame_days, text=day,
                                                      font=('Comic Sans MS', user.get('text_size')),
                                                      value=f"{day}.{month}.{year}", variable=selected_day,
                                                      command=select_day,
                                                      indicatoron=False, selectcolor='#77f1ff')
                                    btn.grid(row=row, column=col, sticky='ew')
                                    col += 1

                                    if datetime.strptime(f"{day}.{month}.{year}", "%d.%m.%Y").weekday() in (5, 6):
                                        btn['bg'] = '#b4ffff'
                                    if datetime.now().year == year and datetime.now().month == month and datetime.now().day == int(
                                            day):
                                        btn['bg'] = '#ff7b81'

                        frame_days.columnconfigure(index='all', minsize=40, weight=1)
                        frame_days.rowconfigure(index='all', minsize=20)
                        frame_days.pack(fill='both', expand=True, side='left')

                    loc_calendar_frame.columnconfigure(index='all', minsize=40, weight=1)
                    loc_calendar_frame.rowconfigure(index='all', minsize=20)
                    loc_calendar_frame.pack(fill='both', expand=True, side='left')

                create_calendar()

            def paste_bp():

                indicators = {
                    '0-3': {
                        'br': (24, 28),
                        'hr': (90, 100),
                        'bp': (90, 100, 60, 70)},
                    '3-6': {
                        'br': (22, 28),
                        'hr': (80, 90),
                        'bp': (96, 110, 60, 70)},
                    '6-12': {
                        'br': (20, 24),
                        'hr': (70, 90),
                        'bp': (100, 110, 60, 75)},
                    '>12': {
                        'br': (18, 22),
                        'hr': (70, 80),
                        'bp': (110, 120, 70, 78)},
                }

                if age.get('year') <= 3:
                    indicator = indicators['0-3']
                elif age.get('year') <= 6:
                    indicator = indicators['3-6']
                elif age.get('year') <= 12:
                    indicator = indicators['6-12']
                else:
                    indicator = indicators['>12']

                patient_temp.set(random.choice(['36,6', '36,7', '36,5']))
                patient_br.set(random.randrange(start=indicator['br'][0], stop=indicator['br'][1], step=2))
                patient_hr.set(random.randrange(start=indicator['hr'][0], stop=indicator['hr'][1], step=2))
                patient_bp.set(f"{random.randrange(start=indicator['bp'][0], stop=indicator['bp'][1], step=1)}/"
                               f"{random.randrange(start=indicator['bp'][2], stop=indicator['bp'][3], step=1)}")

            def check_anthro(num, marker):
                if num:
                    num = num.replace(',', '.')
                    try:
                        float(num)
                    except ValueError:
                        return False
                height_var, weight_var = None, None
                if marker == 'height':
                    height_var, weight_var = num.replace(',', '.'), weight.get().replace(',', '.')
                elif marker == 'weight':
                    weight_var, height_var = num.replace(',', '.'), height.get().replace(',', '.')
                if weight_var:
                    weight_var = float(weight_var)
                if height_var:
                    height_var = float(height_var)

                patient_anthropometry.set(
                    patient_anthro(marker_age_y='после года',
                                   marker_age=age.get('year'),
                                   height=height_var,
                                   weight=weight_var)
                )
                return True

            def select_chickenpox():
                data['certificate']['chickenpox'] = selected_chickenpox.get()

            def select_allergy():
                data['certificate']['allergy'] = selected_allergy.get()
                if selected_allergy.get() == '+':
                    if not data['certificate'].get('is_frame_allergy_open'):
                        data['certificate']['is_frame_allergy_open'] = True
                        for type_cert in data['certificate'].get('type_cert_info'):
                            if data['certificate']['type_cert_info'][type_cert].get('frame_allergy'):
                                frame_allergy = data['certificate']['type_cert_info'][type_cert].get(
                                    'frame_allergy')
                                frame = Frame(frame_allergy, borderwidth=1, relief="solid", padx=2, pady=2)
                                Label(frame, text="Аллергия на:",
                                      font=('Comic Sans MS', user.get('text_size')),
                                      bg='white').pack(fill='both', expand=True, side='left')
                                Entry(frame, width=60, textvariable=allergy_txt,
                                      font=('Comic Sans MS', user.get('text_size'))
                                      ).pack(fill='both', expand=True, side='left')
                                frame.pack(fill='both', expand=True)
                                data['certificate']['type_cert_info'][type_cert]['frame_allergy_txt'] = frame


                else:
                    if data['certificate'].get('is_frame_allergy_open'):
                        data['certificate']['is_frame_allergy_open'] = False
                        for type_cert in data['certificate'].get('type_cert_info'):
                            if data['certificate']['type_cert_info'][type_cert].get('frame_allergy_txt'):
                                frame = data['certificate']['type_cert_info'][type_cert].get('frame_allergy_txt')
                                frame.pack_forget()
                                frame.destroy()
                                data['certificate']['type_cert_info'][type_cert]['frame_allergy_txt'] = False

            def select_injury_operation():
                data['certificate']['injury_operation'] = selected_injury_operation.get()
                if selected_injury_operation.get() == '+':
                    if not data['certificate'].get('is_frame_injury_open'):
                        data['certificate']['is_frame_injury_open'] = True
                        for type_cert in data['certificate'].get('type_cert_info'):
                            if data['certificate']['type_cert_info'][type_cert].get('frame_injury'):
                                frame_allergy = data['certificate']['type_cert_info'][type_cert].get(
                                    'frame_injury')
                                frame = Frame(frame_allergy, borderwidth=1, relief="solid", padx=2, pady=2)
                                Label(frame, text="Травмы и операции:",
                                      font=('Comic Sans MS', user.get('text_size')),
                                      bg='white').pack(fill='both', expand=True, side='left')
                                Entry(frame, width=60, textvariable=injury_operation_txt,
                                      font=('Comic Sans MS', user.get('text_size'))
                                      ).pack(fill='both', expand=True, side='left')
                                frame.pack(fill='both', expand=True)
                                data['certificate']['type_cert_info'][type_cert]['frame_injury_txt'] = frame


                else:
                    if data['certificate'].get('is_frame_injury_open'):
                        data['certificate']['is_frame_injury_open'] = False
                        for type_cert in data['certificate'].get('type_cert_info'):
                            if data['certificate']['type_cert_info'][type_cert].get('frame_injury_txt'):
                                frame = data['certificate']['type_cert_info'][type_cert].get('frame_injury_txt')
                                frame.pack_forget()
                                frame.destroy()
                                data['certificate']['type_cert_info'][type_cert]['frame_injury_txt'] = False

            def select_posture():
                data['certificate']['posture'] = posture.get()


            def upload_last_data():
                found_info = data_base(command='certificate__upload_last_data')
                local_info = {
                    'select_past_examination': list(),
                    'get_last_anthro_data': dict(),

                }
                flags = {
                    'chickenpox_allergy_injury': False,
                    'health_physical_group': False,
                    'diagnosis_txt': False,
                    'patient_anthro': False,
                    'ЦКРОиР_add_med_info': False,
                    'ЦКРОиР_add_med_info_doctors': False,
                    'last_patient_specialties': False,
                    'break': False
                }
                variables = {
                    'chickenpox_allergy_injury': {
                        'chickenpox': selected_chickenpox,
                        'allergy': selected_allergy,
                        'injury_operation': selected_injury_operation,
                        'allergy_txt': allergy_txt,
                        'injury_txt': injury_operation_txt},
                    'health_physical_group': {
                        'health_group': selected_health_group,
                        'physical': selected_fiz_group,
                        'diet': selected_diet,
                        'regime': regime_vars,
                        'desk': desk_vars},
                    'patient_anthro': {
                        'height': height,
                        'weight': weight,
                        'vision': vision
                    }

                }

                if found_info.get('select_past_examination'):
                    for rowid, examination_key in sorted(found_info.get('select_past_examination'),
                                                         key=lambda i: (datetime.now() -
                                                                        datetime.strptime(f"{i[0]}",
                                                                                          "%d.%m.%Y %H:%M:%S")).total_seconds()):

                        for string in examination_key.split('__<end!>__\n'):
                            if string.startswith('chickenpox_allergy_injury:____'):
                                if not flags.get('chickenpox_allergy_injury'):
                                    flags['chickenpox_allergy_injury'] = True
                                    string = string.replace('chickenpox_allergy_injury:____', '').split('____')
                                    for marker in string:
                                        if len(marker.split('__')) == 2:
                                            var_name, info = marker.split('__')
                                            if variables['chickenpox_allergy_injury'].get(var_name):
                                                variable = variables['chickenpox_allergy_injury'].get(var_name)
                                                variable.set(info)
                                    select_chickenpox()
                                    select_allergy()
                                    select_injury_operation()

                            elif string.startswith('health_physical_group:____'):
                                if not flags.get('health_physical_group'):
                                    flags['health_physical_group'] = True
                                    for marker in string.replace('health_physical_group:____', '').split('____'):
                                        if len(marker.split('__')) == 2:
                                            var_name, info = marker.split('__')
                                            if var_name in ('health_group', 'physical', 'diet'):
                                                if variables['health_physical_group'].get(var_name):
                                                    variable = variables['health_physical_group'].get(var_name)
                                                    variable.set(info)

                                            elif var_name in ('regime', 'desk'):
                                                variable = variables['health_physical_group'].get(var_name)
                                                if variable.get(info):
                                                    variable[info].set(1)

                                            elif var_name == 'posture':
                                                posture.set(info)







                                    select_health()

                            elif string.startswith('diagnosis_txt:____'):
                                if not flags.get('diagnosis_txt'):
                                    flags['diagnosis_txt'] = True
                                    text = string.replace('diagnosis_txt:____', '')
                                    for type_certificate in data['certificate'].get('type_cert_info'):
                                        if data['certificate']['type_cert_info'][type_certificate].get('diagnosis_txt'):
                                            diagnosis_txt = data['certificate']['type_cert_info'][type_certificate].get(
                                                'diagnosis_txt')
                                            diagnosis_txt.insert(1.0, text)

                            elif string.startswith('last_patient_specialties:____'):
                                if not flags.get('last_patient_specialties'):
                                    flags['last_patient_specialties'] = True
                                    text = string.replace('last_patient_specialties:____', '')
                                    data['certificate']['last_patient_specialties'] = text


                            elif string.startswith('patient_anthro:____'):
                                if not flags.get('patient_anthro'):
                                    flags['patient_anthro'] = True
                                    chickenpox_variables = ()

                                    for marker in string.replace('patient_anthro:____', '').split('____'):
                                        if len(marker.split('__')) == 2:
                                            var_name, info = marker.split('__')
                                            if variables['patient_anthro'].get(var_name):
                                                variable = variables['patient_anthro'].get(var_name)
                                                variable.set(info)

                            elif string.startswith('ЦКРОиР_add_med_info'):

                                if string.startswith('ЦКРОиР_add_med_info:____'):
                                    if not flags.get('ЦКРОиР_add_med_info'):
                                        flags['ЦКРОиР_add_med_info'] = True
                                        text = string.replace('ЦКРОиР_add_med_info:____', '')
                                        add_med_info = data['certificate']['type_cert_info']['ЦКРОиР'].get(
                                            'ЦКРОиР_add_med_info')
                                        add_med_info.delete(1.0, 'end')
                                        add_med_info.insert(1.0, text)

                                elif string.startswith('ЦКРОиР_add_med_info_doctors:____'):
                                    if not flags.get('ЦКРОиР_add_med_info_doctors'):
                                        flags['ЦКРОиР_add_med_info_doctors'] = True
                                        for marker in string.replace('ЦКРОиР_add_med_info_doctors:____', '').split(
                                                '__!__'):
                                            if len(marker.split('____')) == 2:
                                                var_name, info = marker.split('____')
                                                data['certificate']['type_cert_info']['ЦКРОиР'][f'{var_name}_txt'].set(
                                                    info)

                        flags['break'] = True
                        for flag in flags:
                            if not flags.get(flag):
                                flags['break'] = False
                        if flags.get('break'):
                            break

            paste_bp()
            for type_certificate in all_data_certificate.get('type'):
                def paste_diagnosis_frame():
                    frame_diagnosis = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)
                    frame = Frame(frame_diagnosis)
                    Label(frame, text="Диагноз:",
                          font=('Comic Sans MS', user.get('text_size')), bg='white'
                          ).pack(fill='both', expand=True, side='left')
                    Button(frame, text='Здоров', command=diagnosis_healthy,
                           font=('Comic Sans MS', user.get('text_size'))
                           ).pack(fill='both', expand=True, side='left')
                    but = Button(frame, text='Открыть клавиатуру диагнозов', command=diagnosis_kb,
                               font=('Comic Sans MS', user.get('text_size')))
                    data['certificate']['type_cert_info'][type_certificate]['diagnosis_main_but'] = but
                    but.pack(fill='both', expand=True, side='left')
                    frame.pack(fill='both', expand=True, padx=2, pady=2)

                    frame = Frame(frame_diagnosis)
                    diagnosis = ScrolledText(frame, width=80, height=4,
                                             font=('Comic Sans MS', user.get('text_size')), wrap="word")
                    diagnosis.pack(fill='both', expand=True)
                    data['certificate']['type_cert_info'][type_certificate]['diagnosis_txt'] = diagnosis
                    data['certificate']['type_cert_info'][type_certificate]['diagnosis_frame'] = frame

                    frame.pack(fill='both', expand=True, padx=2, pady=2)
                    frame_diagnosis.pack(fill='both', expand=True, padx=2, pady=2)


                data['certificate']['type_cert_info'][type_certificate] = dict()

                master_frame = Frame(canvas_frame, bg="#36566d")
                data['certificate']['type_cert_frames'][type_certificate] = master_frame

                Label(master=master_frame,
                      text=type_certificate,
                      font=('Comic Sans MS', user.get('text_size')),
                      bg="#36566d",
                      fg='white'
                      ).pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)


                if not all_data_certificate['all_info'].get(type_certificate).get('place_of_requirement'):
                    def select_place():
                        type_cert, place = selected_place.get().split('__')
                        data['certificate']['place_of_requirement'] = place
                        label_place_text.set(f"Место требования справки: {place}")

                        if type_cert == "Оформление в ДДУ / СШ / ВУЗ" and place == 'ВУЗ (колледж)':
                            data['certificate']['type_cert_info'][type_cert]['validity_period'].set('1 год')

                            if not data['certificate'].get('frame_specialties'):
                                frame_place = data['certificate']['type_cert_info'][type_cert].get("frame_place")
                                frame_specialties = Frame(master=frame_place,
                                              borderwidth=1, relief="solid", padx=4, pady=4)
                                data['certificate']['frame_specialties'] = frame_specialties
                                frame = Frame(frame_specialties)
                                specialties_txt = ScrolledText(frame, width=80, height=4,
                                                               font=('Comic Sans MS', user.get('text_size')),
                                                               wrap="word")
                                if data['certificate'].get('last_patient_specialties'):
                                    specialties_txt.insert(1.0, data['certificate'].get('last_patient_specialties'))
                                data['certificate']['specialties_txt'] = specialties_txt
                                Label(frame, text="Специальности для поступления:",
                                      font=('Comic Sans MS', user.get('text_size')), bg='white'
                                      ).pack(fill='both', expand=True, padx=2, pady=2)
                                specialties_txt.pack(fill='both', expand=True, padx=2, pady=2)
                                frame.pack(fill='both', expand=True, padx=2, pady=2)
                                frame_specialties.pack(fill='both', expand=True, padx=2, pady=2)

                        else:
                            if data['certificate'].get('frame_specialties'):
                                data['certificate']['last_patient_specialties'] = \
                                    data['certificate']['specialties_txt'].get(1.0, 'end').strip()
                                data['certificate']['frame_specialties'].pack_forget()
                                data['certificate']['frame_specialties'] = None
                            if type_cert == "Оформление в ДДУ / СШ / ВУЗ":
                                if place == 'Кадетское училище':
                                    data['certificate']['type_cert_info'][type_cert]['validity_period'].set('3 месяца')
                                else:
                                        data['certificate']['type_cert_info'][type_cert]['validity_period'].set('1 год')



                    frame_place = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)
                    data['certificate']['type_cert_info'][type_certificate]['frame_place'] = frame_place

                    place = all_data_certificate.get('place')
                    if type_certificate == 'Оформление в ДДУ / СШ / ВУЗ':
                        place = ('Детское Дошкольное Учреждение',
                                 'Средняя школа (гимназия)',
                                 'ВУЗ (колледж)', 'Кадетское училище')
                    if type_certificate == 'ЦКРОиР':
                        place = ('Для логопедической комиссии (ЦКРОиР)',
                                 'Ресурсный центр раннего вмешательства')

                    Label(frame_place, textvariable=label_place_text,
                          font=('Comic Sans MS', user.get('text_size')),
                          bg='white').pack(fill='both', expand=True, padx=2, pady=2)


                    frame_place_1 = Frame(frame_place, padx=4, pady=4)

                    row, col = 0, 0
                    for mark in place:
                        btn = Radiobutton(frame_place_1, text=mark,
                                          font=('Comic Sans MS', user.get('text_size')),
                                          value=f"{type_certificate}__{mark}",
                                          variable=selected_place, command=select_place,
                                          indicatoron=False, selectcolor='#77f1ff')
                        btn.grid(row=row, column=col, sticky='ew')
                        col += 1
                        if col == 3:
                            row += 1
                            col = 0

                        frame_place_1.columnconfigure(index='all', minsize=40, weight=1)
                        frame_place_1.rowconfigure(index='all', minsize=20)
                        frame_place_1.pack(fill='both', expand=True, padx=2, pady=2)

                    frame_place.columnconfigure(index='all', minsize=40, weight=1)
                    frame_place.rowconfigure(index='all', minsize=20)
                    frame_place.pack(fill='both', expand=True, padx=2, pady=2)

                if type_certificate in ('На кружки и секции', 'Может работать по специальности...'):
                    def save_new_hobby():
                        if not new_hobby_txt.get():
                            messagebox.showerror('Ошибка', "Не указан кружок / секция для сохранения")
                        else:
                            if data_base(command='save_new_hobby',
                                         insert_data=[user.get('doctor_name'), new_hobby_txt.get()]):

                                messagebox.showinfo('Инфо', "Секция сохранена в избранное\n")
                                certificate_main_root.destroy()
                            else:
                                messagebox.showinfo('Инфо', "Ошибка при сохранении")

                    def append_hobby():
                        if selected_button.get() == '+ СОРЕВНОВАНИЯ':
                            if hobby_txt.get():
                                hobby_txt.set(f"{hobby_txt.get()} и участия в соревнованиях")
                            else:
                                hobby_txt.set("участия в соревнованиях по ")
                        else:
                            if hobby_txt.get():
                                hobby_txt.set(f"{hobby_txt.get()}, {selected_button.get()}")
                            else:
                                hobby_txt.set(f"{selected_button.get()}")

                    def delete_new_hobby():
                        if not user.get('my_sport_section'):
                            messagebox.showinfo('Инфо', "Нет сохраненных данных")

                        else:
                            def delete_sport_section():
                                if data_base(command='delete_sport_section',
                                             delete_data=selected_delete_sport_section.get()):
                                    messagebox.showinfo("Инфо", "Запись удалена")
                                    delete_new_hobby_root.destroy()
                                    delete_new_hobby()
                                else:
                                    messagebox.showerror("Ошибка", "Запись не удалена")

                            delete_new_hobby_root = Toplevel()
                            delete_new_hobby_root.title('Удаление секций')
                            delete_new_hobby_root.config(bg='white')

                            selected_delete_sport_section = StringVar()

                            Label(delete_new_hobby_root, text="Выберите секцию для удаления",
                                  font=('Comic Sans MS', user.get('text_size')),
                                  bg='white').pack(fill='both', expand=True, padx=2, pady=2)
                            frame_delete_new_hobby = Frame(delete_new_hobby_root, borderwidth=1,
                                                           relief="solid", padx=4, pady=4)

                            col_, row_ = 0, 0
                            for sport_section in user.get('my_sport_section'):
                                if not isinstance(sport_section, str):
                                    sport_section = sport_section[0]

                                Radiobutton(frame_delete_new_hobby, text=sport_section,
                                            font=('Comic Sans MS', user.get('text_size')),
                                            value=f"{sport_section}", variable=selected_delete_sport_section,
                                            command=delete_sport_section, indicatoron=False,
                                            selectcolor='#77f1ff').grid(row=row_, column=col_, sticky='ew')
                                col_ += 1
                                if col_ == 5:
                                    col_ = 0
                                    row_ += 1
                            frame_delete_new_hobby.columnconfigure(index='all', minsize=40, weight=1)
                            frame_delete_new_hobby.rowconfigure(index='all', minsize=20)
                            frame_delete_new_hobby.pack(fill='both', expand=True, padx=2, pady=2)

                    if type_certificate == 'На кружки и секции':
                        frame_section = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)

                        frame = Frame(frame_section, borderwidth=1, relief="solid")
                        Label(frame, text='Не имеется медицинских противопоказаний для занятия:',
                              font=('Comic Sans MS', user.get('text_size')),
                              bg='white').pack(fill='both', expand=True)
                        Entry(frame, textvariable=hobby_txt,
                              width=150, font=('Comic Sans MS', user.get('text_size'))
                              ).pack(fill='both', expand=True)
                        frame.pack(fill='both', expand=True, padx=2, pady=2)



                        if user.get('my_sport_section'):
                            row, col = 0, 0
                            frame = Frame(frame_section, borderwidth=1, relief="solid")
                            Label(frame, text='Мои кружки и секции',
                                  font=('Comic Sans MS', user.get('text_size')),
                                  bg='white').grid(row=0, column=0, sticky='ew')

                            col += 1
                            for mark in user.get('my_sport_section'):
                                mark = mark[0]
                                btn = Radiobutton(frame, text=mark,
                                                  font=('Comic Sans MS', user.get('text_size')),
                                                  value=f"{mark}",
                                                  variable=selected_button, command=append_hobby,
                                                  indicatoron=False, selectcolor='#77f1ff')
                                btn.grid(ipadx=2, ipady=2, padx=2, pady=2, sticky='ew', row=row, column=col)

                                col += 1
                                if col == 5:
                                    col = 0
                                    row += 1

                            Button(frame, text='Редактировать мой список',
                                   command=delete_new_hobby,
                                   font=('Comic Sans MS', user.get('text_size'))
                                   ).grid(padx=2, pady=2, sticky='ew', row=row, column=col)

                            frame.columnconfigure(index='all', minsize=40, weight=1)
                            frame.rowconfigure(index='all', minsize=20)
                            frame.pack(fill='both', expand=True, padx=2, pady=2)

                        frame_but = Frame(frame_section, borderwidth=1, relief="solid")

                        for mark_group in all_data_certificate.get('sport_section'):
                            frame = Frame(frame_but)
                            for mark in mark_group:

                                Radiobutton(frame, text=mark,
                                          font=('Comic Sans MS', user.get('text_size')),
                                          value=f"{mark}",
                                          variable=selected_button, command=append_hobby,
                                          indicatoron=False, selectcolor='#77f1ff'
                                            ).pack(fill='both', expand=True, side='left')

                            frame.columnconfigure(index='all', minsize=40, weight=1)
                            frame.rowconfigure(index='all', minsize=20)
                            frame.pack(fill='both', expand=True, padx=2, pady=2)
                        frame_but.pack(fill='both', expand=True, padx=2, pady=2)

                        frame = Frame(frame_section, borderwidth=1, relief="solid")
                        Label(frame, text="Добавить кружок в избранное: ",
                              font=('Comic Sans MS', user.get('text_size')),
                              bg='white').pack(fill='both', expand=True, side='left')
                        Entry(frame, textvariable=new_hobby_txt,
                              width=50, font=('Comic Sans MS', user.get('text_size'))
                              ).pack(fill='both', expand=True, side='left')
                        Button(frame, text='Сохранить', command=save_new_hobby,
                               font=('Comic Sans MS', user.get('text_size'))
                               ).pack(fill='both', expand=True, side='left')
                        frame.pack(fill='both', expand=True, padx=2, pady=2)

                        frame_section.pack(fill='both', expand=True, padx=2, pady=2)

                        paste_diagnosis_frame()
                        for txt, marker, variable in (('Группа здоровья', 'group', selected_health_group),
                                                      ('Группа по физ-ре', 'physical', selected_fiz_group)):
                            frame = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)

                            Label(frame, text=f"{txt}:",
                                  font=('Comic Sans MS', user.get('text_size')), bg='white'
                                  ).pack(fill='both', expand=True, side='left')

                            for mark in all_data_certificate.get('health').get(marker):
                                Radiobutton(frame, text=mark,
                                            font=('Comic Sans MS', user.get('text_size')),
                                            value=mark, variable=variable,
                                            command=select_health, indicatoron=False, selectcolor='#77f1ff'
                                            ).pack(fill='both', expand=True, side='left')
                            frame.pack(fill='both', expand=True, padx=2, pady=2)


                    else:
                        frame = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)
                        Label(frame, text='Может работать по специальности:',
                              font=('Comic Sans MS', user.get('text_size')),
                              bg='white').pack(fill='both', expand=True, side='left')

                        Entry(frame, textvariable=job_txt, width=70,
                              font=('Comic Sans MS', user.get('text_size'))
                              ).pack(fill='both', expand=True, side='left')
                        frame.pack(fill='both', expand=True, padx=2, pady=2)

                        paste_diagnosis_frame()
                        for txt, marker, variable in (('Группа здоровья', 'group', selected_health_group),
                                                      ('Группа по физ-ре', 'physical', selected_fiz_group)):
                            frame = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)

                            Label(frame, text=f"{txt}:",
                                  font=('Comic Sans MS', user.get('text_size')), bg='white'
                                  ).pack(fill='both', expand=True, side='left')

                            for mark in all_data_certificate.get('health').get(marker):
                                Radiobutton(frame, text=mark,
                                            font=('Comic Sans MS', user.get('text_size')),
                                            value=mark, variable=variable,
                                            command=select_health, indicatoron=False, selectcolor='#77f1ff'
                                            ).pack(fill='both', expand=True, side='left')
                            frame.pack(fill='both', expand=True, padx=2, pady=2)


                if type_certificate == 'По выздоровлении':
                    def selected_combo_diagnosis(event=None):
                        if combo_diagnosis.get() == 'ребенок был в поликлинике на приеме у педиатра':
                            ori_until.set(datetime.now().strftime('%d.%m.%Y до %H:%M'))
                        else:
                            ori_until.set(datetime.now().strftime('%d.%m.%Y'))


                    frame_ori = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)

                    frame = Frame(frame_ori)
                    Label(frame, text="Диагноз:", font=('Comic Sans MS', user.get('text_size')),
                          bg='white').pack(fill='both', expand=True, padx=2, pady=2, side='left')

                    combo_diagnosis = Combobox(frame, width=40,
                                               font=('Comic Sans MS', user.get('text_size')))
                    combo_diagnosis['values'] = ['ОРИ', "ФРК", "Ветряная оспа",
                                                 "ребенок был в поликлинике на приеме у педиатра",
                                                 "ребенок был в поликлинике для вакцинации",
                                                 "лечение в стационаре"]
                    combo_diagnosis.current(0)
                    data['certificate']['combo_diagnosis'] = combo_diagnosis
                    combo_diagnosis.bind("<<ComboboxSelected>>", selected_combo_diagnosis)

                    combo_diagnosis.pack(fill='both', expand=True, padx=2, pady=2, side='left')
                    frame.pack(fill='both', expand=True, padx=2, pady=2)

                    frame = Frame(frame_ori)

                    Label(frame, text="c",
                          font=('Comic Sans MS', user.get('text_size')),
                          bg='white').pack(fill='both', expand=True, padx=2, pady=2, side='left')
                    Entry(frame, width=15, textvariable=ori_from,
                          font=('Comic Sans MS', user.get('text_size'))
                          ).pack(fill='both', expand=True, padx=2, pady=2, side='left')
                    # Label(frame,
                    #       text='',
                    #       image=user.get('сalendar_img'),
                    #       compound='bottom'
                    #       ).pack(fill='both', expand=True, side='left')

                    Radiobutton(frame, image=user.get('сalendar_img'),
                                font=('Comic Sans MS', user.get('text_size')),
                                value="ori_from__Болеет с ...",
                                variable=selected_button,
                                command=paste_calendar,
                                indicatoron=False, selectcolor='#77f1ff'
                                ).pack(side='left')

                    Label(frame, text="по",
                          font=('Comic Sans MS', user.get('text_size')), bg='white',
                          compound="center").pack(fill='both', expand=True, padx=2, pady=2, side='left')
                    Entry(frame, width=15, textvariable=ori_until,
                          font=('Comic Sans MS', user.get('text_size'))
                          ).pack(fill='both', expand=True, padx=2, pady=2, side='left')
                    ori_until.set(datetime.now().strftime("%d.%m.%Y"))

                    Radiobutton(frame, image=user.get('сalendar_img'),
                                font=('Comic Sans MS', user.get('text_size')),
                                value="ori_until__Болеет по ...",
                                variable=selected_button,
                                command=paste_calendar,
                                indicatoron=False, selectcolor='#77f1ff'
                                ).pack(side='left')
                    frame.pack(fill='both', expand=True, padx=2, pady=2)

                    frame = Frame(frame_ori)
                    Label(frame, text="Домашний режим до (включительно):",
                          font=('Comic Sans MS', user.get('text_size')),
                          bg='white', compound="center").pack(fill='both', expand=True, padx=2, pady=2, side='left')
                    Entry(frame, width=15, textvariable=ori_home_regime,
                          font=('Comic Sans MS', user.get('text_size'))
                          ).pack(fill='both', expand=True, padx=2, pady=2, side='left')
                    Radiobutton(frame, image=user.get('сalendar_img'),
                                font=('Comic Sans MS', user.get('text_size')),
                                value="ori_home_regime__Домашний режим до ...",
                                variable=selected_button,
                                command=paste_calendar,
                                indicatoron=False, selectcolor='#77f1ff'
                                ).pack(side='left')

                    frame.pack(fill='both', expand=True, padx=2, pady=2)

                    frame = Frame(frame_ori)

                    Label(frame, text="Допуск в детский коллектив с",
                          font=('Comic Sans MS', user.get('text_size')),
                          bg='white', compound="center").pack(fill='both', expand=True, padx=2, pady=2, side='left')
                    Entry(frame, width=15, textvariable=ori_add_to_childhood,
                          font=('Comic Sans MS', user.get('text_size'))
                          ).pack(fill='both', expand=True, padx=2, pady=2, side='left')
                    Radiobutton(frame, image=user.get('сalendar_img'),
                                font=('Comic Sans MS', user.get('text_size')),
                                value="ori_add_to_childhood__Допуск в детский коллектив с ...",
                                variable=selected_button,
                                command=paste_calendar,
                                indicatoron=False, selectcolor='#77f1ff'
                                ).pack(side='left')

                    frame.pack(fill='both', expand=True, padx=2, pady=2)

                    frame = Frame(frame_ori)
                    Label(frame, text="Освобождение от физкультуры на (дней):",
                          font=('Comic Sans MS', user.get('text_size')),
                          bg='white', compound="center").pack(fill='both', expand=True, padx=2, pady=2, side='left')


                    Entry(frame, width=15, textvariable=ori_fizra_days,
                          font=('Comic Sans MS', user.get('text_size'))
                          ).pack(fill='both', expand=True, padx=2, pady=2, side='left')
                    ori_fizra_days.set('семь')

                    frame.pack(fill='both', expand=True, padx=2, pady=2)


                    frame_ori.columnconfigure(index='all', minsize=40, weight=1)
                    frame_ori.rowconfigure(index='all', minsize=20)
                    frame_ori.pack(fill='both', expand=True, padx=2, pady=2)

                if type_certificate in ('Годовой медосмотр', 'Оформление в ДДУ / СШ / ВУЗ', 'В детский лагерь', 'Об усыновлении (удочерении)', 'Об отсутствии контактов', 'Бесплатное питание', 'О нуждаемости в сан-кур лечении'):


                    frame = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)
                    Label(frame, text="Ветрянка:",
                          font=('Comic Sans MS', user.get('text_size')),
                          bg='white').pack(fill='both', expand=True, side='left')


                    for mark in ["+", "-", "привит"]:
                        Radiobutton(frame, text=mark,
                                    font=('Comic Sans MS', user.get('text_size')),
                                    value=mark, variable=selected_chickenpox, command=select_chickenpox,
                                    indicatoron=False, selectcolor='#77f1ff'
                                    ).pack(fill='both', expand=True, side='left')

                    frame.pack(fill='both', expand=True, padx=2, pady=2)

                    frame_allergy = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)
                    frame = Frame(frame_allergy)
                    data['certificate']['type_cert_info'][type_certificate]['frame_allergy'] = frame_allergy
                    data['certificate']['type_cert_info'][type_certificate]['frame_allergy_txt'] = False

                    Label(frame, text="Аллергия:", font=('Comic Sans MS', user.get('text_size')),
                          bg='white').pack(fill='both', expand=True, side='left')

                    for mark in ["-", "+"]:
                        Radiobutton(frame, text=mark,
                                    font=('Comic Sans MS', user.get('text_size')),
                                    value=f"{mark}",
                                    variable=selected_allergy, command=select_allergy,
                                    indicatoron=False, selectcolor='#77f1ff'
                                    ).pack(fill='both', expand=True, side='left')
                    frame.pack(fill='both', expand=True)
                    frame_allergy.pack(fill='both', expand=True, padx=2, pady=2)



                    if type_certificate == 'Оформление в ДДУ / СШ / ВУЗ':

                        frame_injury_operation = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)
                        data['certificate']['type_cert_info'][type_certificate]['frame_injury'] = frame_injury_operation
                        data['certificate']['type_cert_info'][type_certificate]['frame_injury_txt'] = False

                        frame = Frame(frame_injury_operation, borderwidth=1, relief="solid", padx=2, pady=2)
                        Label(frame, text="Травмы и операции:",
                              font=('Comic Sans MS', user.get('text_size')),
                              bg='white').pack(fill='both', expand=True, side='left')
                        for mark in ("-", "+"):
                            Radiobutton(frame, text=mark,
                                        font=('Comic Sans MS', user.get('text_size')),
                                        value=f"{mark}",
                                        variable=selected_injury_operation,
                                        command=select_injury_operation,
                                        indicatoron=False, selectcolor='#77f1ff'
                                        ).pack(fill='both', expand=True, side='left')

                        frame.pack(fill='both', expand=True, padx=2, pady=2)
                        frame_injury_operation.pack(fill='both', expand=True, padx=2, pady=2)

                    if type_certificate in ('Годовой медосмотр', 'Оформление в ДДУ / СШ / ВУЗ',
                                            'В детский лагерь', 'Об усыновлении (удочерении)'):

                        frame = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)
                        Label(frame, text="Осанка:",
                              font=('Comic Sans MS', user.get('text_size')),
                              bg='white').pack(fill='both', expand=True, side='left')


                        for mark in ["в норме", "нарушена", "ГПС"]:
                            Radiobutton(frame, text=mark,
                                        font=('Comic Sans MS', user.get('text_size')),
                                        value=mark, variable=posture, command=select_posture,
                                        indicatoron=False, selectcolor='#77f1ff'
                                        ).pack(fill='both', expand=True, side='left')

                        frame.pack(fill='both', expand=True, padx=2, pady=2)


                if type_certificate in ('Годовой медосмотр', 'Оформление в ДДУ / СШ / ВУЗ', 'В детский лагерь', 'Об усыновлении (удочерении)'):

                    frame_body = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)
                    frame = Frame(frame_body, borderwidth=1, relief="solid", padx=2, pady=2)
                    for text, var in (('ЧД:', patient_br),
                                              ('    ЧСС:', patient_hr),
                                              ('    Температура:', patient_temp)):
                        Label(frame, text=text, bg='white',
                              font=('Comic Sans MS', user.get('text_size'))
                              ).pack(fill='both', expand=True, side='left')

                        Entry(frame, width=10, textvariable=var,
                              font=('Comic Sans MS', user.get('text_size')),
                              justify="center",
                              ).pack(fill='both', expand=True, side='left')

                    frame.pack(fill='both', expand=True, padx=2, pady=2)

                    frame = Frame(frame_body, borderwidth=1, relief="solid", padx=2, pady=2)

                    for text, marker, var in (('Рост (см):', 'height', height),
                                              ('    Вес (кг):', 'weight', weight)):
                        check = (certificate_main_root.register(check_anthro), "%P", f"{marker}")

                        Label(frame, text=text, bg='white',
                              font=('Comic Sans MS', user.get('text_size'))
                              ).pack(fill='both', expand=True, side='left')

                        Entry(frame, width=10, textvariable=var,
                              font=('Comic Sans MS', user.get('text_size')),
                              justify="center",
                              validate="key",
                              validatecommand=check
                              ).pack(fill='both', expand=True, side='left')


                    if type_certificate in ('Годовой медосмотр', 'Оформление в ДДУ / СШ / ВУЗ', 'В детский лагерь'):
                        Label(frame, text="    Зрение:",
                              font=('Comic Sans MS', user.get('text_size')), bg='white'
                              ).pack(fill='both', expand=True, side='left')
                        Entry(frame, width=10, textvariable=vision, justify="center",
                              font=('Comic Sans MS', user.get('text_size'))
                              ).pack(fill='both', expand=True, side='left')
                        if age.get('year') >= 4:
                            vision.set('1.0/1.0')
                        else:
                            vision.set('предметное')

                        Label(frame, text="    АД:",
                              font=('Comic Sans MS', user.get('text_size')), bg='white'
                              ).pack(fill='both', expand=True, side='left')
                        Entry(frame, width=10, textvariable=patient_bp, justify="center",
                              font=('Comic Sans MS', user.get('text_size'))
                              ).pack(fill='both', expand=True, side='left')


                    frame.pack(fill='both', expand=True, padx=2, pady=2)
                    frame_body.pack(fill='both', expand=True, padx=2, pady=2)


                    frame = Frame(frame_body, borderwidth=1, relief="solid", padx=2, pady=2)
                    Label(frame, text="Физическое развитие: ",
                          font=('Comic Sans MS', user.get('text_size')), bg='white'
                          ).pack(fill='both', expand=True)
                    Entry(frame, width=100, textvariable=patient_anthropometry,
                          font=('Comic Sans MS', user.get('text_size'))
                          ).pack(fill='both', expand=True)

                    frame.pack(fill='both', expand=True, padx=2, pady=2)

                    paste_diagnosis_frame()

                    for txt, marker, variable in (('Группа здоровья', 'group', selected_health_group),
                                                  ('Группа по физ-ре', 'physical', selected_fiz_group),
                                                  ('Режим', 'regime', regime_vars),
                                                  ('Стол', 'diet', selected_diet),
                                                  ('Парта', 'desk', desk_vars)):
                        frame = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)

                        Label(frame, text=f"{txt}:",
                              font=('Comic Sans MS', user.get('text_size')), bg='white'
                                ).pack(fill='both', expand=True, side='left')

                        for mark in all_data_certificate.get('health').get(marker):
                            if marker in ('group', 'physical', 'diet'):
                                Radiobutton(frame, text=mark,
                                            font=('Comic Sans MS', user.get('text_size')),
                                            value=mark, variable=variable,
                                            command=select_health, indicatoron=False, selectcolor='#77f1ff'
                                            ).pack(fill='both', expand=True, side='left')
                            else:
                                Checkbutton(frame, text=mark,
                                            font=('Comic Sans MS', user.get('text_size')),
                                            variable=variable.get(mark), command=select_health,
                                            onvalue=1, offvalue=0, indicatoron=False, selectcolor='#77f1ff'
                                            ).pack(fill='both', expand=True, side='left')

                        frame.pack(fill='both', expand=True, padx=2, pady=2)

                    if type_certificate == 'Годовой медосмотр':
                        frame = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)
                        Label(frame, text="Печатать карту диспансеризации",
                              font=('Comic Sans MS', user.get('text_size')),
                              bg='white').pack(fill='both', expand=True, side='left')


                        for mark in ["Да", "Нет"]:
                            Radiobutton(frame, text=mark,
                                        font=('Comic Sans MS', user.get('text_size')),
                                        value=mark, variable=dispanser_card,
                                        indicatoron=False, selectcolor='#77f1ff'
                                        ).pack(fill='both', expand=True, side='left')
                        frame.pack(fill='both', expand=True, padx=2, pady=2)



                if type_certificate == 'О нуждаемости в сан-кур лечении':
                    def select_profile():
                        result = list()
                        for regime in sanatorium_profile:
                            if sanatorium_profile.get(regime).get() == 1:
                                result.append(regime)
                        data['certificate']['sanatorium_profile'] = result

                    paste_diagnosis_frame()
                    frame_profiles = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)

                    Label(frame_profiles, text="Профиль санатория:",
                          font=('Comic Sans MS', user.get('text_size')), bg='white'
                          ).pack(fill='both', expand=True)


                    for profiles in (('Болезни органов дыхания', 'Болезни органов пищеварения'),
                                    ('Болезни нервной системы', 'Болезни костно-мышечной системы и соединительной ткани'),
                                    ('Болезни мочеполовой системы', 'Болезни системы кровообращения', 'Болезни эндокринной системы, нарушения обмена веществ'),
                                    ('Болезни кожи и подкожной клетчатки', 'Болезни глаза и его придаточного аппарата')):
                        frame = Frame(frame_profiles)
                        for profile in profiles:
                            sanatorium_profile[profile] = IntVar()
                            Checkbutton(frame, text=profile,
                                        font=('Comic Sans MS', user.get('text_size')),
                                        variable=sanatorium_profile.get(profile),
                                        command=select_profile,
                                        onvalue=1, offvalue=0, indicatoron=False, selectcolor='#77f1ff'
                                        ).pack(fill='both', expand=True, side='left')
                        frame.pack(fill='both', expand=True)
                    frame_profiles.pack(fill='both', expand=True)

                if type_certificate == 'ЦКРОиР':
                    def set_default():
                        diagnosis = data['certificate']['type_cert_info']["ЦКРОиР"].get('ЦКРОиР_add_med_info')
                        diagnosis.delete(1.0, 'end')
                        diagnosis.insert(1.0, all_data_certificate['all_info']['ЦКРОиР'].get('additional_medical_information'))
                        for doctors, diagnosis in (('Невролог', 'Без очаговой патологии'),
                                                   ('Офтальмолог', 'Без патологии'),
                                                   ('ЛОР', 'Без патологии'),
                                                   ('Логопед', 'ОНР ( __ ур. р. р.)')):
                            data['certificate']['type_cert_info']['ЦКРОиР'][f"{doctors}_txt"].set(diagnosis)

                    "Для логопедической комиссии (ЦКРОиР)"
                    frame_add_info = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)
                    frame = Frame(frame_add_info)
                    Label(frame, text="Данные о развитии:",
                          font=('Comic Sans MS', user.get('text_size')), bg='white'
                          ).pack(fill='both', expand=True, side='left')
                    Button(frame, text='Вернуть данные по умолчанию',
                           command=set_default,
                           font=('Comic Sans MS', user.get('text_size'))
                           ).pack(fill='both', expand=True, side='left')

                    frame.pack(fill='both', expand=True, padx=2, pady=2)

                    frame = Frame(frame_add_info)

                    diagnosis = ScrolledText(frame, width=80, height=8,
                                             font=('Comic Sans MS', user.get('text_size')), wrap="word")
                    diagnosis.pack(fill='both', expand=True)
                    diagnosis.insert(1.0, all_data_certificate['all_info']['ЦКРОиР'].get('additional_medical_information'))
                    data['certificate']['type_cert_info'][type_certificate]['ЦКРОиР_add_med_info'] = diagnosis
                    frame.pack(fill='both', expand=True, padx=2, pady=2)
                    frame_add_info.pack(fill='both', expand=True, padx=2, pady=2)

                    for doctors, diagnosis in (('Невролог', 'Без очаговой патологии'),
                                               ('Офтальмолог', 'Без патологии'),
                                               ('ЛОР', 'Без патологии'),
                                               ('Логопед', 'ОНР ( __ ур. р. р.)')):
                        frame = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)
                        Label(frame, text=f"{doctors}:",
                              font=('Comic Sans MS', user.get('text_size')), bg='white'
                              ).pack(fill='both', expand=True, side='left')
                        data['certificate']['type_cert_info'][type_certificate][f"{doctors}_txt"] = StringVar()
                        data['certificate']['type_cert_info'][type_certificate][f"{doctors}_txt"].set(diagnosis)
                        Radiobutton(frame, image=user.get('сalendar_img'),
                                    font=('Comic Sans MS', user.get('text_size')),
                                    value=f"{type_certificate}-{doctors}_txt__{type_certificate} - {doctors}",
                                    variable=selected_button,
                                    command=paste_calendar,
                                    indicatoron=False, selectcolor='#77f1ff'
                                    ).pack(side='left')

                        Entry(frame, width=50,
                              textvariable=data['certificate']['type_cert_info'][type_certificate].get(f"{doctors}_txt"),
                              font=('Comic Sans MS', user.get('text_size'))
                              ).pack(fill='both', expand=True, side='left')
                        frame.pack(fill='both', expand=True, padx=2, pady=2)

                    paste_diagnosis_frame()

                if type_certificate in ("На кружки и секции", "ЦКРОиР", "Об отсутствии контактов",
                                        "О нуждаемости в сан-кур лечении", "Может работать по специальности...",
                                        "Бесплатное питание"):
                    frame = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)
                    Label(frame, text="Печатать вкладыш в карту",
                          font=('Comic Sans MS', user.get('text_size')),
                          bg='white').pack(fill='both', expand=True, side='left')

                    for mark in ["Да", "Нет"]:
                        Radiobutton(frame, text=mark,
                                    font=('Comic Sans MS', user.get('text_size')),
                                    value=mark, variable=examination_blank,
                                    indicatoron=False, selectcolor='#77f1ff'
                                    ).pack(fill='both', expand=True, side='left')
                    frame.pack(fill='both', expand=True, padx=2, pady=2)

                def paste_validaty_period():
                    frame = Frame(master_frame, borderwidth=1, relief="solid", padx=4, pady=4)
                    Label(frame, text="Дата выдачи:",
                          font=('Comic Sans MS', user.get('text_size')), bg='white'
                          ).pack(fill='both', expand=True, side='left')
                    Entry(frame, width=15,
                          textvariable=date_of_issue,
                          font=('Comic Sans MS', user.get('text_size'))
                          ).pack(fill='both', expand=True, side='left')
                    Radiobutton(frame, image=user.get('сalendar_img'),
                                font=('Comic Sans MS', user.get('text_size')),
                                value="date_of_issue__Дата выдачи справки...",
                                variable=selected_button,
                                command=paste_calendar,
                                indicatoron=False, selectcolor='#77f1ff'
                                ).pack(side='left')
                    data['certificate']['type_cert_info'][type_certificate]['validity_period'] = StringVar()
                    if all_data_certificate['all_info'].get(type_certificate).get('validity_period'):
                        data['certificate']['type_cert_info'][type_certificate]['validity_period'].set(
                            all_data_certificate['all_info'].get(type_certificate).get('validity_period'))
                    else:
                        try:
                            date = patient.get('birth_date')
                            day, month, year = date.split('.')
                            date = datetime.strptime(f"{day}.{month}.{datetime.now().year}", "%d.%m.%Y")
                            if date < datetime.now():
                                day, month, year = date.strftime("%d.%m.%Y").split('.')
                                year = int(year) + 1
                                date = datetime.strptime(f"{day}.{month}.{year}", "%d.%m.%Y")

                            if (date - datetime.now()).total_seconds() < 5356800:
                                day, month, year = date.strftime("%d.%m.%Y").split('.')
                                year = int(year) + 1
                                date = datetime.strptime(f"{day}.{month}.{year}", "%d.%m.%Y")
                            date = (date - timedelta(days=1)).strftime("%d.%m.%Y")

                            data['certificate']['type_cert_info'][type_certificate]['validity_period'].set(f"до {date}")
                        except Exception:
                            data['certificate']['type_cert_info'][type_certificate]['validity_period'].set('1 год')

                    Label(frame, text="    Срок действия:",
                          font=('Comic Sans MS', user.get('text_size')), bg='white'
                          ).pack(fill='both', expand=True, side='left')
                    Entry(frame, width=30,
                          textvariable=data['certificate']['type_cert_info'][type_certificate].get('validity_period'),
                          font=('Comic Sans MS', user.get('text_size'))
                          ).pack(fill='both', expand=True, side='left')
                    frame.pack(fill='both', expand=True, padx=2, pady=2)

                paste_validaty_period()
                Radiobutton(master_frame, text="\n< < < Создать справку > > >\n",
                            font=('Comic Sans MS', user.get('text_size')),
                            value=type_certificate,
                            variable=selected_button,
                            command=create_certificate,
                            indicatoron=False, selectcolor='#36566d',
                            bg="#36566d",
                            fg='white',
                            ).pack(fill='both', expand=True)
                frame.pack(fill='both', expand=True)

            certificate_main_root.update_idletasks()
            certificate_main_root.geometry('+0+0')

            start_action(upload_last_data)
            selected_button.set('')
            data['certificate']['frame_type_cert_but'].pack(fill='both', expand=True, padx=2, pady=2)


        create_type_cert_frames()


def analyzes_cmd():
    if not patient.get('name'):
        messagebox.showinfo('Ошибка', "Не выбран пациент!")
    else:
        data.clear()
        render_data.clear()

        data['text_size'] = user.get('text_size')
        data['patient_name'] = patient.get('name', '')
        data['birth_date'] = patient.get('birth_date', '')
        data['gender'] = patient.get('gender', '')
        data['amb_cart'] = patient.get('amb_cart', '')
        data['patient_district'] = patient.get('patient_district', '')
        data['address'] = patient.get('address', '')

        data['doctor_name'] = user.get('doctor_name', '')
        data['ped_div'] = user.get('ped_div', '')

        analyzes__ask_analyzes()


def analyzes__ask_analyzes():
    analyzes_root = Toplevel()
    analyzes_root.title('Выбор анализов')
    analyzes_root.config(bg='white')
    analyzes_root.geometry('+0+0')

    def analyzes__create_doc(analyzes):
        render_data['ped_div'] = data.get('ped_div')
        render_data['district'] = data.get('patient_district')
        render_data['doc_name'] = data.get('doctor_name')
        render_data['name'] = data.get('patient_name')
        render_data['birth_date'] = data.get('birth_date')
        render_data['address'] = data.get('address')
        render_data['gender'] = data.get('gender')
        render_data['date'] = datetime.now().strftime("%d.%m.%Y")
        render_data['amb_cart'] = data.get('amb_cart')
        render_data['diagnosis'] = diagnosis.get()

        if 'ОАК' in analyzes.get('blood', []) \
                and ('ОАК + ФОРМУЛА' in analyzes.get('blood', [])
                     or 'ОАК + СВЕРТЫВАЕМОСТЬ' in analyzes.get('blood', [])):
            pass
            analyzes['blood'].remove('ОАК')

        if 'ГЕПАТИТ' in analyzes.get('blood-inf', []):
            with sq.connect(f".{os.sep}data_base{os.sep}patient_data_base.db") as conn:
                cur = conn.cursor()
                cur.execute(f"SELECT Прививки FROM patient_data WHERE amb_cart LIKE '{data.get('amb_cart')}'")
                vaccination = cur.fetchone()[0]
            if vaccination:
                vaccination = vaccination.split('\n')
                start = vaccination.index('Прививки против гепатита В')
                stop = vaccination.index('Прививки против кори, эпидемического паротита и краснухи')
                text = ''
                counter = 0
                for index in range(start + 1, stop):
                    counter += 1
                    if counter % 2 == 0:
                        end = '\n'
                    else:
                        end = '\t\t'

                    index_str = vaccination[index].split('__')
                    text += f"V_{counter}: {index_str[1]} --- {index_str[3]} --- {index_str[6]}{end}"
                if not text:
                    text = 'Нет данных о вакцинации\n'

            else:
                text = 'Нет данных о вакцинации\n'

            render_data['VGB_vaccination'] = text

        if 'МАЗОК НА КОВИД' in analyzes.get('swab', []):

            with sq.connect(f".{os.sep}data_base{os.sep}patient_data_base.db") as conn:
                cur = conn.cursor()
                cur.execute(f"SELECT Домашний_телефон FROM patient_data WHERE amb_cart LIKE '{data.get('amb_cart')}'")

                phone = cur.fetchone()
            if phone:
                render_data['phone'] = phone[0]
            else:
                render_data['phone'] = '__________________________'

        all_links = list()
        for category in analyzes:
            for anal in analyzes.get(category):
                doc = DocxTemplate(f".{os.sep}example{os.sep}{category}{os.sep}{anal}.docx")
                doc.render(render_data)
                doc.save(f".{os.sep}generated{os.sep}{anal}.docx")
                all_links.append(f".{os.sep}generated{os.sep}{anal}.docx")

        master = Document(all_links.pop(0))
        composer = Composer(master)
        for link in all_links:
            master.add_page_break()
            doc_temp = Document(link)
            composer.append(doc_temp)
        doc_name = f".{os.sep}generated{os.sep}Анализы.docx"
        doc_name = save_document(doc=composer, doc_name=doc_name)

        # composer.save(")
        run_document(doc_name)
        data_base(command="statistic_write",
                  insert_data="Анализы")
        render_data.clear()
        data.clear()

    def create_analyzes():
        user_analyzes = dict()
        for category_b in all_blanks_anal:
            for analyzes_lbl in analyzes_vars.get(category_b):
                if analyzes_vars[category_b].get(analyzes_lbl).get() == 1:
                    if not user_analyzes.get(category_b):
                        user_analyzes[category_b] = list()
                    user_analyzes[category_b].append(analyzes_lbl)
        analyzes_root.quit()
        analyzes_root.destroy()
        analyzes__create_doc(user_analyzes)

    def select_analyzes():
        for category_b in all_blanks_anal:
            for analyzes_lbl in analyzes_vars.get(category_b):
                if analyzes_vars[category_b].get(analyzes_lbl).get() == 1:
                    active_btn = analyzes_buttons.get(analyzes_lbl)
                    active_btn['text'] = f"✔{analyzes_lbl}"
                    active_btn['bg'] = '#2efefa'
                else:
                    active_btn = analyzes_buttons.get(analyzes_lbl)
                    active_btn['text'] = f"{analyzes_lbl}"
                    active_btn['bg'] = '#cdcdcd'

    def select_category_analyzes():

        for analyzes_lbl in analyzes_category_vars:
            if analyzes_category_vars.get(analyzes_lbl).get() == 1:
                if analyzes_lbl == 'ОАК  +  ФОРМУЛА':
                    active_btn = analyzes_buttons.get("ОАК + ФОРМУЛА")
                    active_btn['text'] = f"✔{analyzes_lbl}"
                    active_btn['bg'] = '#2efefa'
                    analyzes_vars['blood']['ОАК + ФОРМУЛА'].set(1)

                else:
                    for button in analyzes_lbl.split(' + '):
                        active_btn = analyzes_buttons.get(button)
                        active_btn['text'] = f"✔{button}"
                        active_btn['bg'] = '#2efefa'

                        for category_b in all_blanks_anal:
                            if button in all_blanks_anal.get(category_b):
                                active_btn = analyzes_vars[category_b].get(button)
                                active_btn.set(1)

    def pack_diagnosis_frame():
        frame = Frame(analyzes_root)
        Label(frame, text='Диагноз:',
              font=('Comic Sans MS', user.get('text_size')),
              bg='white').pack(fill='both', expand=True, padx=2, pady=2, side='left')
        Entry(frame, width=30,
              textvariable=diagnosis,
              font=('Comic Sans MS', user.get('text_size'))
              ).pack(fill='both', expand=True, padx=2, pady=2, side='left')
        frame.pack(fill='both', expand=True, padx=2, pady=2)
        frame = Frame(analyzes_root)

        for but_name in ('ОРИ', "ФРК", "ИМВП", "Анемия", "Профосмотр"):
            Radiobutton(frame, text=but_name,
                        font=('Comic Sans MS', user.get('text_size')),
                        value=but_name, variable=diagnosis,
                        # command=select_where,
                        indicatoron=False, selectcolor='#77f1ff'
                        ).pack(fill='both', expand=True, padx=2, pady=2, side='left')
        frame.pack(fill='both', expand=True, padx=2, pady=2)


    analyzes_vars = dict()
    analyzes_buttons = dict()
    diagnosis = StringVar()

    Label(analyzes_root, text='Выберите анализы',
          font=('Comic Sans MS', user.get('text_size')), bg='white').pack(fill='both', expand=True,
                                                                          padx=2, pady=2)

    for category in all_blanks_anal:
        analyzes_vars[category] = dict()
        for analyzes in all_blanks_anal.get(category)[1:]:
            analyzes_vars[category][analyzes] = IntVar()

    analyzes_category_vars = dict()
    for analyzes in all_blanks_anal.get('add')[1:]:
        analyzes_category_vars[analyzes] = IntVar()

    for category in all_blanks_anal:
        frame = Frame(analyzes_root, borderwidth=1, relief="solid", padx=4, pady=4)

        row, col = 1, 0
        Label(frame, text=f"{all_blanks_anal.get(category)[0]}",
              font=('Comic Sans MS', user.get('text_size')), bg='white').grid(column=0, row=0, columnspan=3,
                                                                              sticky='ew')
        if category == 'add':

            for analyzes in all_blanks_anal.get(category)[1:]:
                btn = Checkbutton(frame, text=analyzes,
                                  font=('Comic Sans MS', user.get('text_size')),
                                  variable=analyzes_category_vars.get(analyzes), command=select_category_analyzes,
                                  onvalue=1, offvalue=0, indicatoron=False, selectcolor='#77f1ff', bg='#cdcdcd')
                btn.grid(row=row, column=col, sticky='ew')
                analyzes_buttons[analyzes] = btn
                col += 1
                if col == 3:
                    row += 1
                    col = 0

        else:
            for analyzes in all_blanks_anal.get(category)[1:]:

                btn = Checkbutton(frame, text=analyzes,
                                  font=('Comic Sans MS', user.get('text_size')),
                                  variable=analyzes_vars[category].get(analyzes), command=select_analyzes,
                                  onvalue=1, offvalue=0, indicatoron=False, selectcolor='#77f1ff', bg='#cdcdcd')
                btn.grid(row=row, column=col, sticky='ew')
                analyzes_buttons[analyzes] = btn
                col += 1
                if col == 3:
                    row += 1
                    col = 0

        frame.columnconfigure(index='all', minsize=40, weight=1)
        frame.rowconfigure(index='all', minsize=20)
        frame.pack(fill='both', expand=True, padx=2, pady=2)
    pack_diagnosis_frame()

    Button(analyzes_root, text='Создать документ', command=create_analyzes,
           font=('Comic Sans MS', user.get('text_size'))).pack(fill='both', expand=True, padx=2, pady=2)

    analyzes_root.mainloop()


def vaccination_cmd():
    file_name_vac = create_vaccination(user_id=patient.get('amb_cart'), size=5)
    if file_name_vac:
        os.system(f"start {file_name_vac}")
    else:
        messagebox.showinfo('Ошибка!', 'Не удалось создать прививки!')


def blanks_cmd():
    if not patient.get('name'):
        messagebox.showinfo('Ошибка', "Не выбран пациент!")
        return


    data['blanks'] = dict()

    type_blanks_root = Toplevel()
    type_blanks_root.title('Выбор бланков')
    type_blanks_root.config(bg='white')
    type_blanks_root.geometry('+0+0')

    blank_name = StringVar()
    weight = StringVar()
    height = StringVar()
    vision = StringVar()
    blood_p = StringVar()
    type_disp_card = StringVar()
    type_disp_card.set("Короткая")
    imt = StringVar()

    def is_valid__anthro(num, type_anthro):
        weight_loc, height_loc = None, None

        if type_anthro == 'Вес':
            weight_loc = num
            height_loc = height.get()
        if type_anthro == 'Рост':
            weight_loc = num
            height_loc = weight.get()

        if height_loc and weight_loc:
            try:
                height_loc = float(height_loc.replace(',', '.'))
                weight_loc = float(weight_loc.replace(',', '.'))
                imt_loc = round(weight_loc / (height_loc/100)**2, 1)
                imt.set(f"{imt_loc}")
            except Exception:
                imt.set('')
        else:
            imt.set('')



        return True

    def select_blank_name():
        if data['blanks'].get('add_frame'):
            data['blanks']['add_frame'].destroy()
            data['blanks']['add_frame'] = None
            add_frame.configure(height=1)
        if blank_name.get() == "Диспансеризация":
            frame_disp = Frame(add_frame)
            local_data = (
                ('Рост', height),
                ('Вес', weight),
                ('Зрение', vision),
                ("Давление", blood_p),
                ("ИМТ", imt),
            )
            frame = Frame(frame_disp)
            for lbl_name, var in local_data:
                Label(frame, text=f"{lbl_name}: ",
                      font=('Comic Sans MS', user.get('text_size')),
                      ).pack(fill='both', expand=True, side='left')

                txt = Entry(frame, width=15,
                      textvariable=var,
                      justify="center",
                      font=('Comic Sans MS', user.get('text_size'))
                      )
                if lbl_name in ('Рост', 'Вес'):
                    check_anthro = (type_blanks_root.register(is_valid__anthro), "%P", lbl_name)
                    txt.configure(validatecommand=check_anthro, validate="all")

                txt.pack(fill='both', expand=True, side='left')
            frame.pack(fill='both', expand=True, padx=2, pady=2)

            frame = Frame(frame_disp)
            Label(frame, text="Какую диспасеризацию печатать: ",
                  font=('Comic Sans MS', user.get('text_size')),
                  ).pack(fill='both', expand=True, side='left')
            for but_name in ("Короткая", "Полная", "Лицевая_сторона", "Оборот"):
                Radiobutton(frame, text=but_name.replace('_', ' '),
                            font=('Comic Sans MS', user.get('text_size')),
                            value=but_name, variable=type_disp_card,
                            indicatoron=False, selectcolor='#77f1ff'
                            ).pack(fill='both', expand=True, padx=2, pady=2, side='left')
            frame.pack(fill='both', expand=True, padx=2, pady=2)

            frame_disp.pack(fill='both', expand=True)
            data['blanks']['add_frame'] = frame_disp


    def create_blanks():

        if not blank_name.get():
            messagebox.showinfo('Ошибка', "Не выбран бланк!")
            return
        render_data.clear()
        render_data['ped_div'] = user.get('ped_div')
        render_data['doc_name'] = user.get('doctor_name')
        render_data['district'] = patient.get('patient_district')
        render_data['name'] = patient.get('name')
        render_data['birth_date'] = patient.get('birth_date')
        render_data['address'] = patient.get('address')
        render_data['gender'] = patient.get('gender')
        render_data['date'] = datetime.now().strftime("%d.%m.%Y")
        render_data['amb_cart'] = patient.get('amb_cart')
        render_data['age'] = patient['age'].get('age_txt')

        doc_name = f".{os.sep}example{os.sep}амб_карта{os.sep}{blank_name.get()}.docx"
        if blank_name.get() == 'Диспансеризация':

            local_data = (
                ("imt", imt),
                ('height', height),
                ('weight', weight),
                ('disp_visus', vision),
                ("bp", blood_p)


            )
            render_data['year'] = datetime.now().strftime("%Y")
            render_data['disp_diagnosis'] = f"\n{'_' * 40}\n{'_' * 40}\n{'_' * 40}\n{'_' * 40}\n{'_' * 40}"
            render_data['disp_health'] = "________"
            render_data['disp_group'] = "________________"


            for lbl_name, var in local_data:
                render_data[lbl_name] = var.get()
                var.set('')

            doc_name = f".{os.sep}example{os.sep}амб_карта{os.sep}{blank_name.get()}_{type_disp_card.get()}.docx"

        doc = DocxTemplate(doc_name)
        doc.render(render_data)
        file_name = f".{os.sep}generated{os.sep}{blank_name.get()}_{patient.get('name').split()[0]}.docx"
        file_name = save_document(doc=doc, doc_name=file_name)
        run_document(file_name)
        data_base(command="statistic_write",
                  insert_data="Вкладыши")
        if render_data.get('height') and render_data.get('weight') and render_data.get('disp_visus'):
            active_examination = f"Кабинет доврачебного приема\n" \
                                 f"Рост: {render_data.get('height')}; " \
                                 f"Вес: {render_data.get('weight')}; " \
                                 f"Зрение: {render_data.get('disp_visus')}; " \
                                 f"АД: {render_data.get('bp')}; " \
                                 f"ИМТ: {render_data.get('imt')}"

            active_but = f"type_examination:____certificate__<end!>__\n" \
                            f"patient_anthro:____" \
                            f"height__{render_data.get('height')}____" \
                            f"weight__{render_data.get('weight')}____" \
                            f"vision__{render_data.get('disp_visus')}____" \
                            f"__<end!>__\n"

            save_info_examination = [
                f"{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
                f"{user.get('doctor_name')}",
                'loc',
                '',
                f"{patient.get('name').strip()}__{patient.get('birth_date').strip()}",
                active_examination,
                active_but,
                'certificate']

            answer, message = data_base(command='examination__save',
                                        insert_data=save_info_examination)
        render_data.clear()

    Label(type_blanks_root, text='Какие бланки создать?',
          font=('Comic Sans MS', user.get('text_size')),
          bg="#36566d", fg='white'
          ).pack(fill='both', expand=True, padx=2, pady=2)
    for blanks_list in blanks:
        frame = Frame(type_blanks_root)
        for but_name in blanks_list:
            Radiobutton(frame, text=but_name.replace('_', ' '),
                        font=('Comic Sans MS', user.get('text_size')),
                        value=but_name, variable=blank_name,
                        command=select_blank_name,
                        indicatoron=False, selectcolor='#77f1ff'
                        ).pack(fill='both', expand=True, padx=2, pady=2, side='left')
        frame.pack(fill='both', expand=True, padx=2)

    add_frame = Frame(type_blanks_root)
    add_frame.pack(fill='both', expand=True, padx=2, pady=2)
    Button(type_blanks_root, text='Создать бланк', command=create_blanks,
           font=('Comic Sans MS', user.get('text_size'))
           ).pack(fill='both', expand=True, padx=2, pady=2)


def direction_cmd():
    if not patient.get('name'):
        messagebox.showinfo('Ошибка', "Не выбран пациент!")
    else:
        data.clear()
        render_data.clear()

        data['text_size'] = user.get('text_size')
        data['patient_name'] = patient.get('name', '')
        data['birth_date'] = patient.get('birth_date', '')
        data['gender'] = patient.get('gender', '')
        data['amb_cart'] = patient.get('amb_cart', '')
        data['patient_district'] = patient.get('patient_district', '')
        data['address'] = patient.get('address', '')

        data['doctor_name'] = user.get('doctor_name', '')
        data['ped_div'] = user.get('ped_div', '')
        direction__ask_type_blanks()


def direction__ask_type_blanks():
    type_direct = ('НА ГОСПИТАЛИЗАЦИЮ', 'НА КОНСУЛЬТАЦИЮ', 'НА РЕНТГЕНОГРАММУ')

    type_blanks_root = Toplevel()
    type_blanks_root.title('Направление')
    type_blanks_root.config(bg='white')

    frame_where = Frame(type_blanks_root, borderwidth=1, relief="solid", padx=4, pady=4)
    Label(frame_where, text="Тип направления:",
          font=('Comic Sans MS', user.get('text_size')), bg='white').grid(column=0, row=0)

    selected_where = StringVar()

    def select_where():
        type_direction = selected_where.get()
        data['type_direction'] = type_direction

        if type_direction == 'НА ГОСПИТАЛИЗАЦИЮ':
            frame_hospital.pack(fill='both', expand=True, padx=2, pady=2)
            but_create_doc.pack(fill='both', expand=True, padx=2, pady=2)

        elif type_direction == 'НА КОНСУЛЬТАЦИЮ':
            frame_hospital.pack(fill='both', expand=True, padx=2, pady=2)
            frame_doctor.pack(fill='both', expand=True, padx=2, pady=2)
            but_create_doc.pack(fill='both', expand=True, padx=2, pady=2)
        else:
            type_blanks_root.quit()
            type_blanks_root.destroy()
            direction__create_direction()

    for mark in type_direct:
        btn = Radiobutton(frame_where, text=mark,
                          font=('Comic Sans MS', user.get('text_size')),
                          value=mark, variable=selected_where,
                          command=select_where, indicatoron=False, selectcolor='#77f1ff')
        btn.grid(row=0, column=(type_direct.index(mark) + 1), sticky='ew')

    frame_where.columnconfigure(index='all', minsize=40, weight=1)
    frame_where.rowconfigure(index='all', minsize=20)
    frame_where.pack(fill='both', expand=True, padx=2, pady=2)

    frame_hospital = Frame(type_blanks_root, borderwidth=1, relief="solid", padx=4, pady=4)
    Label(frame_hospital, text="Куда направить:",
          font=('Comic Sans MS', user.get('text_size')), bg='white').grid(column=0, row=0, columnspan=5)

    selected_hospital = StringVar()

    def select_hospital():
        data['hospital'] = selected_hospital.get()

    row, col = 1, 0
    for mark in all_blanks_direction.get('hospital'):
        if '- - -' in mark:
            col = 0
            row += 2
            Label(frame_hospital, text=mark,
                  font=('Comic Sans MS', user.get('text_size')), bg='white').grid(column=col, row=row - 1, columnspan=5)
        else:

            btn = Radiobutton(frame_hospital, text=mark,
                              font=('Comic Sans MS', user.get('text_size')),
                              value=mark, variable=selected_hospital,
                              command=select_hospital, indicatoron=False, selectcolor='#77f1ff')
            btn.grid(row=row, column=col, sticky='ew')
            col += 1
            if col == 5:
                row += 1
                col = 0

    frame_hospital.columnconfigure(index='all', minsize=40, weight=1)
    frame_hospital.rowconfigure(index='all', minsize=20)

    frame_doctor = Frame(type_blanks_root, borderwidth=1, relief="solid", padx=4, pady=4)
    Label(frame_doctor, text="На консультацию:",
          font=('Comic Sans MS', user.get('text_size')), bg='white').grid(column=0, row=0, columnspan=5)

    selected_doctor = StringVar()

    def select_doctor():
        data['direction_doctor'] = selected_doctor.get()

    row, col = 1, 0
    for mark in all_blanks_direction.get('doctor'):

        btn = Radiobutton(frame_doctor, text=mark,
                          font=('Comic Sans MS', user.get('text_size')),
                          value=mark, variable=selected_doctor,
                          command=select_doctor, indicatoron=False, selectcolor='#77f1ff')
        btn.grid(row=row, column=col, sticky='ew')
        col += 1
        if col == 5:
            row += 1
            col = 0

    frame_doctor.columnconfigure(index='all', minsize=40, weight=1)
    frame_doctor.rowconfigure(index='all', minsize=20)

    def create_doc():
        if not data.get('hospital'):
            messagebox.showinfo('Ошибка', 'Не указан стационар')
        else:
            type_blanks_root.quit()
            type_blanks_root.destroy()
            direction__create_direction()

    but_create_doc = Button(type_blanks_root, text='Создать направление', command=create_doc,
                            font=('Comic Sans MS', user.get('text_size')))

    type_blanks_root.mainloop()


def direction__create_direction():
    render_data['ped_div'] = data.get('ped_div')
    render_data['district'] = data.get('patient_district')
    render_data['doc_name'] = data.get('doctor_name')
    render_data['name'] = data.get('patient_name')
    render_data['birth_date'] = data.get('birth_date')
    render_data['address'] = data.get('address')
    render_data['gender'] = data.get('gender')
    render_data['date'] = datetime.now().strftime("%d.%m.%Y")
    render_data['amb_cart'] = data.get('amb_cart')
    render_data['doctor'] = data.get('direction_doctor', "_________________________________________")
    render_data['address_hospital'] = address_hospital.get(data.get('hospital', ''))
    render_data['diagnosis'] = "__________________________________________"

    hospital = data.get('hospital', '')
    if 'РНПЦ' in hospital:
        dispanser = {
            'РНПЦ ДХ': 'РНПЦ Детской хирургии',
            'РНПЦ НиН': 'РНПЦ Неврологии и Нейрохирургии',
            'РНПЦ ТиО': 'РНПЦ Травматологии и Ортопедии',
            'РНПЦ ЛОР': 'РНПЦ Оториноларингологии'}
        if hospital in dispanser:
            hospital = dispanser.get(hospital)
    elif "-я" in hospital:
        dispanser = {
            'ГДП': 'Городская детская поликлиника',
            'ГДКБ': 'Городская детская клиническая больница',
            'ГКБ': 'Городская клиническая больница',
            'ДИКБ': 'Детская инфекционная клиническая больница',
            'ГП': 'Городская поликлиника'
        }

        disp = hospital.split()[-1]
        hospital = hospital.replace(disp, dispanser.get(disp))

    elif "ДИКБ" in hospital:
        hospital = 'Детская инфекционная клиническая больница'
    elif "МГЦМР" in hospital:
        hospital = "Минский городской центр медицинской реабилитации"
    elif "ГККВД" in hospital:
        hospital = "Городской клинический кожно-венерологический диспансер"

    render_data['hospital'] = hospital

    doc = DocxTemplate(f".{os.sep}example{os.sep}direction{os.sep}{data.get('type_direction')}.docx")
    doc.render(render_data)
    file_name = f".{os.sep}generated{os.sep}Направление.docx"
    file_name = save_document(doc=doc, doc_name=file_name)

    if data.get('type_direction') == 'НА ГОСПИТАЛИЗАЦИЮ':
        file_name_vac = create_vaccination(user_id=patient.get('amb_cart'), size=5)
        if file_name_vac:
            master = Document(file_name)
            master.add_page_break()
            composer = Composer(master)
            doc_temp = Document(file_name_vac)
            composer.append(doc_temp)
            file_name = save_document(doc=composer, doc_name=file_name)

            # composer.save(f".{os.sep}generated{os.sep}Направление.docx")

    os.system(f"start {file_name}")
    data_base(command="statistic_write",
              insert_data="Направления")
    data.clear()
    render_data.clear()


def examination_cmd():
    def on_closing():
        if messagebox.askokcancel("Quit", "Закрыть окно?\n"
                                          "Несохраненные данные будут удалены"):
            app_examination.destroy()
    # fast_examination()

    if not patient.get('name'):
        messagebox.showinfo('Ошибка', "Не выбран пациент!")
    else:
        app_examination = ScrolledRoot(marker='paste_examination_cmd_main', func=paste_examination_cmd_main)
        app_examination.title(f"Осмотр "
                              f"{patient.get('name').split()[0]} "
                              f"{patient.get('name').split()[1]} "
                              f"{patient.get('birth_date')}")
        app_examination.geometry('+0+0')
        app_examination.protocol("WM_DELETE_WINDOW", on_closing)

        app_examination.mainloop()


def examination_cmd_child():
    def on_closing():
        if messagebox.askokcancel("Quit", "Закрыть окно?\n"
                                          "Несохраненные данные будут удалены"):
            app_examination.destroy()

    if not patient.get('name'):
        messagebox.showinfo('Ошибка', "Не выбран пациент!")
    else:
        app_examination = ScrolledRoot(marker='paste_examination_cmd_main_child', func=paste_examination_cmd_main)

        app_examination.title(f"Осмотр "
                              f"{patient.get('name').split()[0]} "
                              f"{patient.get('name').split()[1]} "
                              f"{patient.get('birth_date')}")
        app_examination.geometry('+0+0')
        app_examination.protocol("WM_DELETE_WINDOW", on_closing)

        app_examination.mainloop()


def create_vaccination(user_id, size):
    try:
        if size == 5:
            size = 1
        elif size == 4:
            size = 2

        with sq.connect(f".{os.sep}data_base{os.sep}patient_data_base.db") as conn:
            cur = conn.cursor()
            cur.execute(f"SELECT Прививки_шапка, Прививки FROM patient_data WHERE amb_cart LIKE '{user_id}'")
            user_data, vaccination = cur.fetchone()

        document = Document()

        paragraph = document.add_paragraph()
        p = paragraph.add_run(f'{user_data}')
        r_fmt = p.font
        r_fmt.name = 'Times New Roman'
        if size == 2:
            r_fmt.size = Pt(12)
        else:
            r_fmt.size = Pt(10)

        info = ["Возраст",
                "Дата проведения прививки",
                "Тип иммуни-\nзации",
                "Наименование препарата",
                "Страна изготови-\nтель препарата",
                "Доза",
                "Серия",
                "Реакция",
                "Мед. отвод"]

        all_tabs = (
            'Прививки против туберкулёза',
            'Прививки против гепатита В',
            'Прививки против кори, эпидемического паротита и краснухи',
            'Прививки против полиомиелита',
            'Прививки против дифтерии, коклюша, столбняка',
            'Прививки против других инфекций')

        table = document.add_table(rows=(len(vaccination.split('\n')) + 1), cols=9)
        table.style = 'Table Grid'
        # if size == 2:
        #     widths = (Cm(1.5*1.5), Cm(1.8*1.5), Cm(1.5*1.5), Cm(1.5*1.5), Cm(1.5*1.5), Cm(1.5*1.5),
        #     Cm(1.5*1.5), Cm(1.5*1.5), Cm(1.4*1.5))
        # else:
        #     widths = (Cm(1.5), Cm(1.8), Cm(1.2), Cm(1.5), Cm(1.5), Cm(1.5), Cm(1.5), Cm(1.5), Cm(1.4))
        # for row in table.rows:
        #     for idx, width in enumerate(widths):
        #         row.cells[idx].width = width

        hdr_cells = table.rows[0].cells
        for i in range(9):
            hdr_cells[i].text = info[i]

            rc = hdr_cells[i].paragraphs[0].runs[0]
            rc.font.name = 'Times New Roman'
            # rc.font.bold = True
            if size == 2:
                rc.font.size = Pt(10)
            else:
                rc.font.size = Pt(7)

        info = vaccination.split('\n')

        for i in range(1, len(info) + 1):
            hdr_cells = table.rows[i].cells
            if info[i - 1] in all_tabs:
                hdr_cells[0].text = info[i - 1]
                rc = hdr_cells[0].paragraphs[0].runs[0]
                if size == 2:
                    rc.font.size = Pt(10)
                else:
                    rc.font.size = Pt(8)

                hdr_cells[0].merge(hdr_cells[8])
            else:
                loc_info = info[i - 1].split('__')
                for q in range(9):
                    hdr_cells[q].text = loc_info[q]

                    rc = hdr_cells[q].paragraphs[0].runs[0]
                    rc.font.name = 'Times New Roman'
                    if size == 2:
                        rc.font.size = Pt(10)
                    else:
                        rc.font.size = Pt(8)

        if size == 2:
            widths = (
                Cm(1.5 * 1.5), Cm(1.8 * 1.5), Cm(1.5 * 1.5), Cm(1.5 * 1.5), Cm(1.5 * 1.5), Cm(1.5 * 1.5), Cm(1.5 * 1.5),
                Cm(1.5 * 1.5), Cm(1.4 * 1.5))
        else:
            widths = (Cm(1.6), Cm(2.0), Cm(1.0), Cm(1.5), Cm(1.5), Cm(1.5), Cm(1.5), Cm(1.5), Cm(1.4))
        for row in table.rows:
            for idx, width in enumerate(widths):
                row.cells[idx].width = width

        sections = document.sections
        for section in sections:
            section.top_margin = Cm(1.5)
            section.bottom_margin = Cm(1.5)
            section.left_margin = Cm(1.5)
            section.right_margin = Cm(1.5)
            if size == 1:
                section.page_height = Cm(21)
                section.page_width = Cm(14.8)

        file_name_vac = f'.{os.sep}generated{os.sep}прививки.docx'
        file_name_vac = save_document(doc=document, doc_name=file_name_vac)

        if info:
            data_base(command="statistic_write",
                      insert_data="Прививки")
            return file_name_vac

        else:
            return False

    except Exception as ex:
        print('Exception create_vaccination: ', ex)
        return False


def decoding_name(patient_data):
    user_decoded = {
        'name': None,
        'birth_date': None,
        'gender': None,
        'amb_cart': None,
        'patient_district': None,
        'address': None
    }
    if ('Фамилия, имя, отчество пациента:' in patient_data or
            '№ амб. карты' in patient_data or
            '№ амбулаторной карты' in patient_data):
        text = patient_data
        try:
            if 'Фамилия, имя, отчество пациента:' in text:
                info = text.split()
                counter = 0
                for i in info:
                    counter += 1

                    if i == 'пациента:':
                        user_decoded['name'] = f'{info[counter]} {info[counter + 1]}'
                        if '№' not in info[counter + 2]:
                            user_decoded['name'] += f' {info[counter + 2]}'
                    elif i == 'рождения:':
                        user_decoded['birth_date'] = info[counter]
                    elif i == 'Пол:':
                        if info[counter] == 'Жен.':
                            user_decoded['gender'] = 'женский'
                        elif info[counter] == 'Муж.':
                            user_decoded['gender'] = 'мужской'
                    elif i == 'карты:':
                        user_decoded['amb_cart'] = info[counter]
                    elif i == 'Участок:':
                        user_decoded['patient_district'] = ''
                        district = info[counter]
                        for q in district:
                            if q.isdigit():
                                user_decoded['patient_district'] += q
                    elif i == 'Адрес:':
                        address = ''
                        for q in info[counter:]:
                            if ':' in q:
                                break
                            address += q + ' '
                        user_decoded['address'] = address

            elif '№ амб. карты' in text:
                for i in text.split('\n'):
                    if i.split()[0].isdigit():
                        if len(i.split('  ')) == 8:
                            info = i.split('  ')

                            user_decoded['amb_cart'] = info[0]
                            user_decoded['name'] = info[1]
                            user_decoded['birth_date'] = info[2]
                            user_decoded['address'] = info[4]
                            user_decoded['patient_district'] = ''
                            district = info[3]
                            for q in district:
                                if q.isdigit():
                                    user_decoded['patient_district'] += q
                            if len(info[1].split()) == 3:
                                if info[1][-1] == 'ч':
                                    user_decoded['gender'] = 'мужской'
                                elif info[1][-1] == 'а':
                                    user_decoded['gender'] = 'женский'
                                else:
                                    user_decoded['gender'] = 'мужской/женский'
                            else:
                                user_decoded['gender'] = 'мужской/женский'
                            break
                        else:
                            info = i.split()
                            user_decoded['amb_cart'] = info.pop(0)
                            user_decoded['name'] = ''
                            for _ in range(3):
                                if info[0].isalpha():
                                    user_decoded['name'] += f'{info[0]} '
                                    info.pop(0)
                            user_decoded['birth_date'] = info.pop(0)
                            user_decoded['patient_district'] = ''
                            district = info.pop(0)
                            for q in district:
                                if q.isdigit():
                                    user_decoded['patient_district'] += q
                            user_decoded['address'] = ''
                            for i_ in info[info.index('г'):]:
                                if len(i_) == 10 and '.' in i_:
                                    break
                                else:
                                    user_decoded['address'] += f'{i_} '
                            if len(user_decoded.get('name').split()) == 3:
                                if user_decoded.get('name').split()[2][-1] == 'ч':
                                    user_decoded['gender'] = 'мужской'
                                elif user_decoded.get('name').split()[2][-1] == 'а':
                                    user_decoded['gender'] = 'женский'
                                else:
                                    user_decoded['gender'] = 'мужской/женский'
                            else:
                                user_decoded['gender'] = 'мужской/женский'

                            break

            elif '№ амбулаторной карты' in text:

                for i in text.split('\n'):
                    if i.split()[0].isdigit():

                        info = i.split()
                        user_decoded['amb_cart'] = info.pop(0)
                        user_decoded['name'] = ''
                        for _ in range(3):
                            if info[0].isalpha() or info[0] not in ('Ж', 'М'):
                                user_decoded['name'] += f'{info[0]} '
                                info.pop(0)

                        gender = info.pop(0)
                        if gender == 'М':
                            user_decoded['gender'] = 'мужской'
                        elif gender == 'Ж':
                            user_decoded['gender'] = 'женский'
                        else:
                            user_decoded['gender'] = 'мужской/женский'

                        user_decoded['birth_date'] = info.pop(0)

                        user_decoded['patient_district'] = ''
                        district = info.pop(0)
                        for q in district:
                            if q.isdigit():
                                user_decoded['patient_district'] += q

                        user_decoded['address'] = 'г. '
                        if 'Минск' in info:
                            for i_ in info[info.index('Минск'):]:
                                if i_.isdigit():
                                    user_decoded['address'] += f'{i_} - '
                                else:
                                    user_decoded['address'] += f'{i_} '
                            else:
                                user_decoded['address'] = user_decoded['address'][:-2]
                        else:
                            user_decoded['address'] = 'None'

                        break

            if not user_decoded.get('gender'):
                user_decoded['gender'] = 'мужской/женский'


            for key, value in user_decoded.items():

                if not value:
                    if key != 'gender':
                        print(f'1) Exception! decoding_name: \ntext:{text}\n', user_decoded.get('amb_cart'),
                              user_decoded.get('district'),
                              user_decoded.get('name'), user_decoded.get('birth_date'), user_decoded.get('gender'),
                              user_decoded.get('address'))

                        raise ValueError

            if user_decoded.get('address') == 'None':
                with sq.connect(f".{os.sep}data_base{os.sep}patient_data_base.db") as conn:
                    cur = conn.cursor()
                    cur.execute(f"SELECT Домашний_адрес FROM patient_data "
                                f"WHERE amb_cart LIKE '%{user_decoded.get('amb_cart')}%' "
                                f"AND Дата_рождения LIKE '{user_decoded.get('birth_date')}'")
                    found_data = cur.fetchall()

                if len(found_data) == 1:
                    user_decoded['address'] = found_data[0][0]


        except (IndexError, ValueError):
            print(f'2) Exception! decoding_name: \ntext:{text}\n',
                  user_decoded.get('amb_cart'),
                  user_decoded.get('district'),
                  user_decoded.get('name'), user_decoded.get('birth_date'), user_decoded.get('gender'),
                  user_decoded.get('address'))
            messagebox.showinfo('Ошибка', 'Ошибка имени! \nВведите шапку полностью!')
            return None

        else:
            return user_decoded


def keypress(event):
    if event.keycode == 86 or event.keycode == 150994966:
        event.widget.event_generate('<<Paste>>')
    elif event.keycode == 67 or event.keycode == 134217731:
        event.widget.event_generate('<<Copy>>')
    elif event.keycode == 88 or event.keycode == 117440536:
        event.widget.event_generate('<<Cut>>')


def paste_main_calendar(txt_variable, main_title=''):

    if app_info['roots'].get('calendar_root'):
        app_info['roots']['calendar_root'].destroy()

    calendar_root = Toplevel()
    app_info['roots']['calendar_root'] = calendar_root
    calendar_root.title(f'Календарь {main_title}')
    calendar_root.config(bg='white')

    selected_day = StringVar()
    actual_data = dict()
    destroy_elements = dict()

    now = datetime.now()
    actual_data['year'] = now.year
    actual_data['month'] = now.month

    def prev_month():
        curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
        new = curr - timedelta(days=1)
        actual_data['year'] = int(new.year)
        actual_data['month'] = int(new.month)
        create_calendar()

    def next_month():
        curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
        new = curr + timedelta(days=31)
        actual_data['year'] = int(new.year)
        actual_data['month'] = int(new.month)
        create_calendar()

    def select_day():
        app_info['roots']['calendar_root'] = None
        day = selected_day.get()
        edit_day = list()
        for i in day.split('.'):
            if len(i) == 1:
                i = f"0{i}"
            edit_day.append(i)
        answer = '.'.join(edit_day)
        if txt_variable:
            txt_variable.set(answer)

        calendar_root.destroy()

    frame_month_year = Frame(calendar_root, relief="solid", padx=1, pady=1)

    frame_month_year.columnconfigure(index='all', minsize=40, weight=1)
    frame_month_year.rowconfigure(index='all', minsize=20)
    frame_month_year.pack(fill='both', expand=True)

    def create_calendar():
        if destroy_elements.get('loc_calendar_frame'):
            loc_calendar_frame = destroy_elements.get('loc_calendar_frame')
            loc_calendar_frame.destroy()

        loc_calendar_frame = Frame(calendar_root, relief="solid", padx=1, pady=1)
        destroy_elements['loc_calendar_frame'] = loc_calendar_frame

        for calendar_mark in ('prev', 'curr', 'next'):
            row, col = 0, 0

            frame_days = Frame(loc_calendar_frame, relief="ridge", borderwidth=0.5, padx=1, pady=1)
            if calendar_mark == 'prev':
                but_prev_month = Button(frame_days, text='<', command=prev_month,
                                        font=('Comic Sans MS', user.get('text_size')))
                but_prev_month.grid(row=row, column=0, sticky='ew', columnspan=7)


            elif calendar_mark == 'next':
                but_next_month = Button(frame_days, text='>', command=next_month,
                                        font=('Comic Sans MS', user.get('text_size')))
                but_next_month.grid(row=row, column=0, sticky='ew', columnspan=7)


            else:
                btn = Radiobutton(frame_days, text="Сегодня",
                                  font=('Comic Sans MS', user.get('text_size')),
                                  value=datetime.now().strftime("%d.%m.%Y"),
                                  variable=selected_day, command=select_day,
                                  indicatoron=False, selectcolor='#77f1ff')
                btn.grid(row=row, column=0, sticky='ew', columnspan=7)

            if calendar_mark == 'prev':
                curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
                new = curr - timedelta(days=1)
                year = int(new.year)
                month = int(new.month)

            elif calendar_mark == 'next':
                curr = datetime(actual_data.get('year'), actual_data.get('month'), 1)
                new = curr + timedelta(days=31)
                year = int(new.year)
                month = int(new.month)

            else:
                year = actual_data.get('year')
                month = actual_data.get('month')

            month_name = {
                'January': 'Январь',
                'February': 'Февраль',
                'March': 'Март',
                'April': 'Апрель',
                'May': 'Май',
                'June': 'Июнь',
                'July': 'Июль',
                'August': 'Август',
                'September': 'Сентябрь',
                'October': 'Октябрь',
                'November': 'Ноябрь',
                'December': 'Декабрь'
            }

            row += 1
            lbl_month_year = Label(frame_days,
                                   text=f"{month_name.get(calendar.month_name[month])}",
                                   font=('Comic Sans MS', user.get('text_size')),
                                   bg='white')
            lbl_month_year.grid(column=0, row=row, sticky='ew', columnspan=7)

            if calendar_mark == 'curr':
                lbl_month_year['text'] = f"{month_name.get(calendar.month_name[month])} {str(year)}"

            # Second row - Week Days
            column = 0
            row += 1
            for day in ["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"]:
                lbl = Label(frame_days, text=day,
                            relief="solid", borderwidth=0.5,
                            font=('Comic Sans MS', user.get('text_size')), bg='white')
                lbl.grid(column=column, row=row, sticky='ew', padx=2, pady=2)
                column += 1

            row += 1
            column = 0

            my_calendar = calendar.monthcalendar(year, month)
            for week in my_calendar:
                row += 1
                col = 0
                for day in week:
                    if day == 0:
                        col += 1
                    else:
                        # day = str(day)
                        # day = str(day)
                        # if len(day) == 1:
                        #     day = f"0{day}"
                        # if len(str(month)) == 1:
                        #     month = f"0{month}"
                        btn_value = ''

                        btn = Radiobutton(frame_days, text=day,
                                          font=('Comic Sans MS', user.get('text_size')),
                                          value=f"{day}.{month}.{year}", variable=selected_day,
                                          command=select_day,
                                          indicatoron=False, selectcolor='#77f1ff')
                        btn.grid(row=row, column=col, sticky='ew')
                        col += 1

                        if datetime.strptime(f"{day}.{month}.{year}", "%d.%m.%Y").weekday() in (5, 6):
                            btn['bg'] = '#b4ffff'
                        if datetime.now().year == year and datetime.now().month == month and datetime.now().day == int(
                                day):
                            btn['bg'] = '#ff7b81'

            frame_days.columnconfigure(index='all', minsize=40, weight=1)
            frame_days.rowconfigure(index='all', minsize=20)
            frame_days.pack(fill='both', expand=True, side='left')

        loc_calendar_frame.columnconfigure(index='all', minsize=40, weight=1)
        loc_calendar_frame.rowconfigure(index='all', minsize=20)
        loc_calendar_frame.pack(fill='both', expand=True, side='left')

    create_calendar()


def open_last_examination():

    last_examination_main_root = Toplevel()
    last_examination_main_root.bind("<Control-KeyPress>", keypress)
    last_examination_main_root.config(bg='white')
    last_examination_main_root.title(f'Список принятых пациентов')

    selected_button = StringVar()
    animation = StringVar()
    main_label = StringVar()

    start_selection = StringVar()
    stop_selection = StringVar()
    start_selection.set(datetime.now().strftime('%d.%m.%Y'))
    stop_selection.set(datetime.now().strftime('%d.%m.%Y'))

    data['last_examination'] = dict()


    def pack_frame_last_examination():
        def start_action(func=None):
            def check_thread(thread):
                if thread.is_alive():
                    animation.set(animation.get()[-1] + animation.get()[:-1])
                    # root.update()
                    last_examination_main_root.after(200, lambda: check_thread(thread))
                else:
                    animation.set("")
                    but_start_selection.configure(state='normal')
                    main_label.set(f"Список принятых пациентов за период "
                                   f"с {start_selection.get()} по {stop_selection.get()}")

            def run_action():
                main_label.set(f"Список принятых пациентов за период "
                               f"с {start_selection.get()} по {stop_selection.get()}\n"
                               f"Загрузка...")

                but_start_selection.configure(state='disabled')
                if func:
                    func()
                else:
                    time.sleep(2)

            animation.set("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░")
            thread = threading.Thread(target=run_action)
            thread.start()
            check_thread(thread)

        def pack_scrolled_frame():
            def resize(event=None):
                region = canvas.bbox(tk.ALL)
                canvas.configure(scrollregion=region)

            def on_binds(event):
                canvas.idbind = canvas.bind_all("<MouseWheel>", on_mousewheel)

            def off_binds(event=None):
                canvas.unbind_all("<MouseWheel>")

            def on_mousewheel(event):
                region = canvas.bbox(tk.ALL)
                canvas.configure(scrollregion=region)
                if os.name == 'posix':
                    canvas.yview_scroll(int(-1 * event.delta), "units")
                else:
                    canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

            last_examination_main_root.update_idletasks()
            height = (last_examination_main_root.winfo_screenheight() - last_examination_main_root.winfo_height() - 200)
            width = last_examination_main_root.winfo_screenheight()
            if last_examination_main_root.winfo_screenwidth() < width:
                width = last_examination_main_root.winfo_screenwidth()

            # print(f"height - {last_examination_main_root.winfo_screenheight()}\n"
            #       f"width - {width}\n"
            #       f"{last_examination_main_root.winfo_screenwidth()}")

            master_frame = Frame(last_examination_main_root)
            master_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)

            scroll_x = tk.Scrollbar(master_frame, orient=tk.HORIZONTAL)
            scroll_y = tk.Scrollbar(master_frame, orient=tk.VERTICAL, width=user.get('text_size', 10) * 2)

            canvas = tk.Canvas(master_frame,
                               xscrollcommand=scroll_x.set,
                               yscrollcommand=scroll_y.set, height=height, width=width)
            scroll_x.config(command=canvas.xview)
            scroll_y.config(command=canvas.yview)

            canvas_frame = Frame(canvas)
            data['last_examination']['scrolled_frame'] = canvas_frame
            data['last_examination']['canvas'] = canvas
            data['last_examination']['scroll_x'] = scroll_x

            # canvas['width'] = int(canvas.winfo_geometry().split('x')[0])
            # canvas_frame['width'] = int(canvas.winfo_geometry().split('x')[0])
            canvas.grid(row=0, column=0, sticky="nsew")
            scroll_x.grid(row=1, column=0, sticky="we")
            scroll_y.grid(row=0, column=1, sticky="ns")

            master_frame.rowconfigure(0, weight=1)
            master_frame.columnconfigure(0, weight=1)

            master_frame.bind("<Configure>", resize)
            master_frame.update_idletasks()
            canvas_frame['height'] = height
            canvas_frame['height'] = canvas.winfo_width()

            canvas.bind("<Enter>", on_binds)
            canvas.bind("<Leave>", off_binds)
            last_examination_main_root.update_idletasks()

            # canvas.create_window((0, 0), window=canvas_frame, anchor="nw",
            #                      width=canvas.winfo_width())

        def paste_calendar():
            calendar_val = {
                'start_selection': {'txt_variable': start_selection,
                                    'main_title': 'Начало выборки'},
                'stop_selection': {'txt_variable': stop_selection,
                                    'main_title': 'Окончание выборки'}
            }

            paste_main_calendar(txt_variable=calendar_val[selected_button.get()].get('txt_variable'),
                                main_title=calendar_val[selected_button.get()].get('main_title'))

        def select_type_cert():
            if data['certificate']['type_cert_frames'].get('selected_cert'):
                data['certificate']['type_cert_frames']['selected_cert'].pack_forget()

            canvas = data['certificate'].get('canvas')
            type_cert_frame = data['certificate']['type_cert_frames'].get(selected_button.get())
            data['certificate']['type_cert_frames']['selected_cert'] = type_cert_frame
            scrolled_frame = data['certificate'].get('scrolled_frame')

            certificate_main_root.update_idletasks()
            type_cert_frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)

            scrolled_frame.configure(height=type_cert_frame.winfo_height())
            region = canvas.bbox(tk.ALL)
            canvas.configure(scrollregion=region)
            canvas.create_window((0, 0), window=scrolled_frame, anchor="nw",
                                 width=canvas.winfo_width())
            canvas.yview_moveto(0)
            certificate_main_root.update()

        def is_valid__date(date, type_selection):
            local_data = {
                'start_selection': entry_start_selection,
                'stop_selection': entry_stop_selection
            }
            validate_entry = local_data.get(type_selection)
            try:
                datetime.strptime(date, "%d.%m.%Y")
                validate_entry.configure(bg='white')
            except ValueError:
                validate_entry.configure(bg='red')

            return True

        def start_create_selection():
            start_action(func=create_selection)

        def create_selection():
            data['last_examination']['selection'] = dict()

            def open_selected_day():

                date = selected_button.get()
                last_frame = data['last_examination'].get('last_frame_day')
                if last_frame:
                    last_frame.pack_forget()

                frame = data['last_examination']['selection'][date].get('frame_day')
                data['last_examination']['last_frame_day'] = frame
                frame.pack(fill='both', expand=True)

            def open_selected_patient():
                date, patient_info = selected_button.get().split('____')
                last_frame = data['last_examination'].get('last_frame_patient')
                if last_frame:
                    last_frame.pack_forget()

                frame = data['last_examination']['selection'][date][patient_info].get('frame_patient')
                data['last_examination']['last_frame_patient'] = frame
                frame.pack(fill='both', expand=True)

            try:
                datetime.strptime(start_selection.get(), "%d.%m.%Y")
            except ValueError:
                messagebox.showerror('Ошибка', "Неверный формат даты начала выборки!")
                return

            try:
                datetime.strptime(stop_selection.get(), "%d.%m.%Y")
            except ValueError:
                messagebox.showerror('Ошибка', "Неверный формат даты окончания выборки!")
                return

            try:
                if (datetime.strptime(start_selection.get(), "%d.%m.%Y") -
                      datetime.strptime(stop_selection.get(), "%d.%m.%Y")).days > 0:
                    raise ValueError
            except ValueError:
                messagebox.showerror('Ошибка', "Дата начала выборки не может быть больше даты окончания выборки!")
                return

            date_start_selection = start_selection.get()
            date_stop_selection = stop_selection.get()
            all_date = [date_start_selection, ]
            date_temp = date_start_selection
            while date_start_selection != date_stop_selection:
                date_start_selection = (datetime.strptime(date_start_selection, "%d.%m.%Y") + timedelta(days=1)).strftime("%d.%m.%Y")
                all_date.append(date_start_selection)

            try:
                found_info = data_base(command='last_examination',
                                       insert_data=all_date)
            except Exception as ex:
                messagebox.showerror('Ошибка', f"Ошибка базы данных!\n"
                                               f"{ex}")
                return

            canvas = data['last_examination'].get('canvas')
            canvas_frame = data['last_examination'].get('scrolled_frame')
            last_frame = data['last_examination'].get('last_scrolled_frame')
            if last_frame:
                last_frame.pack_forget()

            frame_main = Frame(canvas_frame)
            data['last_examination']['last_scrolled_frame'] = frame_main

            for date in found_info:
                data['last_examination']['selection'][date] = dict()
                data['last_examination']['selection'][date]['button_date_var'] = StringVar()
                frame_date = Frame(frame_main, bg="#36566d")
                Radiobutton(
                    frame_date,
                    textvariable=data['last_examination']['selection'][date].get('button_date_var'),
                    font=('Comic Sans MS', user.get('text_size')),
                    value=date,
                    variable=selected_button,
                    command=open_selected_day,
                    indicatoron=False,
                    bg="#36566d",
                    fg='white',
                    anchor='w'
                ).pack(fill='both', expand=True)

                frame_day = Frame(frame_date, bg="#36566d")
                data['last_examination']['selection'][date]['frame_day'] = frame_day
                if not found_info.get(date):
                    Label(master=frame_day,
                          text="История за этот день пуста!",
                          font=('Comic Sans MS', user.get('text_size')),
                          # anchor='w',
                          padx=4, pady=4
                          ).pack(fill='both', expand=True)
                else:
                    for patient_info_day in sorted(found_info.get(date),
                                                   reverse=True,
                                                   key=lambda i: (datetime.now() -
                                                 datetime.strptime(f"{i[0]}", "%d.%m.%Y %H:%M:%S")).total_seconds()):

                        if len(patient_info_day) == 5:
                            date_time, status, patient_info, examination_text, examination_key = patient_info_day
                            marker = ''
                            for mark, name in (('type_examination:____child__', "осмотр до года"),
                                               ('type_examination:____adult__', "осмотр"),
                                               ('type_examination:____certificate__', "справка")):
                                if examination_key.startswith(mark):
                                    marker = name


                            if not data['last_examination']['selection'][date].get(patient_info):
                                data['last_examination']['selection'][date][patient_info] = dict()
                                frame_patient = Frame(frame_day, borderwidth=1)
                                frame_patient.pack(fill='both', expand=True, padx=2, pady=3)
                                frame = Frame(frame_patient)

                                data['last_examination']['selection'][date][patient_info]['frame_patient'] = frame
                                data['last_examination']['selection'][date][patient_info]['button_patient'] = StringVar()
                                Radiobutton(
                                    frame_patient,
                                    textvariable=data['last_examination']['selection'][date][patient_info].get('button_patient'),
                                    font=('Comic Sans MS', user.get('text_size')),
                                    value=f"{date}____{patient_info}",
                                    variable=selected_button,
                                    command=open_selected_patient,
                                    indicatoron=False,
                                    anchor='w'
                                ).pack(fill='both', expand=True)
                                patient_name, patient_birth_date = patient_info.split('__')

                                data['last_examination']['selection'][date][patient_info]['button_patient'].set(
                                    f"{date_time.split()[-1]}  --  {patient_name}  {patient_birth_date} -- {marker}"
                                )
                                height = 0
                                for string in examination_text.split('\n'):
                                    height += (1 + len(string)//120)

                                info = ScrolledText(master=frame, width=150, height=height,
                                                    font=('Comic Sans MS', user.get('text_size')), wrap="word")
                                info.pack(fill='both', expand=True, padx=4, pady=4)
                                info.insert(1.0, examination_text)


                                # Label(master=frame,
                                #       text=examination_text,
                                #       font=('Comic Sans MS', user.get('text_size')),
                                #       # anchor='w',
                                #       borderwidth=1,
                                #       padx=4, pady=4
                                #       ).pack(fill='both', expand=True, padx=4, pady=4)

                            else:
                                if marker:
                                    if len(data['last_examination']['selection'][date][patient_info]['button_patient'].get().split('\n')[-1]) > 150:
                                        data['last_examination']['selection'][date][patient_info]['button_patient'].set(
                                            data['last_examination']['selection'][date][patient_info][
                                                'button_patient'].get() + "\n")
                                    data['last_examination']['selection'][date][patient_info]['button_patient'].set(
                                        data['last_examination']['selection'][date][patient_info]['button_patient'].get() +
                                        f"  --  {marker}"
                                    )

                                frame = data['last_examination']['selection'][date][patient_info].get('frame_patient')
                                height = 0
                                for string in examination_text.split('\n'):
                                    height += (1 + len(string)//120)

                                info = ScrolledText(master=frame, width=150, height=height,
                                                    font=('Comic Sans MS', user.get('text_size')), wrap="word")
                                info.pack(fill='both', expand=True, padx=4, pady=4)
                                info.insert(1.0, examination_text)


                data['last_examination']['selection'][date]['button_date_var'].set(f"{date}    --    "
                                                                                   f"Пациентов: {len(data['last_examination']['selection'].get(date)) - 2}")

                frame_date.pack(fill='both', expand=True, pady=3)

            last_examination_main_root.update_idletasks()
            frame_main.pack(fill='both', expand=True)
            canvas_frame.configure(height=frame_main.winfo_height())

            region = canvas.bbox(tk.ALL)
            canvas.configure(scrollregion=region)
            canvas.create_window((0, 0), window=canvas_frame, anchor="nw",
                                 width=canvas.winfo_width())
            canvas.yview_moveto(0)

            last_examination_main_root.update()

        frame_last_examination_main = Frame(last_examination_main_root, bg="#36566d")
        frame = Frame(frame_last_examination_main, bg="#36566d")


        main_label.set("Список принятых пациентов за период")

        Label(master=frame,
              textvariable=main_label,
              font=('Comic Sans MS', user.get('text_size')),
              bg="#36566d",
              fg='white',
              padx=4, pady=4
              ).pack(fill='both', expand=True)

        Label(master=frame,
              textvariable=animation,
              bg="#36566d",
              fg='white',
              ).pack(fill='both', expand=True)

        frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)

        frame = Frame(frame_last_examination_main)

        Label(master=frame,
              text="Начало выборки",
              font=('Comic Sans MS', user.get('text_size')),
              ).grid(row=0, column=0, sticky='ew')

        entry_start_selection = Entry(frame, width=30,
              textvariable=start_selection,
              font=('Comic Sans MS', user.get('text_size'))
              )
        entry_start_selection.grid(row=0, column=1, sticky='ew')

        Radiobutton(frame, image=user.get('сalendar_img'),
                    font=('Comic Sans MS', user.get('text_size')),
                    value="start_selection",
                    variable=selected_button,
                    command=paste_calendar,
                    indicatoron=False, selectcolor='#77f1ff'
                    ).grid(row=0, column=2, sticky='ew')

        Label(master=frame,
              text="Окончание выборки",
              font=('Comic Sans MS', user.get('text_size')),
              ).grid(row=1, column=0, sticky='ew')

        entry_stop_selection = Entry(
            frame, width=30,
            textvariable=stop_selection,
            font=('Comic Sans MS', user.get('text_size'))
        )
        entry_stop_selection.grid(row=1, column=1, sticky='ew')

        Radiobutton(frame, image=user.get('сalendar_img'),
                    font=('Comic Sans MS', user.get('text_size')),
                    value="stop_selection",
                    variable=selected_button,
                    command=paste_calendar,
                    indicatoron=False, selectcolor='#77f1ff'
                    ).grid(row=1, column=2, sticky='ew')

        but_start_selection = Button(
                    frame,
                    text="Генерация \nвыборки",
                    font=('Comic Sans MS', user.get('text_size')),
                    command=start_create_selection)
        but_start_selection.grid(row=0, column=3, sticky='nsew', rowspan=2)


        frame.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)
        frame_last_examination_main.pack(fill='both', expand=True, padx=2, pady=2, ipadx=2, ipady=2)

        check_date_start_selection = (frame_last_examination_main.register(is_valid__date), "%P", "start_selection")
        check_date_stop_selection = (frame_last_examination_main.register(is_valid__date), "%P", "stop_selection")

        entry_start_selection.configure(validatecommand=check_date_start_selection,
                                       validate="all")
        entry_stop_selection.configure(validatecommand=check_date_stop_selection,
                                       validate="all")
        pack_scrolled_frame()
    pack_frame_last_examination()


    last_examination_main_root.geometry('+0+0')

    last_examination_main_root.mainloop()


def main_root():

    def start_action(func=None):
        def check_thread(thread):
            if thread.is_alive():
                animation.set(animation.get()[-1] + animation.get()[:-1])
                root.after(200, lambda: check_thread(thread))
            else:
                animation.set("")

        def run_action():
            if func:
                func()
            else:
                time.sleep(5)

        animation.set("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░")
        thread = threading.Thread(target=run_action)
        thread.start()
        check_thread(thread)

    def edit_local_db():

        load_info_text.set("Синхронизация осмотров...")

        app_info['load_info_text'] = load_info_text
        answer = data_base(command='examination__edit_examination_loc')

        if 'Exception' in answer:
            load_info_text.set(f"{answer}")
            time.sleep(1)

        load_info_text.set("")
        crynet_systems_label.bind('<Double-Button-1>', start_edit_local_db)



    def start_edit_local_db(event=None):
        crynet_systems_label.unbind('<Double-Button-1>')
        start_action(edit_local_db)


    def paste_log_in_root():
        def select_doctor_name():
            load_info_text.set(f"Выбран доктор: {selected_doctor_name.get()}")

            if app_info['all_doctor_info'][selected_doctor_name.get()].get('password'):
                frame_pass.pack_configure(fill='both', expand=True, padx=2, pady=2)
                pass_txt.focus()
            else:
                open_main_root()
                frame_pass.pack_forget()

        def open_main_root():
            if app_info.get('frame_doc'):
                app_info['frame_doc'].destroy()
                app_info['frame_doc'] = None
            frame_pass.pack_forget()

            if not user.get('error_connection'):
                doctor_name = selected_doctor_name.get()
                user['doctor_name'] = app_info['all_doctor_info'][doctor_name].get('doctor_name')
                user['password'] = app_info['all_doctor_info'][doctor_name].get('password')
                user['doctor_district'] = app_info['all_doctor_info'][doctor_name].get('district')
                user['ped_div'] = app_info['all_doctor_info'][doctor_name].get('ped_div')
                user['manager'] = app_info['all_doctor_info'][doctor_name].get('manager')
                user['text_size'] = int(app_info['all_doctor_info'][doctor_name].get('text_size'))
                user['add_info'] = app_info['all_doctor_info'][doctor_name].get('add_info')

                user['my_saved_diagnosis'] = app_info['all_doctor_info'][doctor_name].get('my_saved_diagnosis')
                user['my_LN'] = app_info['all_doctor_info'][doctor_name].get('my_LN')
                user['my_sport_section'] = app_info['all_doctor_info'][doctor_name].get('my_sport_section')

                # try:
                #     edit_local_db()
                # except Exception as ex:
                #     print(ex)
                # load_info_text.set("")

                data_base('activate_app')
            paste_frame_main()

        def connect_to_srv_data_base():
            load_info_text.set(f"Попытка подключения к базе данных...")
            if not os.path.exists(path=f".{os.sep}data_base"):
                os.mkdir(path=f".{os.sep}data_base")
            data_base('create_db')
            last_edit_srv = data_base('last_edit_patient_db_srv')
            if last_edit_srv:
                load_info_text.set("Соединение с сервером установлено")
            else:
                load_info_text.set("Ошибка подключения к базе данных!")
            if not last_edit_srv:
                user['error_connection'] = True
            else:
                last_edit_loc = data_base('last_edit_patient_db_loc')
                if last_edit_loc != last_edit_srv:
                    load_info_text.set("Обнаружена новая версия базы данных пациентов\n"
                                       "Начинаю обновление...")
                    shutil.copy2(f"{user['app_data'].get('path_srv_data_base')}patient_data_base.db",
                                 f".{os.sep}data_base{os.sep}patient_data_base.db")
                    load_info_text.set(f"База данных пациентов обновлена")
                else:
                    load_info_text.set(f"У вас актуальная версия базы данных")

            if not user.get('error_connection'):
                if not app_info.get('all_doctor_info'):
                    data_base('get_all_doctor_info')

                if app_info.get('all_doctor_info'):
                    frame_doc = Frame(log_in_root, borderwidth=1, relief="solid", padx=8, pady=10)
                    app_info['frame_doc'] = frame_doc
                    load_info_text.set("Выберите учетную запись")

                    users_sorted_pd = dict()
                    for doctor_name in sorted(app_info.get('all_doctor_info')):
                        ped_div = app_info['all_doctor_info'][doctor_name].get('ped_div')
                        if ped_div not in users_sorted_pd:
                            users_sorted_pd[ped_div] = list()
                        users_sorted_pd[ped_div].append(doctor_name)

                    row, col = 0, 0
                    for ped_div in sorted(users_sorted_pd):
                        row += 1
                        if ped_div.isdigit():
                            text = f'{ped_div}-е ПО'
                        else:
                            text = f'{ped_div}'
                        Label(frame_doc, text=text,
                              font=('Comic Sans MS', user.get('text_size')),
                              bg='white').grid(row=row, column=0, sticky='ew', columnspan=4)
                        row += 1
                        col = 0
                        for doctor_name in users_sorted_pd.get(ped_div):

                            btn = Radiobutton(master=frame_doc, text=doctor_name,
                                              font=('Comic Sans MS', user.get('text_size')),
                                              command=select_doctor_name,
                                              value=doctor_name, variable=selected_doctor_name,
                                              indicatoron=False, selectcolor='#77f1ff')
                            btn.grid(row=row, column=col, sticky='ew')
                            col += 1
                            if col == 4:
                                col = 0
                                row += 1
                    frame_doc.columnconfigure(index='all', minsize=40, weight=1)
                    frame_doc.rowconfigure(index='all', minsize=20)
                    frame_doc.pack(fill='both', expand=True, padx=2, pady=2)


                else:
                    user['error_connection'] = True

            if user.get('error_connection'):
                if user['app_data'].get('last_reg_password'):
                    if (datetime.now() - datetime.strptime(user['app_data'].get('last_reg_password'),
                                                           "%d.%m.%Y")).days > 60:
                        load_info_text.set('Срок активации истек! '
                                           '\nВведите пароль для продления 60-дневной подписки')

                        frame_pass.pack_configure(fill='both', expand=True, padx=2, pady=2)
                        app_info['check_pass_app'] = True

                    else:
                        open_main_root()
                else:
                    open_main_root()

        def is_valid__password(password):
            if app_info.get('check_pass_app'):
                if password == "profkiller_10539008":
                    text_is_correct_password.set('Пароль принят')

                    open_main_root()
                    data_base('activate_app')
                else:
                    text_is_correct_password.set('Пароль не верен!')
            else:
                if password == app_info['all_doctor_info'][selected_doctor_name.get()].get('password'):
                    text_is_correct_password.set('Пароль принят')
                    open_main_root()
                else:
                    text_is_correct_password.set('Пароль не верен!')

            return True

        if app_info.get('frame_main'):
            app_info['frame_main'].destroy()
            app_info['frame_main'] = None

        log_in_root = Frame(master=root, bg="#36566d")
        app_info['log_in_root'] = log_in_root
        user['error_connection'] = False

        load_info_text.set('Запуск программы...')

        frame_pass = Frame(log_in_root, borderwidth=1, relief="solid", padx=8, pady=10)
        check_pass = (log_in_root.register(is_valid__password), "%P")

        Label(frame_pass, text='Введите пароль: ',
              font=('Comic Sans MS', 12), bg='white'
              ).pack(fill='both', expand=True, padx=2, pady=2, side='left')
        pass_txt = Entry(frame_pass, width=40,
              font=('Comic Sans MS', user.get('text_size')),
              justify="center",
              validate="all",
              textvariable=txt_password_variable,
              validatecommand=check_pass,
              show="*"
              )
        pass_txt.pack(fill='both', expand=True, padx=2, pady=2, side='left')
        # Entry(frame_pass, width=40,
        #       font=('Comic Sans MS', user.get('text_size')),
        #       justify="center",
        #       validate="all",
        #       textvariable=txt_password_variable,
        #       validatecommand=check_pass,
        #       show="*"
        #       ).pack(fill='both', expand=True, padx=2, pady=2, side='left')

        Label(frame_pass, textvariable=text_is_correct_password,
              font=('Comic Sans MS', 12), bg='white', foreground="red"
              ).pack(fill='both', expand=True, padx=2, pady=2, side='left')


        log_in_root.columnconfigure(index='all', minsize=40, weight=1)
        log_in_root.rowconfigure(index='all', minsize=20)
        log_in_root.pack(fill='both', expand=True, padx=2, pady=2)


        start_action(connect_to_srv_data_base)

    def paste_frame_main():

        def add_new_patient():
            def save():
                def check_input():
                    error_flag = False
                    for marker in local_data:
                        if marker in ("№ участка", "Фамилия", "Имя", "Отчество", "Пол", "Дата рождения",
                                      "Адрес") and not local_data.get(marker).get():
                            messagebox.showerror('Ошибка', f"Ошибка!\nНе указан пункт\n'{marker}'")
                            break
                        elif marker in ("№ амбулаторной карты", "№ участка") and local_data.get(
                                marker).get() and not local_data.get(marker).get().isdigit():
                            messagebox.showerror('Ошибка', f"Ошибка!\nУкажите пункт\n'{marker}'\nчислом")
                            break
                        elif marker == "Дата рождения":
                            try:
                                if (datetime.now() - datetime.strptime(local_data.get(marker).get(),
                                                                       "%d.%m.%Y")).days < 0:
                                    messagebox.showerror('Ошибка', f"Дата рождения не может быть больше текущей даты!")
                                    break
                            except Exception:
                                messagebox.showerror('Ошибка', f"Дата рождения должна быть в формате 'ДД.ММ.ГГГГ'")
                                break
                    else:
                        return True
                    return False

                if check_input():
                    insert_data = list()
                    for marker in ("№ участка", "№ амбулаторной карты",
                                   "Фамилия", "Имя", "Отчество", "Пол",
                                   "Дата рождения", "Адрес",
                                   "None", "None", "None"):
                        if local_data.get(marker) and local_data.get(marker).get().strip():
                            insert_data.append(local_data.get(marker).get().strip())
                        else:
                            insert_data.append("")
                    if data_base(command='save_new_patient', insert_data=insert_data):
                        messagebox.showinfo('Инфо', "Данные успешно сохранены!")
                        patient['name'] = f"{local_data.get('Фамилия').get().strip()} " \
                                          f"{local_data.get('Имя').get().strip()} " \
                                          f"{local_data.get('Отчество').get().strip()}".strip()
                        patient['birth_date'] = f"{local_data.get('Дата рождения').get().strip()}"
                        patient['gender'] = f"{local_data.get('Пол').get().strip()}"
                        patient['amb_cart'] = f"{local_data.get('№ амбулаторной карты').get().strip()}"
                        patient['patient_district'] = f"{local_data.get('№ участка').get().strip()}"
                        patient['address'] = f"{local_data.get('Адрес').get().strip()}"
                        patient['age'] = get_age_d_m_y(patient.get('birth_date'))

                        patient_info.set(f"ФИО: {patient.get('name')}\t"
                                         f"Дата рождения: {patient.get('birth_date')}    {patient['age'].get('age_txt')}\n"
                                         f"Адрес: {patient.get('address')}\n"
                                         f"№ амб: {patient.get('amb_cart')}\t"
                                         f"Участок: {patient.get('patient_district')}")

                        new_root.destroy()
                    else:
                        messagebox.showerror('Ошибка', f"Ошибка!\nОшибка сохранения двнных")

            new_root = Toplevel()
            new_root.title('Добавление нового пациента')
            root.bind("<Control-KeyPress>", keypress)
            local_data = {
                "№ амбулаторной карты": StringVar(),
                "№ участка": StringVar(),
                "Фамилия": StringVar(),
                "Имя": StringVar(),
                "Отчество": StringVar(),
                "Пол": StringVar(),
                "Дата рождения": StringVar(),
                "Адрес": StringVar(),
            }

            row = 0
            for marker in local_data:

                Label(new_root, text=marker,
                      font=('Comic Sans MS', user.get('text_size')),
                      bg="#36566d", fg='white').grid(column=0, row=row, sticky='nwse', padx=2, pady=2)
                if marker == 'Пол':
                    combo_sex = Combobox(new_root, font=('Comic Sans MS', user.get('text_size')), state="readonly",
                                         textvariable=local_data.get(marker))
                    combo_sex['values'] = ["", "мужской", "женский"]
                    combo_sex.current(0)
                    combo_sex.grid(column=1, row=row, sticky='nwse')
                else:

                    Entry(new_root, width=30, font=('Comic Sans MS', user.get('text_size')),
                          textvariable=local_data.get(marker)
                          ).grid(column=1, row=row, sticky='nwse', ipadx=2, ipady=2)
                row += 1

            Button(new_root, text='Сохранить', command=save, font=('Comic Sans MS', user.get('text_size'))).grid(
                columnspan=2, sticky='ew')

            new_root.mainloop()

        def download_ped_div():
            def start_search():
                pediatric_division = user.get('ped_div')
                download_ped_div_variable.set(f"Выгрузка справок {pediatric_division} ПО...\n"
                                              f"Обращение к базе данных...")
                download_ped_div_root.update()

                info = data_base(f"get_certificate_for_district__certificate_ped_div__{pediatric_division}")
                if not info:
                    download_ped_div_variable.set(
                        f"{download_ped_div_variable.get()} \nОшибка подключения к базе данных")
                    download_ped_div_root.update()
                else:
                    download_ped_div_variable.set(f"{download_ped_div_variable.get()} ответ получен!\n"
                                                  f"Создаю документ...")
                    download_ped_div_root.update()

                    if pediatric_division == '1':
                        document = Document()
                        table = document.add_table(rows=(len(info) + 1), cols=10)
                        table.style = 'Table Grid'
                        # widths = (Cm(1.0), Cm(1.0), Cm(2.0), Cm(3.0), Cm(2.5), Cm(1.8), Cm(3.0))
                        # for row in table.rows:
                        #     for idx, width in enumerate(widths):
                        #         row.cells[idx].width = width
                        data_table = ('№ п/п',
                                      'Дата',
                                      'ФИО лица, обратившегося за выдачей справки и (или) другого документа',
                                      'Адрес',
                                      'Документ, удостоверяющий личность',
                                      'Наименование справки и (или) другого запрашиваемого документа',
                                      'Срок исполнения',
                                      'Размер платы, взимаемый',
                                      'Дата выдачи справки и (или) другого запрашиваемого документа',
                                      'ФИО врача')
                        hdr_cells = table.rows[0].cells
                        for i in range(10):
                            hdr_cells[i].text = data_table[i]

                            rc = hdr_cells[i].paragraphs[0].runs[0]
                            rc.font.name = 'Times New Roman'
                            rc.font.size = Pt(10)
                            rc.font.bold = True

                        len_doc = len(info)
                        per_num_data = dict()
                        for per_num in (0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1):
                            per_num_data[round(len_doc * per_num)] = per_num
                        download_ped_div_variable.set(f"{download_ped_div_variable.get()} \n"
                                                      f"Таблица создана. Заполняю ячейки данными...")
                        download_ped_div_root.update()

                        for i in range(1, len(info) + 1):
                            if per_num_data.get(i):
                                download_ped_div_variable.set(f"{download_ped_div_variable.get()} \n"
                                                              f"Завершено на {round(per_num_data.get(i) * 100)}%")
                                download_ped_div_root.update()

                            hdr_cells = table.rows[i].cells
                            ped_div, district, num, date, name, birth_date, address, type_cert, doctor_name = info[
                                i - 1]
                            local_info = (
                                num, date, name, address, 'паспорт', type_cert, '1 день', 'бесплатно', date,
                                doctor_name)
                            for q in range(10):
                                hdr_cells[q].text = local_info[q]
                                rc = hdr_cells[q].paragraphs[0].runs[0]
                                rc.font.name = 'Times New Roman'
                                rc.font.size = Pt(9)

                    else:
                        document = Document()
                        table = document.add_table(rows=(len(info) + 1), cols=11)
                        table.style = 'Table Grid'
                        # widths = (Cm(1.0), Cm(1.0), Cm(2.0), Cm(3.0), Cm(2.5), Cm(1.8), Cm(3.0))
                        # for row in table.rows:
                        #     for idx, width in enumerate(widths):
                        #         row.cells[idx].width = width
                        data_table = ('№ п/п',
                                      'ФИО, обратившегося за выдачей справки и (или) другого документа',
                                      "Дата рождения",
                                      'Домашний адрес',
                                      'Дата подачи заявления',
                                      'Наименование справки и (или) другого запрашиваемого документа',
                                      'Срок исполнения',
                                      'Документ, удостоверяющий личность',
                                      'Размер платы, взимаемой за подачу справки и (или) другого документа',
                                      'Дата выдачи справки и (или) другого запрашиваемого документа',
                                      'ФИО врача (роспись заявителя)')
                        hdr_cells = table.rows[0].cells
                        for i in range(11):
                            hdr_cells[i].text = data_table[i]

                            rc = hdr_cells[i].paragraphs[0].runs[0]
                            rc.font.name = 'Times New Roman'
                            rc.font.size = Pt(10)
                            rc.font.bold = True
                        len_doc = len(info)
                        per_num_data = dict()
                        for per_num in (0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1):
                            per_num_data[round(len_doc * per_num)] = per_num
                        download_ped_div_variable.set(f"{download_ped_div_variable.get()} \n"
                                                      f"Таблица создана. Заполняю ячейки данными...")
                        download_ped_div_root.update()

                        for i in range(1, len(info) + 1):
                            if per_num_data.get(i):
                                download_ped_div_variable.set(f"{download_ped_div_variable.get()} \n"
                                                              f"Завершено на {round(per_num_data.get(i) * 100)}%")
                                download_ped_div_root.update()

                            hdr_cells = table.rows[i].cells
                            ped_div, district, num, date, name, birth_date, address, type_cert, doctor_name = info[
                                i - 1]
                            type_cert = f"пункт {type_cert}"
                            local_info = (
                                num,
                                name,
                                birth_date,
                                address,
                                date,
                                type_cert,
                                '1 день',
                                'паспорт',
                                'бесплатно',
                                date,
                                doctor_name)
                            for q in range(11):
                                hdr_cells[q].text = local_info[q]
                                rc = hdr_cells[q].paragraphs[0].runs[0]
                                rc.font.name = 'Times New Roman'
                                rc.font.size = Pt(9)

                    sections = document.sections
                    for section in sections:
                        section.orientation = WD_ORIENT.LANDSCAPE
                        section.top_margin = Cm(1.5)
                        section.bottom_margin = Cm(1.5)
                        section.left_margin = Cm(1.5)
                        section.right_margin = Cm(1.5)
                        section.page_height = Cm(21)
                        section.page_width = Cm(29.7)

                    file_name = f'.{os.sep}generated{os.sep}БРЕД_{pediatric_division}_го_ПО.docx'
                    file_name = save_document(doc=document, doc_name=file_name)
                    os.system(f"start {file_name}")
                    download_ped_div_root.destroy()

            download_ped_div_root = Toplevel()
            download_ped_div_root.title('Инфо')
            download_ped_div_variable = StringVar()
            Label(download_ped_div_root, textvariable=download_ped_div_variable,
                  font=('Comic Sans MS', user.get('text_size')),
                  bg="#36566d", fg='white').pack(fill='x', expand=True, ipady=3, ipadx=3)
            download_ped_div_variable.set("Выгрузка справок в среднем занимает около 5 минут\n"
                                          "На время формирования документа не закрывайте приложение\n"
                                          "Для начала выгрузки нажмите кнопку 'Начать поиск'")
            btn_start = Button(download_ped_div_root, text='Начать поиск', command=start_search,
                               font=('Comic Sans MS', user.get('text_size')))
            btn_start.pack(fill='x', expand=True, ipady=3, ipadx=3)

            download_ped_div_root.mainloop()

        def download_camp():
            def start_search():
                district = user.get('doctor_district')
                download_camp_variable.set(f"Выгрузка справок детского лагеря {district} участка...\n"
                                           f"Обращение к базе данных...")
                download_camp_root.update()
                info = data_base(f"get_certificate_for_district__certificate_camp__{district}")

                if not info:
                    download_camp_variable.set(f"{download_camp_variable.get()} \nОшибка подключения к базе данных")
                    download_camp_root.update()

                else:
                    download_camp_variable.set(f"{download_camp_variable.get()} ответ получен!\n"
                                               f"Создаю документ...")
                    download_camp_root.update()

                    document = Document()
                    table = document.add_table(rows=(len(info) + 1), cols=7)
                    table.style = 'Table Grid'
                    widths = (Cm(1.0), Cm(1.0), Cm(2.0), Cm(3.0), Cm(2.5), Cm(1.8), Cm(3.0))
                    for row in table.rows:
                        for idx, width in enumerate(widths):
                            row.cells[idx].width = width
                    data_table = ('Участок', '№ п/п', 'Дата выписки', 'ФИО', 'Дата рождения', 'Пол', 'Адрес')
                    hdr_cells = table.rows[0].cells
                    for i in range(7):
                        hdr_cells[i].text = data_table[i]

                        rc = hdr_cells[i].paragraphs[0].runs[0]
                        rc.font.name = 'Times New Roman'
                        rc.font.size = Pt(8)
                        rc.font.bold = True
                    len_doc = len(info)
                    per_num_data = dict()
                    for per_num in (0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1):
                        per_num_data[round(len_doc * per_num)] = per_num
                    download_camp_variable.set(f"{download_camp_variable.get()} \n"
                                               f"Таблица создана. Заполняю ячейки данными...")
                    download_camp_root.update()

                    for i in range(1, len(info) + 1):
                        if per_num_data.get(i):
                            download_camp_variable.set(f"{download_camp_variable.get()} \n"
                                                       f"Завершено на {round(per_num_data.get(i) * 100)}%")
                            download_camp_root.update()

                        hdr_cells = table.rows[i].cells
                        for q in range(7):
                            if info[i - 1][q]:
                                hdr_cells[q].text = info[i - 1][q]

                                rc = hdr_cells[q].paragraphs[0].runs[0]
                                rc.font.name = 'Times New Roman'
                                rc.font.size = Pt(8)

                    sections = document.sections
                    for section in sections:
                        section.top_margin = Cm(1.5)
                        section.bottom_margin = Cm(1.5)
                        section.left_margin = Cm(1.5)
                        section.right_margin = Cm(1.5)
                        section.page_height = Cm(21)
                        section.page_width = Cm(14.8)

                    file_name = f'.{os.sep}generated{os.sep}концлагерь_{district}_участка.docx'
                    file_name = save_document(doc=document, doc_name=file_name)
                    os.system(f"start {file_name}")
                    download_camp_root.destroy()

            download_camp_root = Toplevel()
            download_camp_root.title('Инфо')
            download_camp_variable = StringVar()
            Label(download_camp_root, textvariable=download_camp_variable,
                  font=('Comic Sans MS', user.get('text_size')),
                  bg="#36566d", fg='white').pack(fill='x', expand=True, ipady=3, ipadx=3)
            download_camp_variable.set("Выгрузка лагеря в среднем занимает около 5 минут\n"
                                       "На время формирования документа не закрывайте приложение\n"
                                       "Для начала выгрузки нажмите кнопку 'Начать поиск'")
            btn_start = Button(download_camp_root, text='Начать поиск', command=start_search,
                               font=('Comic Sans MS', user.get('text_size')))
            btn_start.pack(fill='x', expand=True, ipady=3, ipadx=3)

            download_camp_root.mainloop()

        def search_loop():
            search_data = {
                'found_patient_root': None,
                'found_patient_data': dict()
            }

            def select_patient():
                rowid, district, amb_cart, name_1, name_2, name_3, gender, birth_date, address, phone, vac_1, vac_2 = \
                    search_data['found_patient_data'].get(int(selected_patient.get()))
                patient['name'] = f"{name_1} {name_2} {name_3}"
                patient['birth_date'] = birth_date
                patient['gender'] = gender
                patient['amb_cart'] = amb_cart
                patient['patient_district'] = district
                patient['address'] = address
                patient['vac_1'] = vac_1
                patient['vac_2'] = vac_2
                patient['age'] = get_age_d_m_y(patient.get('birth_date'))

                patient_info.set(f"ФИО: {patient.get('name')}    "
                                 f"Дата рождения: {patient.get('birth_date')}\n"
                                 f"Адрес: {patient.get('address')}\n"
                                 f"№ амб: {patient.get('amb_cart')}    "
                                 f"Участок: {patient.get('patient_district')}    "
                                 f"Возраст: {patient['age'].get('age_txt')}\n"
                                 f"Телефон: {phone}")
                search_root.destroy()
                delete_txt_patient_data()

            def button_search_in_db(event=None):
                if search_data.get('found_patient_root'):
                    search_data['found_patient_root'].destroy()
                search_root.update()

                word_list = ["qwertyuiopasdfghjkl;'zxcvbnm,.", "йцукенгшщзфывапролджэячсмитьбю"]
                patient_data = txt_patient_data_variable.get()
                name = list()

                for i in patient_data.split():
                    if i[0] in word_list[0]:
                        name_0 = ''
                        for q in i.lower():
                            if q in word_list[0]:
                                name_0 += word_list[1][word_list[0].index(q)]
                            else:
                                name_0 += q
                        name.append(name_0.capitalize())
                    else:
                        name.append(i.capitalize())

                sql_str = ''
                if patient_data.isdigit():
                    sql_str += f"amb_cart LIKE '{patient_data}%'"
                else:
                    for i in patient_data:
                        if i.isdigit():
                            sql_str += "Домашний_адрес LIKE '"
                            for q in name:
                                sql_str += f"%{q}"
                            sql_str += "%'"
                            break
                    else:

                        if len(name) == 1:
                            sql_str += f"Фамилия LIKE '{name[0]}%'"
                        elif len(name) == 2:
                            sql_str += f"Фамилия LIKE '{name[0]}%' AND Имя LIKE '{name[1]}%'"
                        elif len(name) == 3:
                            sql_str += f"Фамилия LIKE '{name[0]}%' AND Имя LIKE '{name[1]}%' AND Отчество LIKE '{name[2]}%'"

                        elif len(patient_data.split()) > 3:
                            messagebox.showinfo('Ошибка', 'Неверный формат ввода!\n'
                                                          'Ожидалось максимум 3 блока данных\n'
                                                          f'Получено: <b>{len(patient_data.split())}</b> блоков\n'
                                                          f'Измените запрос')

                if not sql_str:
                    counter_patient.set('Ошибка!\n'
                                        'По введенной информации не удалось сформулировать sql запрос')


                else:
                    with sq.connect(f".{os.sep}data_base{os.sep}patient_data_base.db") as conn:
                        cur = conn.cursor()
                        cur.execute(f"SELECT rowid, * FROM patient_data WHERE {sql_str}")
                        found_data = cur.fetchall()

                    if len(found_data) < 1:
                        counter_patient.set("По введенной информации не удалось найти пациента")
                        # messagebox.showinfo('Ошибка', 'По введенной информации не удалось найти пациента')

                    else:
                        search_data['found_patient_data'].clear()
                        if len(found_data) == 1:
                            search_data['found_patient_data'][found_data[0][0]] = found_data[0]
                            selected_patient.set(found_data[0][0])
                            select_patient()

                        else:

                            frame_search = Frame(master=search_root, bg="#36566d")
                            search_data['found_patient_root'] = frame_search
                            counter_patient.set(f"Найдено пациентов: {len(found_data)}")
                            split_len = {
                                'col_1': 0,
                                'col_2': 0,
                                'col_3': 0,
                                'col_4': 0}
                            for info in found_data:
                                (rowid, district, amb_cart,
                                 name_1, name_2, name_3,
                                 gender, birth_date, address, phone,
                                 vac_1, vac_2) = info

                                for mark_1, mark_2 in (
                                        (district, 'col_1'),
                                        (amb_cart, 'col_2'),
                                        (f"{name_1} {name_2} {name_3}", 'col_3')):
                                    if len(mark_1) > split_len.get(mark_2):
                                        split_len[mark_2] = len(mark_1)

                            for info in found_data:
                                (rowid, district, amb_cart,
                                 name_1, name_2, name_3,
                                 gender, birth_date, address, phone,
                                 vac_1, vac_2) = info
                                search_data['found_patient_data'][rowid] = info

                                text = f"Участок: {district};" + ' ' * (split_len.get('col_1') - len(district))
                                text += f"\t№ амб: {amb_cart};" + ' ' * (split_len.get('col_2') - len(amb_cart))
                                text += f"\tФИО: {name_1.capitalize()} {name_2.capitalize()} {name_3.capitalize()}" \
                                        + ' ' * (split_len.get('col_3') - len(f"{name_1} {name_2} {name_3}"))
                                text += f"  \t{birth_date};  "
                                text += f"  \tАдрес: {address}"

                                Radiobutton(master=frame_search, text=text,
                                            font=('Comic Sans MS', user.get('text_size')),
                                            compound='left',
                                            command=select_patient,
                                            value=rowid, variable=selected_patient,
                                            indicatoron=False, selectcolor='#77f1ff',
                                            anchor='w'
                                            ).pack(fill='both', expand=True, padx=2, pady=2, anchor='w')
                            frame_search.columnconfigure(index='all', minsize=40, weight=1)
                            frame_search.rowconfigure(index='all', minsize=20)
                            frame_search.pack(fill='both', expand=True, padx=2, pady=2)

            search_root = Toplevel()
            search_root.title('Поиск пациента')
            search_root.config(bg='white')
            search_root.geometry('+0+0')

            frame_title = Frame(master=search_root, bg="#36566d")
            Label(frame_title, text='Окно данных пациента',
                  font=('Comic Sans MS', user.get('text_size')), bg="#36566d", fg='white').grid(column=0, row=0,
                                                                                                columnspan=2)

            text_patient_data = Entry(frame_title, width=100,
                                      font=('Comic Sans MS', user.get('text_size')),
                                      textvariable=txt_patient_data_variable)
            text_patient_data.grid(column=0, row=1)
            text_patient_data.focus()
            text_patient_data.bind('<Return>', button_search_in_db)

            Button(frame_title, text='Найти', command=button_search_in_db,
                   font=('Comic Sans MS', user.get('text_size'))).grid(column=1, row=1, sticky='ew')

            counter_patient = StringVar()
            selected_patient = StringVar()
            Label(frame_title,
                  textvariable=counter_patient,
                  font=('Comic Sans MS', user.get('text_size')),
                  bg="#36566d", fg='white'
                  ).grid(column=0, row=2, columnspan=2)
            frame_title.pack(fill='both', expand=True, padx=2, pady=2)
            counter_patient.set('Поиск пациентов...')
            button_search_in_db()
            search_root.mainloop()

        def redact_doctor():
            change_doctor(command='redact')

        def add_new_doctor():
            change_doctor(command='new')

        def change_doctor(command):
            def save():
                doctor_name = txt_doctor_name.get().strip()
                manager = txt_manager.get().strip()
                district = txt_district.get().strip()
                ped_div = txt_ped_div.get().strip()
                text_size = txt_text_size.get().strip()
                password = txt_password.get()

                db_type = 'loc'
                if combo_db.get() == 'Сервер':
                    db_type = 'srv'

                if not doctor_name:
                    messagebox.showinfo('Ошибка', 'Ошибка имени доктора!')
                elif not manager:
                    messagebox.showinfo('Ошибка', 'Ошибка имени заведующего!')
                elif not district:
                    messagebox.showinfo('Ошибка', 'Ошибка участка!\nУкажите участок числом')
                elif not ped_div or ped_div not in ('1', '2', '3', 'ПРОЧЕЕ'):
                    messagebox.showinfo('Ошибка', "Ошибка ПО\nУкажите номер ПО числом или 'ПРОЧЕЕ'")
                elif not text_size or not text_size.isdigit() or (4 > int(text_size) or int(text_size) > 30):
                    messagebox.showinfo('Ошибка', 'Ошибка размера текста\n'
                                                  'Укажите размер текста числом от 5 до 30')

                else:
                    user['app_data']['path_examination_data_base'] = txt_path_db_loc.get().strip()
                    user['app_data']['path_srv_data_base'] = txt_path_db_srv.get().strip()
                    data_base(command='edit_path_db')

                    if user.get('error_connection'):
                        new_doc = [doctor_name, district, ped_div, manager, True, text_size]
                        answer, mess = data_base(command='save_new_doc',
                                                 insert_data=new_doc)
                        if answer:
                            messagebox.showinfo('Успешно', 'Данные успешно сохранены!')
                            combo_doc['values'] = data_base(command='get_doc_names_local')

                            combo_doc.current(0)

                            user['text_size'] = int(txt_text_size.get())

                            new_root.destroy()
                            data_base(command='append_local_doctor_data',
                                      insert_data=combo_doc.get())
                            write_lbl_doc()
                            update_font_main()
                            root.update()

                        else:
                            messagebox.showinfo('Ошибка', f'Ошибка записи в базу данных:\n{mess}')

                    else:
                        for string in user.get('add_info').split('__<end!>__'):
                            if 'examination_db_place:____' in string:
                                user['add_info'] = user.get('add_info', '').replace(string,
                                                                                    f"examination_db_place:____{db_type}")
                                break
                        else:
                            user['add_info'] = f"examination_db_place:____{db_type}__<end!>__\n"
                        new_doc = [doctor_name, password, district, ped_div, manager, True, text_size,
                                   user.get('add_info')]
                        answer, mess = data_base(command='save_new_doc',
                                                 insert_data=new_doc)
                        if answer:

                            messagebox.showinfo('Успешно', 'Данные успешно сохранены!')
                            user['text_size'] = int(text_size)
                            user['password'] = password
                            user['doctor_district'] = district
                            user['ped_div'] = ped_div
                            user['manager'] = manager

                            if app_info['all_doctor_info'].get(doctor_name):
                                app_info['all_doctor_info'][doctor_name]['password'] = password
                                app_info['all_doctor_info'][doctor_name]['district'] = district
                                app_info['all_doctor_info'][doctor_name]['ped_div'] = ped_div
                                app_info['all_doctor_info'][doctor_name]['manager'] = manager
                                app_info['all_doctor_info'][doctor_name]['text_size'] = int(text_size)

                            new_root.destroy()
                            write_lbl_doc()
                            update_font_main()
                            root.update()

                        else:
                            messagebox.showinfo('Ошибка', f'Ошибка записи в базу данных:\n{mess}')

            new_root = Toplevel()

            txt_doctor_name = Entry(new_root, width=30, font=('Comic Sans MS', user.get('text_size')))
            txt_password = Entry(new_root, width=30, font=('Comic Sans MS', user.get('text_size')))

            if command == 'new':
                new_root.title('Новая учетная запись')
                Label(new_root, text='ФИО доктора: ', font=('Comic Sans MS', user.get('text_size'))).grid(column=0,
                                                                                                          row=0)
                txt_doctor_name.grid(column=1, row=0, sticky='ew')

            else:
                new_root.title('Редактирование учетной записи')
                Label(new_root, text=f"Пользователь: {user.get('doctor_name')}",
                      font=('Comic Sans MS', user.get('text_size')),
                      bg="#36566d", fg='white').grid(column=0, row=0, columnspan=2,
                                                     sticky='nwse', ipadx=5, ipady=5)

            Label(new_root, text='ФИО заведующего: ', font=('Comic Sans MS', user.get('text_size'))).grid(column=0,
                                                                                                          row=1)
            Label(new_root, text='Номер участка: ', font=('Comic Sans MS', user.get('text_size'))).grid(column=0, row=2)
            Label(new_root, text='Номер ПО (1, 2, 3, ПРОЧЕЕ): ',
                  font=('Comic Sans MS', user.get('text_size'))).grid(column=0, row=3)
            Label(new_root, text='Размер текста: ', font=('Comic Sans MS', user.get('text_size'))).grid(column=0, row=4)

            txt_manager = Entry(new_root, width=30, font=('Comic Sans MS', user.get('text_size')))
            txt_manager.grid(column=1, row=1, sticky='ew')

            txt_district = Entry(new_root, width=5, font=('Comic Sans MS', user.get('text_size')))
            txt_district.grid(column=1, row=2, sticky='ew')

            txt_ped_div = Entry(new_root, width=5, font=('Comic Sans MS', user.get('text_size')))
            txt_ped_div.grid(column=1, row=3, sticky='ew')

            txt_text_size = Entry(new_root, width=5, font=('Comic Sans MS', user.get('text_size')))
            txt_text_size.grid(column=1, row=4, sticky='ew')

            combo_db = Combobox(new_root, font=('Comic Sans MS', user.get('text_size')), state="readonly")
            combo_db['values'] = ["Сервер", "Мой компьютер"]
            combo_db.current(0)

            if not user.get('error_connection'):
                Label(new_root, text='Пароль: ', font=('Comic Sans MS', user.get('text_size'))).grid(column=0, row=5)
                txt_password.grid(column=1, row=5, sticky='ew')

                Label(new_root, text='Место хранения осмотров: ', font=('Comic Sans MS', user.get('text_size'))).grid(
                    column=0, row=8)
                if 'examination_db_place:____loc' in user.get('add_info'):
                    combo_db.current(1)
                combo_db.grid(column=1, row=8)

            txt_path_db_loc = Entry(new_root, width=30, font=('Comic Sans MS', user.get('text_size')))

            txt_path_db_srv = Entry(new_root, width=30, font=('Comic Sans MS', user.get('text_size')))

            Label(new_root, text='path loc DB: ', font=('Comic Sans MS', user.get('text_size'))).grid(column=0, row=6)
            txt_path_db_loc.grid(column=1, row=6, sticky='ew')
            if user['app_data'].get('path_examination_data_base'):
                txt_path_db_loc.insert(0, user['app_data'].get('path_examination_data_base', ''))

            Label(new_root, text='path srv DB: ', font=('Comic Sans MS', user.get('text_size'))).grid(column=0, row=7)
            txt_path_db_srv.grid(column=1, row=7, sticky='ew')
            if user['app_data'].get('path_srv_data_base'):
                txt_path_db_srv.insert(0, user['app_data'].get('path_srv_data_base', ''))

            Button(new_root, text='Сохранить', command=save, font=('Comic Sans MS', user.get('text_size'))).grid(
                columnspan=2, sticky='ew')

            if command == 'redact':
                txt_doctor_name.insert(0, user.get('doctor_name'))
                txt_manager.insert(0, user.get('manager'))
                txt_district.insert(0, user.get('doctor_district'))
                txt_ped_div.insert(0, user.get('ped_div'))
                txt_text_size.insert(0, user.get('text_size'))
                txt_password.insert(0, user.get('password', ''))

            new_root.mainloop()

        def paste_txt_patient_data(event):
            if event.keycode == 86 or event.keycode == 150994966:
                txt_patient_data.delete(0, 'end')
                event.widget.event_generate('<<Paste>>')
                search_patient()

            elif event.keycode == 67 or event.keycode == 134217731:
                event.widget.event_generate('<<Copy>>')
            elif event.keycode == 88 or event.keycode == 117440536:
                event.widget.event_generate('<<Cut>>')

        def save_doctor(new_doctor_name):
            data_base(command='append_local_doctor_data', insert_data=new_doctor_name)
            data_base(command='save_doctor_local',
                      insert_data=[new_doctor_name])
            write_lbl_doc()
            update_font_main()

        def search_patient(*args, **kwargs):
            patient_data = txt_patient_data_variable.get()

            if ('Фамилия, имя, отчество пациента:' in patient_data or
                    '№ амб. карты' in patient_data or
                    '№ амбулаторной карты' in patient_data):
                patient_data = decoding_name(patient_data)
                if patient_data:
                    for key in patient:
                        if patient_data.get(key):
                            patient[key] = patient_data.get(key)
                    patient['age'] = get_age_d_m_y(patient.get('birth_date'))
                    patient_info.set(f"ФИО: {patient_data.get('name')}    "
                                     f"Дата рождения: {patient_data.get('birth_date')}\n"
                                     f"Адрес: {patient_data.get('address')}\n"
                                     f"№ амб: {patient_data.get('amb_cart')}    "
                                     f"Участок: {patient_data.get('patient_district')}    "
                                     f"Возраст: {patient['age'].get('age_txt')}")
                    delete_txt_patient_data()
                    return True
                else:
                    delete_txt_patient_data()
            else:
                search_loop()

        def write_lbl_doc():

            lbl_doc_text.set(f"Учетная запись:\n"
                             f"Доктор: {user.get('doctor_name')}\n"
                             f"Зав: {user.get('manager')};    "
                             f"Участок: {user.get('doctor_district')};    "
                             f"ПО: {user.get('ped_div')}")

            if 'константинова' in user.get('doctor_name'):
                lbl_doc_text.set(f"Учетная запись:\n"
                                 f"Доктор: Яночка Константиновна\n"
                                 f"Зав: {user.get('manager')};    "
                                 f"Участок: {user.get('doctor_district')};    "
                                 f"ПО: {user.get('ped_div')}")

            root.update()

        def selected(event=None):
            save_doctor(new_doctor_name=combo_doc.get())

            # data_base(command='append_local_doctor_data',
            #           insert_data=combo_doc.get())

            update_font_main()

        def delete_txt_patient_data():
            txt_patient_data_variable.set('')

        def update_font_main():
            if app_info.get('frame_main'):
                app_info['frame_main'].destroy()
                app_info['frame_main'] = None

            paste_frame_main()

        def delete_doc_local():
            result = messagebox.askyesno(title='Удаление учетной записи',
                                         message=f"Удалить пользователя?\n"
                                                 f"{combo_doc.get()}")
            if result:
                with sq.connect(f".{os.sep}data_base{os.sep}data_base.db") as conn:
                    cur = conn.cursor()
                    cur.execute(f"DELETE FROM врачи WHERE doctor_name LIKE '{combo_doc.get()}'")

                messagebox.showinfo("Результат", "Учетная запись удалена")
                data_base('create_db')
                combo_doc['values'] = data_base(command='get_doc_names_local')
                combo_doc.current(0)
                selected()

        def change_account():
            paste_log_in_root()

        if app_info.get('log_in_root'):
            app_info['log_in_root'].destroy()
            app_info['log_in_root'] = None
            txt_password_variable.set("")
            selected_doctor_name.set("")


        frame_main = Frame(master=root, bg="#36566d")
        app_info['frame_main'] = frame_main
        txt_patient_data_variable = StringVar()

        frame_main_loc = Frame(master=frame_main, borderwidth=1, relief="solid", padx=8, pady=10)

        combo_doc = Combobox(frame_main_loc, state="readonly")

        if user.get('error_connection'):
            combo_doc['values'] = data_base(command='get_doc_names_local')
            combo_doc.current(0)
            combo_doc.grid(column=0, row=1, columnspan=3)
            combo_doc.bind("<<ComboboxSelected>>", selected)
            data_base(command='append_local_doctor_data',
                      insert_data=combo_doc.get())


            Label(frame_main_loc, textvariable=lbl_doc_text,
                  font=('Comic Sans MS', user.get('text_size'))
                  ).grid(column=0, row=0, columnspan=3)


            Button(frame_main_loc, text='Добавить доктора', command=add_new_doctor,
                   font=('Comic Sans MS', user.get('text_size'))
                   ).grid(column=0, row=2, sticky='ew')
            Button(frame_main_loc, text='Редактировать данные', command=redact_doctor,
                   font=('Comic Sans MS', user.get('text_size'))
                   ).grid(column=1, row=2, sticky='ew')
            Button(frame_main_loc, text='Удалить пользователя', command=delete_doc_local,
                   font=('Comic Sans MS', user.get('text_size'))
                   ).grid(column=2, row=2, sticky='ew')

            write_lbl_doc()

        else:
            start_action(edit_local_db)

            Label(frame_main_loc, textvariable=lbl_doc_text,
                  font=('Comic Sans MS', user.get('text_size'))
                  ).grid(column=0, row=0, columnspan=2)

            lbl_doc_text.set(f"Учетная запись:\n"
                             f"Доктор: {user.get('doctor_name')}\n"
                             f"Зав: {user.get('manager')};    "
                             f"Участок: {user.get('doctor_district')};    "
                             f"ПО: {user.get('ped_div')}")

            Button(frame_main_loc, text='Сменить пользователя', command=change_account,
                   font=('Comic Sans MS', user.get('text_size'))
                   ).grid(column=0, row=2, sticky='ew')
            Button(frame_main_loc, text='Редактировать данные', command=redact_doctor,
                   font=('Comic Sans MS', user.get('text_size'))
                   ).grid(column=1, row=2, sticky='ew')

        frame_main_loc.columnconfigure(index='all', minsize=40, weight=1)
        frame_main_loc.rowconfigure(index='all', minsize=20)
        frame_main_loc.pack(fill='both', expand=True, padx=2, pady=2)

        frame_main_loc = Frame(master=frame_main, borderwidth=1, relief="solid", padx=8, pady=10)

        Label(frame_main_loc, text='Окно данных пациента',
              font=('Comic Sans MS', user.get('text_size'))
              ).grid(column=0, row=2, columnspan=3, sticky='ew')

        txt_patient_data = Entry(frame_main_loc, width=40, textvariable=txt_patient_data_variable,
              font=('Comic Sans MS', user.get('text_size')))
        txt_patient_data.grid(column=0, row=3)
        txt_patient_data.bind('<Control-KeyPress>', paste_txt_patient_data)
        txt_patient_data.bind('<Return>', search_patient)
        patient_info = StringVar()
        Label(frame_main_loc, textvariable=patient_info,
              font=('Comic Sans MS', user.get('text_size'))
              ).grid(column=0, row=4, sticky='ew', columnspan=2, ipadx=3)

        Button(frame_main_loc, text='Добавить\nнового\nпациента', command=add_new_patient,
               font=('Comic Sans MS', user.get('text_size'))
               ).grid(column=2, row=3, rowspan=2, sticky='nswe')

        Button(frame_main_loc, text='X', command=delete_txt_patient_data,
                      font=('Comic Sans MS', user.get('text_size'))
               ).grid(column=1, row=3, sticky='ew')

        frame_main_loc.columnconfigure(index='all', minsize=40, weight=1)
        frame_main_loc.rowconfigure(index='all', minsize=20)
        frame_main_loc.pack(fill='both', expand=True, padx=2, pady=2)

        frame_main_loc = Frame(master=frame_main, borderwidth=1, relief="solid", padx=8, pady=10)

        Label(frame_main_loc, text='Что хотите сделать?', anchor='center',
              font=('Comic Sans MS', user.get('text_size'))
              ).grid(column=0, row=0, columnspan=2, sticky='ew')

        Button(frame_main_loc, text='Справка', command=fast_certificate,
              font=('Comic Sans MS', user.get('text_size'))
               ).grid(column=0, row=1, sticky='ew')

        Button(frame_main_loc, text='Анализы', command=analyzes_cmd,
              font=('Comic Sans MS', user.get('text_size'))
               ).grid(column=1, row=1, sticky='ew')

        Button(frame_main_loc, text='Вкладыши', command=blanks_cmd,
              font=('Comic Sans MS', user.get('text_size'))
               ).grid(column=0, row=2, sticky='ew')

        Button(frame_main_loc, text='Прививки', command=vaccination_cmd,
              font=('Comic Sans MS', user.get('text_size'))
               ).grid(column=1, row=2, sticky='ew')

        Button(frame_main_loc, text='Направления', command=direction_cmd,
              font=('Comic Sans MS', user.get('text_size'))
               ).grid(column=0, row=3, sticky='ew')

        Button(frame_main_loc, text='Мой прием', command=open_last_examination,
              font=('Comic Sans MS', user.get('text_size'))
               ).grid(column=1, row=3, sticky='ew')

        Button(frame_main_loc, text='Осмотры', command=examination_cmd,
              font=('Comic Sans MS', user.get('text_size'))
               ).grid(column=0, row=4, sticky='ew')

        Button(frame_main_loc, text='Осмотры до года', command=examination_cmd_child,
              font=('Comic Sans MS', user.get('text_size'))
               ).grid(column=1, row=4, sticky='ew')

        Button(frame_main_loc, text='Выгрузить лагерь', command=download_camp,
              font=('Comic Sans MS', user.get('text_size'))
               ).grid(column=0, row=5, sticky='ew')


        if 'local_admin' in str(user.get('add_info', "")):
            Button(frame_main_loc, text='Журнал справок', command=download_ped_div,
                   font=('Comic Sans MS', user.get('text_size'))
                   ).grid(column=1, row=5, sticky='ew')

        frame_main_loc.columnconfigure(index='all', minsize=40, weight=1)
        frame_main_loc.rowconfigure(index='all', minsize=20)
        frame_main_loc.pack(fill='both', expand=True, padx=2, pady=2)

        frame_main.pack(fill='both', expand=True, padx=2, pady=2)

        сalendar_img = ImageTk.PhotoImage(Image.open('сalendar_img.png').resize((user.get('text_size')*2, user.get('text_size')*2)))
        user['сalendar_img'] = сalendar_img



    root = Tk()
    root.title(f"Генератор справок v_{program_version}")
    root.config(bg="#36566d")
    root.geometry('+0+0')

    animation = StringVar()
    animation.set("")
    lbl_doc_text = StringVar()
    load_info_text = StringVar()

    selected_doctor_name = StringVar()
    txt_password_variable = StringVar()
    text_is_correct_password = StringVar()

    frame_lbl = Frame(padx=3, pady=3, bg="#36566d")

    frame_animation = Frame(frame_lbl, padx=3, pady=3, bg="#36566d")

    Label(frame_animation, textvariable=animation,
          anchor='ne', bg="#36566d", fg='white', compound='bottom'
          ).pack(fill='both', expand=True, padx=2, pady=2)

    Label(frame_animation, textvariable=load_info_text,
          anchor='ne', bg="#36566d", fg='white', compound='bottom'
          ).pack(fill='both', expand=True, padx=2, pady=2)

    frame_animation.pack(fill='both', expand=True, padx=2, pady=2, side='left')

    image = ImageTk.PhotoImage(Image.open('Crynet_systems.png').resize((200, 50)))

    crynet_systems_label = Label(frame_lbl, image=image, anchor='ne', bg="#36566d", fg='white', compound='bottom')
    crynet_systems_label.pack(fill='both', expand=True, padx=2, pady=2, side='left')
    frame_lbl.pack(fill='both', expand=True, padx=2, pady=2)
    crynet_systems_label.bind('<Double-Button-1>', start_edit_local_db)

    paste_log_in_root()

    root.mainloop()


if __name__ == "__main__":
    main_root()
